<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永红的互联网手记</title>
  
  <subtitle>我相信好代码和好产品改变世界！</subtitle>
  <link href="http://yonghong.tech/atom.xml" rel="self"/>
  
  <link href="http://yonghong.tech/"/>
  <updated>2021-03-01T14:24:00.000Z</updated>
  <id>http://yonghong.tech/</id>
  
  <author>
    <name>王永红(Micheal Wang)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL update 语句 set 顺序</title>
    <link href="http://yonghong.tech/2021/03/mysql-update-set-order/"/>
    <id>http://yonghong.tech/2021/03/mysql-update-set-order/</id>
    <published>2021-03-01T14:24:00.000Z</published>
    <updated>2021-03-01T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>绝大多数数据库，在执行 update 语句时，update t set a = b, b = a 便可实现 a、b 列值互换，赋值表达式右侧的值取的都是原始值。MySQL 则是例外，其单表更新是自左到右依次完成，即先完成 a = b，然后在完成 b = a (此时 a = b），所以执行结果变成 a、b 列都是 b，然后多表更新则又不尊从该更新法则。</p><p>这个问题源于业务中一次对券有效期进行延期的操作，需求是对优惠券有效期延期 35 天。</p><ul><li>一部分券在生效中，直接修改过期时间即可；</li><li>一部分券已经过期，修改过期时间后，需要判断一下是否仍然是过期的还是生效中的，修改券的状态</li></ul><span id="more"></span><p>所以 SQL 语句大致如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE coupon </span><br><span class="line"><span class="keyword">SET</span> end_time <span class="operator">=</span> DATE_ADD(end_time, <span class="type">INTERVAL</span> <span class="number">35</span> <span class="keyword">DAY</span>), </span><br><span class="line">status <span class="operator">=</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> end_time <span class="operator">&gt;</span> NOW() <span class="keyword">THEN</span> <span class="string">&#x27;生效中&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;已过期&#x27;</span> <span class="keyword">END</span>), </span><br><span class="line">gmt_modify <span class="operator">=</span> NOW() </span><br><span class="line"><span class="keyword">WHERE</span> ... ;</span><br></pre></td></tr></table></figure><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>这个地方就有个问题，当修改 status 的时候 end_time 到底是原始数据，还是修改后的数据。经过测试，是使用的修改后的数据，接下来去 MySQL 官网中求证一下。</p><h2 id="MySQL-官方文档的说明"><a href="#MySQL-官方文档的说明" class="headerlink" title="MySQL 官方文档的说明"></a>MySQL 官方文档的说明</h2><p>MySQL 官网文档中是这样描述的，当你要更新一个列的时候，UPDATE 语句使用的是这列值的当前值。举个例子：下面这个语句从左到右顺序执行，先执行 col1 = col + 1，此时 col1 已经是加 1 后的值了，执行 col2 = col1 的时候，也是加 1 后的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1 <span class="keyword">SET</span> col1 <span class="operator">=</span> col1 <span class="operator">+</span> <span class="number">1</span>, col2 <span class="operator">=</span> col1;</span><br></pre></td></tr></table></figure><p><strong>但是，这个规则只适用于单表的 UPDATE，多表就不适用于这个规则了，多表更新，赋值语句不确保任何给定的顺序执行，可能是原值，也可能是新值。</strong></p><h2 id="MySQL-如何实现两列互换"><a href="#MySQL-如何实现两列互换" class="headerlink" title="MySQL 如何实现两列互换"></a>MySQL 如何实现两列互换</h2><p>编程语言中，实现两个变量互换很简单：引入临时变量 tmp，tmp = a，a = b，b = tmp 即可实现 a、b 互换，但是 SQL 中没有临时变量，又如何实现变量互换呢？解决方案还是使用临时变量（只不过临时变量是某数据列的值，然后后面再覆盖该数据列的值），假设有 a b 列，a = 100，b = 1，实现 a b 互换，我们可以使用通用手法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a <span class="operator">=</span> a <span class="operator">+</span> b, <span class="number">101</span></span><br><span class="line">b <span class="operator">=</span> a <span class="operator">-</span> b, <span class="number">100</span></span><br><span class="line">a <span class="operator">=</span> a <span class="operator">-</span> b, <span class="number">1</span></span><br></pre></td></tr></table></figure><p>至此，a = 1, b = 100，实现 a、b 值互换，SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update t <span class="keyword">set</span> a <span class="operator">=</span> a <span class="operator">+</span> b, b <span class="operator">=</span> a <span class="operator">-</span> b, a <span class="operator">=</span> a <span class="operator">-</span> b;</span><br></pre></td></tr></table></figure><h2 id="MySQL-多表更新的例子"><a href="#MySQL-多表更新的例子" class="headerlink" title="MySQL 多表更新的例子"></a>MySQL 多表更新的例子</h2><p>两张表：pur_po_bill_detail（采购单细表），wm_sh_bill_detail（收货单细表），采购后，先根据采购单细表创建收货单，然后根据收货单入库。</p><p><strong>pur_po_bill_detail（采购单细表）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `pur_po_bill_detail` (</span><br><span class="line">  `sid` <span class="type">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `bill_id` <span class="type">bigint</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;po单号id&#x27;</span>,</span><br><span class="line">  `bill_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单号&#x27;</span>,</span><br><span class="line">  `pw_count` <span class="type">decimal</span>(<span class="number">20</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已入库数量&#x27;</span>,</span><br><span class="line">  `th_count` <span class="type">decimal</span>(<span class="number">20</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;不合格数量&#x27;</span>,</span><br><span class="line">  `bill_status` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`sid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;采购订单细表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>wm_sh_bill_detail（收货单细表）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `wm_sh_bill_detail` (</span><br><span class="line">  `sid` <span class="type">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `bill_id` <span class="type">bigint</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收货单id&#x27;</span>,</span><br><span class="line">  `bill_no` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ref_number` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="string">&#x27;采购单号&#x27;</span>,</span><br><span class="line">  `ref_detail_sid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> <span class="string">&#x27;采购单行项目sid&#x27;</span>,</span><br><span class="line">  `sh_count` <span class="type">decimal</span>(<span class="number">20</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `in_count` <span class="type">decimal</span>(<span class="number">20</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `left_count` <span class="type">decimal</span>(<span class="number">20</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  ...</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`sid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;收货单细表&#x27;</span></span><br></pre></td></tr></table></figure><p>下述sql是在收货单入库时反写采购单细表入库数量、状态。</p><p>当采购单行项目：入库数量 + 不合格退货数量 &gt;= 订单数量，状态变成已入库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE pur_po_bill_detail t0, wm_sh_bill_detail t1</span><br><span class="line"><span class="keyword">set</span> t0.pw_count <span class="operator">=</span> <span class="built_in">coalesce</span>(t0.pw_count,<span class="number">0</span>) <span class="operator">+</span> t1.in_count, </span><br><span class="line">t0.th_count <span class="operator">=</span> <span class="built_in">coalesce</span>(t0.th_count,<span class="number">0</span>) <span class="operator">+</span> <span class="built_in">coalesce</span>(t1.left_count,<span class="number">0</span>),</span><br><span class="line">t0.bill_status <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> t0.pw_count <span class="operator">+</span> t0.th_count <span class="operator">&gt;=</span> t0.goods_count <span class="keyword">then</span> <span class="string">&#x27;已入库&#x27;</span> <span class="keyword">else</span> t0.bill_status <span class="keyword">end</span></span><br><span class="line"><span class="keyword">WHERE</span> t0.sid <span class="operator">=</span> t1.ref_detail_sid <span class="keyword">and</span> t1.bill_no <span class="operator">=</span> <span class="string">&#x27;SH20180001&#x27;</span>;</span><br></pre></td></tr></table></figure><p>sql执行结果失败，系mysql多表更新，在case判断时，t0.pw_count, t0.th_count取到的是原值。所以mysql多表更新需要注意：</p><p>赋值语句、case语句尽量避免依赖引用，如本案case使用了赋值语句pw_count,th_count列，所以判断就出问题啦；可通过update语句拆分来实现多表复杂更新目标。</p><p>上述update语句拆分，先更新数量，然后更新状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UPDATE pur_po_bill_detail t0, wm_sh_bill_detail t1</span><br><span class="line"><span class="keyword">set</span> t0.pw_count <span class="operator">=</span> <span class="built_in">coalesce</span>(t0.pw_count,<span class="number">0</span>) <span class="operator">+</span> t1.in_count, </span><br><span class="line">t0.th_count <span class="operator">=</span> <span class="built_in">coalesce</span>(t0.th_count,<span class="number">0</span>) <span class="operator">+</span> <span class="built_in">coalesce</span>(t1.left_count,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">WHERE</span> t0.sid <span class="operator">=</span> t1.ref_detail_sid <span class="keyword">and</span> t1.bill_no <span class="operator">=</span> <span class="string">&#x27;SH20180001&#x27;</span>;</span><br><span class="line"></span><br><span class="line">UPDATE pur_po_bill_detail t0, wm_sh_bill_detail t1</span><br><span class="line"><span class="keyword">set</span> t0.bill_status <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> t0.pw_count <span class="operator">+</span> t0.th_count <span class="operator">&gt;=</span> t0.goods_count <span class="keyword">then</span> <span class="string">&#x27;已入库&#x27;</span> <span class="keyword">else</span> t0.bill_status <span class="keyword">end</span></span><br><span class="line"><span class="keyword">WHERE</span> t0.sid <span class="operator">=</span> t1.ref_detail_sid <span class="keyword">and</span> t1.bill_no <span class="operator">=</span> <span class="string">&#x27;SH20180001&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="再次回到业务中来"><a href="#再次回到业务中来" class="headerlink" title="再次回到业务中来"></a>再次回到业务中来</h2><p>再次回到业务场景中来，如果采用券的过期时间全部更新这种方式的话，先执行 end_time 延期，再去判断是否过期，这个时候使用的 end_time 已经是修改过的了。</p><p>其实这种更新方式也没有必要，如果券延期后还是过期的，那么其实也可以不更新券的有效期，那么 SQL 就变成了下面这样的。先过滤出延期后是生效状态的券，在进行更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE coupon </span><br><span class="line"><span class="keyword">SET</span> end_time <span class="operator">=</span> DATE_ADD(end_time, <span class="type">INTERVAL</span> <span class="number">35</span> <span class="keyword">DAY</span>), </span><br><span class="line">status <span class="operator">=</span> <span class="string">&#x27;生效中&#x27;</span>, </span><br><span class="line">gmt_modify <span class="operator">=</span> NOW() </span><br><span class="line"><span class="keyword">WHERE</span> ... </span><br><span class="line"><span class="keyword">AND</span> DATE_ADD(end_time, <span class="type">INTERVAL</span> <span class="number">35</span> <span class="keyword">DAY</span>) <span class="operator">&gt;</span> NOW() ;</span><br></pre></td></tr></table></figure><h2 id="MySQL-官方文档原文"><a href="#MySQL-官方文档原文" class="headerlink" title="MySQL 官方文档原文"></a>MySQL 官方文档原文</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1 <span class="keyword">SET</span> col1 <span class="operator">=</span> col1 <span class="operator">+</span> <span class="number">1</span>, col2 <span class="operator">=</span> col1;</span><br></pre></td></tr></table></figure><p>If you access a column from the table to be updated in an expression, <a href="https://dev.mysql.com/doc/refman/8.0/en/update.html"><code>UPDATE</code></a> uses the current value of the column. For example, the following statement sets <code>col1</code> to one more than its current value:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1 <span class="keyword">SET</span> col1 <span class="operator">=</span> col1 <span class="operator">+</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>The second assignment in the following statement sets <code>col2</code> to the current (updated) <code>col1</code> value, not the original <code>col1</code> value. The result is that <code>col1</code> and <code>col2</code> have the same value. This behavior differs from standard SQL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1 <span class="keyword">SET</span> col1 <span class="operator">=</span> col1 <span class="operator">+</span> <span class="number">1</span>, col2 <span class="operator">=</span> col1;</span><br></pre></td></tr></table></figure><p>Single-table <a href="https://dev.mysql.com/doc/refman/8.0/en/update.html"><code>UPDATE</code></a> assignments are generally evaluated from left to right. For multiple-table updates, there is no guarantee that assignments are carried out in any particular order.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWFuZ3hpbi9hcnRpY2xlL2RldGFpbHMvODQ1NTgwNTA=">谈谈mysql update语句 set顺序问题、列交换sql实现及多表更新注意事项<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3VwZGF0ZS5odG1s">https://dev.mysql.com/doc/refman/5.7/en/update.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3VwZGF0ZS5odG1s">https://dev.mysql.com/doc/refman/8.0/en/update.html<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;绝大多数数据库，在执行 update 语句时，update t set a = b, b = a 便可实现 a、b 列值互换，赋值表达式右侧的值取的都是原始值。MySQL 则是例外，其单表更新是自左到右依次完成，即先完成 a = b，然后在完成 b = a (此时 a = b），所以执行结果变成 a、b 列都是 b，然后多表更新则又不尊从该更新法则。&lt;/p&gt;
&lt;p&gt;这个问题源于业务中一次对券有效期进行延期的操作，需求是对优惠券有效期延期 35 天。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部分券在生效中，直接修改过期时间即可；&lt;/li&gt;
&lt;li&gt;一部分券已经过期，修改过期时间后，需要判断一下是否仍然是过期的还是生效中的，修改券的状态&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="MySQL" scheme="http://yonghong.tech/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://yonghong.tech/tags/MySQL/"/>
    
    <category term="UPDATE" scheme="http://yonghong.tech/tags/UPDATE/"/>
    
    <category term="数据库" scheme="http://yonghong.tech/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>如何在macOS根目录创建文件夹</title>
    <link href="http://yonghong.tech/2021/02/create-folder-in-macos-root/"/>
    <id>http://yonghong.tech/2021/02/create-folder-in-macos-root/</id>
    <published>2021-02-27T02:24:00.000Z</published>
    <updated>2021-02-27T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在短短的两个月里，已经遇到了 2 次这个问题，第 1 次是 macOS@Catalina 版本，第 2 次是升级后的 macOS@Big Sur 版本，在这里记录一下解决办法。</p><h2 id="macOS-Catalina-版本"><a href="#macOS-Catalina-版本" class="headerlink" title="macOS@Catalina 版本"></a>macOS@Catalina 版本</h2><p>重启系统进入恢复模式，关闭 SIP，重启后命令行执行下面这行代码，再创建文件夹就能成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -uw /</span><br></pre></td></tr></table></figure><h2 id="macOS-Big-Sur-版本"><a href="#macOS-Big-Sur-版本" class="headerlink" title="macOS@Big Sur 版本"></a>macOS@Big Sur 版本</h2><p>重启系统进入恢复模式，关闭 SIP（不确定有没有这个步骤，如果有人尝试可以评论一下），接下来稍稍麻烦一点，修改 /etc/synthetic.conf 文件</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/synthetic.conf</span><br></pre></td></tr></table></figure><p>输入如下内容，data 换成你要创建的文件夹，后面是映射目录，注意，中间是 Tab，不是空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data    /private/data</span><br></pre></td></tr></table></figure><p>重启系统后，系统根目录出现了对应的文件夹，这个文件夹是一个软链接，链接到了前面写的映射目录中。</p><p>如图，我在我电脑根目录下创建了一个 home 文件夹的软链接，实际存储在 /private/home 这个文件夹中。</p><p><img src="https://up-img.yonghong.tech/pic/2021/02/27-12-28-%E6%88%AA%E5%B1%8F2021-02-26%20%E4%B8%8B%E5%8D%888.41.34-ovojux.png" alt="根目录下的home文件夹"></p><p>这是我的 /etc/synthetic.conf 文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /etc/synthetic.conf</span><br><span class="line">home/private/home</span><br></pre></td></tr></table></figure><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9uZXdzbi5uZXQvc2F5L21hYy1iaWctc3VyLXJvb3QtcmVhZG9ubHkuaHRtbA==">Mac升级到big sur之后，根目录无法写入文件如何解决？<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC81NTA2Ng==">macOS 开启或关闭 SIP<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9IVDIwMTMxNA==">关于基于 Intel 的 Mac 电脑上的 macOS 恢复功能<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在短短的两个月里，已经遇到了 2 次这个问题，第 1 次是 macOS@Catalina 版本，第 2 次是升级后的 macOS@Big Sur 版本，在这里记录一下解决办法。&lt;/p&gt;
&lt;h2 id=&quot;macOS-Catalina-版本&quot;&gt;&lt;a href=&quot;#macOS-Catalina-版本&quot; class=&quot;headerlink&quot; title=&quot;macOS@Catalina 版本&quot;&gt;&lt;/a&gt;macOS@Catalina 版本&lt;/h2&gt;&lt;p&gt;重启系统进入恢复模式，关闭 SIP，重启后命令行执行下面这行代码，再创建文件夹就能成功了。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mount -uw /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;macOS-Big-Sur-版本&quot;&gt;&lt;a href=&quot;#macOS-Big-Sur-版本&quot; class=&quot;headerlink&quot; title=&quot;macOS@Big Sur 版本&quot;&gt;&lt;/a&gt;macOS@Big Sur 版本&lt;/h2&gt;&lt;p&gt;重启系统进入恢复模式，关闭 SIP（不确定有没有这个步骤，如果有人尝试可以评论一下），接下来稍稍麻烦一点，修改 /etc/synthetic.conf 文件&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="http://yonghong.tech/categories/macOS/"/>
    
    
    <category term="macOS" scheme="http://yonghong.tech/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>JVM 指令集对照表</title>
    <link href="http://yonghong.tech/2021/01/jvm-instruction-set/"/>
    <id>http://yonghong.tech/2021/01/jvm-instruction-set/</id>
    <published>2021-01-07T02:24:00.000Z</published>
    <updated>2021-01-07T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Java Virtual Machine Specification 中，有对 JVM 指令集的详细描述，可以打开链接查看：</p><ul><li>Java 11：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2UxMS9odG1sL2p2bXMtNi5odG1s">https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html<i class="fa fa-external-link-alt"></i></span></li><li>Java 8：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U4L2h0bWwvanZtcy02Lmh0bWw=">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html<i class="fa fa-external-link-alt"></i></span></li></ul><p>也有人整理了一个对照表，记录在下面</p><span id="more"></span><table><thead><tr><th align="center">字节码</th><th align="center">助记符</th><th>指令含义</th></tr></thead><tbody><tr><td align="center">0x00</td><td align="center">nop</td><td>None</td></tr><tr><td align="center">0x01</td><td align="center">aconst_null</td><td>将null推送至栈顶</td></tr><tr><td align="center">0x02</td><td align="center">iconst_m1</td><td>将int型-1推送至栈顶</td></tr><tr><td align="center">0x03</td><td align="center">iconst_0</td><td>将int型0推送至栈顶</td></tr><tr><td align="center">0x04</td><td align="center">iconst_1</td><td>将int型1推送至栈顶</td></tr><tr><td align="center">0x05</td><td align="center">iconst_2</td><td>将int型2推送至栈顶</td></tr><tr><td align="center">0x06</td><td align="center">iconst_3</td><td>将int型3推送至栈顶</td></tr><tr><td align="center">0x07</td><td align="center">iconst_4</td><td>将int型4推送至栈顶</td></tr><tr><td align="center">0x08</td><td align="center">iconst_5</td><td>将int型5推送至栈顶</td></tr><tr><td align="center">0x09</td><td align="center">lconst_0</td><td>将long型0推送至栈顶</td></tr><tr><td align="center">0x0a</td><td align="center">lconst_1</td><td>将long型1推送至栈顶</td></tr><tr><td align="center">0x0b</td><td align="center">fconst_0</td><td>将float型0推送至栈顶</td></tr><tr><td align="center">0x0c</td><td align="center">fconst_1</td><td>将float型1推送至栈顶</td></tr><tr><td align="center">0x0d</td><td align="center">fconst_2</td><td>将float型2推送至栈顶</td></tr><tr><td align="center">0x0e</td><td align="center">dconst_0</td><td>将double型0推送至栈顶</td></tr><tr><td align="center">0x0f</td><td align="center">dconst_1</td><td>将double型1推送至栈顶</td></tr><tr><td align="center">0x10</td><td align="center">bipush</td><td>将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td align="center">0x11</td><td align="center">sipush</td><td>将一个短整型常量(-32768~32767)推送至栈顶</td></tr><tr><td align="center">0x12</td><td align="center">ldc</td><td>将int,float或String型常量值从常量池中推送至栈顶</td></tr><tr><td align="center">0x13</td><td align="center">ldc_w</td><td>将int,float或String型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td align="center">0x14</td><td align="center">ldc2_w</td><td>将long或double型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td align="center">0x15</td><td align="center">iload</td><td>将指定的int型本地变量推送至栈顶</td></tr><tr><td align="center">0x16</td><td align="center">lload</td><td>将指定的long型本地变量推送至栈顶</td></tr><tr><td align="center">0x17</td><td align="center">fload</td><td>将指定的float型本地变量推送至栈顶</td></tr><tr><td align="center">0x18</td><td align="center">dload</td><td>将指定的double型本地变量推送至栈顶</td></tr><tr><td align="center">0x19</td><td align="center">aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x1a</td><td align="center">iload_0</td><td>将第一个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1b</td><td align="center">iload_1</td><td>将第二个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1c</td><td align="center">iload_2</td><td>将第三个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1d</td><td align="center">iload_3</td><td>将第四个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1e</td><td align="center">lload_0</td><td>将第一个long型本地变量推送至栈顶</td></tr><tr><td align="center">0x1f</td><td align="center">lload_1</td><td>将第二个long型本地变量推送至栈顶</td></tr><tr><td align="center">0x20</td><td align="center">lload_2</td><td>将第三个long型本地变量推送至栈顶</td></tr><tr><td align="center">0x21</td><td align="center">lload_3</td><td>将第四个long型本地变量推送至栈顶</td></tr><tr><td align="center">0x22</td><td align="center">fload_0</td><td>将第一个float型本地变量推送至栈顶</td></tr><tr><td align="center">0x23</td><td align="center">fload_1</td><td>将第二个float型本地变量推送至栈顶</td></tr><tr><td align="center">0x24</td><td align="center">fload_2</td><td>将第三个float型本地变量推送至栈顶</td></tr><tr><td align="center">0x25</td><td align="center">fload_3</td><td>将第四个float型本地变量推送至栈顶</td></tr><tr><td align="center">0x26</td><td align="center">dload_0</td><td>将第一个double型本地变量推送至栈顶</td></tr><tr><td align="center">0x27</td><td align="center">dload_1</td><td>将第二个double型本地变量推送至栈顶</td></tr><tr><td align="center">0x28</td><td align="center">dload_2</td><td>将第三个double型本地变量推送至栈顶</td></tr><tr><td align="center">0x29</td><td align="center">dload_3</td><td>将第四个double型本地变量推送至栈顶</td></tr><tr><td align="center">0x2a</td><td align="center">aload_0</td><td>将第一个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2b</td><td align="center">aload_1</td><td>将第二个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2c</td><td align="center">aload_2</td><td>将第三个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2d</td><td align="center">aload_3</td><td>将第四个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2e</td><td align="center">iaload</td><td>将int型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x2f</td><td align="center">laload</td><td>将long型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x30</td><td align="center">faload</td><td>将float型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x31</td><td align="center">daload</td><td>将double型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x32</td><td align="center">aaload</td><td>将引用类型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x33</td><td align="center">baload</td><td>将boolean或byte型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x34</td><td align="center">caload</td><td>将char型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x35</td><td align="center">saload</td><td>将short型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x36</td><td align="center">istore</td><td>将栈顶int型数值存入指定本地变量</td></tr><tr><td align="center">0x37</td><td align="center">lstore</td><td>将栈顶long型数值存入指定本地变量</td></tr><tr><td align="center">0x38</td><td align="center">fstore</td><td>将栈顶float型数值存入指定本地变量</td></tr><tr><td align="center">0x39</td><td align="center">dstore</td><td>将栈顶double型数值存入指定本地变量</td></tr><tr><td align="center">0x3a</td><td align="center">astore</td><td>将栈顶引用类型数值存入指定本地变量</td></tr><tr><td align="center">0x3b</td><td align="center">istore_0</td><td>将栈顶int型数值存入第一个本地变量</td></tr><tr><td align="center">0x3c</td><td align="center">istore_1</td><td>将栈顶int型数值存入第二个本地变量</td></tr><tr><td align="center">0x3d</td><td align="center">istore_2</td><td>将栈顶int型数值存入第三个本地变量</td></tr><tr><td align="center">0x3e</td><td align="center">istore_3</td><td>将栈顶int型数值存入第四个本地变量</td></tr><tr><td align="center">0x3f</td><td align="center">lstore_0</td><td>将栈顶long型数值存入第一个本地变量</td></tr><tr><td align="center">0x40</td><td align="center">lstore_1</td><td>将栈顶long型数值存入第二个本地变量</td></tr><tr><td align="center">0x41</td><td align="center">lstore_2</td><td>将栈顶long型数值存入第三个本地变量</td></tr><tr><td align="center">0x42</td><td align="center">lstore_3</td><td>将栈顶long型数值存入第四个本地变量</td></tr><tr><td align="center">0x43</td><td align="center">fstore_0</td><td>将栈顶float型数值存入第一个本地变量</td></tr><tr><td align="center">0x44</td><td align="center">fstore_1</td><td>将栈顶float型数值存入第二个本地变量</td></tr><tr><td align="center">0x45</td><td align="center">fstore_2</td><td>将栈顶float型数值存入第三个本地变量</td></tr><tr><td align="center">0x46</td><td align="center">fstore_3</td><td>将栈顶float型数值存入第四个本地变量</td></tr><tr><td align="center">0x47</td><td align="center">dstore_0</td><td>将栈顶double型数值存入第一个本地变量</td></tr><tr><td align="center">0x48</td><td align="center">dstore_1</td><td>将栈顶double型数值存入第二个本地变量</td></tr><tr><td align="center">0x49</td><td align="center">dstore_2</td><td>将栈顶double型数值存入第三个本地变量</td></tr><tr><td align="center">0x4a</td><td align="center">dstore_3</td><td>将栈顶double型数值存入第四个本地变量</td></tr><tr><td align="center">0x4b</td><td align="center">astore_0</td><td>将栈顶引用型数值存入第一个本地变量</td></tr><tr><td align="center">0x4c</td><td align="center">astore_1</td><td>将栈顶引用型数值存入第二个本地变量</td></tr><tr><td align="center">0x4d</td><td align="center">astore_2</td><td>将栈顶引用型数值存入第三个本地变量</td></tr><tr><td align="center">0x4e</td><td align="center">astore_3</td><td>将栈顶引用型数值存入第四个本地变量</td></tr><tr><td align="center">0x4f</td><td align="center">iastore</td><td>将栈顶int型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x50</td><td align="center">lastore</td><td>将栈顶long型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x51</td><td align="center">fastore</td><td>将栈顶float型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x52</td><td align="center">dastore</td><td>将栈顶double型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x53</td><td align="center">aastore</td><td>将栈顶引用型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x54</td><td align="center">bastore</td><td>将栈顶boolean或byte型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x55</td><td align="center">castore</td><td>将栈顶char型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x56</td><td align="center">sastore</td><td>将栈顶short型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0x57</td><td align="center">pop</td><td>将栈顶数值弹出(数值不能是long或double类型的)</td></tr><tr><td align="center">0x58</td><td align="center">pop2</td><td>将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出</td></tr><tr><td align="center">0x59</td><td align="center">dup</td><td>复制栈顶数值并将复制值压入栈顶</td></tr><tr><td align="center">0x5a</td><td align="center">dup_x1</td><td>复制栈顶数值并将两个复制值压入栈顶</td></tr><tr><td align="center">0x5b</td><td align="center">dup_x2</td><td>复制栈顶数值并将三个(或两个)复制值压入栈顶</td></tr><tr><td align="center">0x5c</td><td align="center">dup2</td><td>复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶</td></tr><tr><td align="center">0x5d</td><td align="center">dup2_x1</td><td>dup_x1指令的双倍版本</td></tr><tr><td align="center">0x5e</td><td align="center">dup2_x2</td><td>dup_x2指令的双倍版本</td></tr><tr><td align="center">0x5f</td><td align="center">swap</td><td>将栈顶最顶端的两个数值互换(数值不能是long或double类型)</td></tr><tr><td align="center">0x60</td><td align="center">iadd</td><td>将栈顶两int型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0x61</td><td align="center">ladd</td><td>将栈顶两long型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0x62</td><td align="center">fadd</td><td>将栈顶两float型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0x63</td><td align="center">dadd</td><td>将栈顶两double型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0x64</td><td align="center">isub</td><td>将栈顶两int型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0x65</td><td align="center">lsub</td><td>将栈顶两long型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0x66</td><td align="center">fsub</td><td>将栈顶两float型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0x67</td><td align="center">dsub</td><td>将栈顶两double型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0x68</td><td align="center">imul</td><td>将栈顶两int型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x69</td><td align="center">lmul</td><td>将栈顶两long型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6a</td><td align="center">fmul</td><td>将栈顶两float型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6b</td><td align="center">dmul</td><td>将栈顶两double型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6c</td><td align="center">idiv</td><td>将栈顶两int型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6d</td><td align="center">ldiv</td><td>将栈顶两long型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6e</td><td align="center">fdiv</td><td>将栈顶两float型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6f</td><td align="center">ddiv</td><td>将栈顶两double型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x70</td><td align="center">irem</td><td>将栈顶两int型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0x71</td><td align="center">lrem</td><td>将栈顶两long型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0x72</td><td align="center">frem</td><td>将栈顶两float型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0x73</td><td align="center">drem</td><td>将栈顶两double型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0x74</td><td align="center">ineg</td><td>将栈顶int型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0x75</td><td align="center">lneg</td><td>将栈顶long型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0x76</td><td align="center">fneg</td><td>将栈顶float型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0x77</td><td align="center">dneg</td><td>将栈顶double型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0x78</td><td align="center">ishl</td><td>将int型数值左移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x79</td><td align="center">lshl</td><td>将long型数值左移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7a</td><td align="center">ishr</td><td>将int型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7b</td><td align="center">lshr</td><td>将long型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7c</td><td align="center">iushr</td><td>将int型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7d</td><td align="center">lushr</td><td>将long型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7e</td><td align="center">iand</td><td>将栈顶两int型数值”按位与”并将结果压入栈顶</td></tr><tr><td align="center">0x7f</td><td align="center">land</td><td>将栈顶两long型数值”按位与”并将结果压入栈顶</td></tr><tr><td align="center">0x80</td><td align="center">ior</td><td>将栈顶两int型数值”按位或”并将结果压入栈顶</td></tr><tr><td align="center">0x81</td><td align="center">lor</td><td>将栈顶两long型数值”按位或”并将结果压入栈顶</td></tr><tr><td align="center">0x82</td><td align="center">ixor</td><td>将栈顶两int型数值”按位异或”并将结果压入栈顶</td></tr><tr><td align="center">0x83</td><td align="center">lxor</td><td>将栈顶两long型数值”按位异或”并将结果压入栈顶</td></tr><tr><td align="center">0x84</td><td align="center">iinc</td><td>将指定int型变量增加指定值(如i++, i–, i+=2等)</td></tr><tr><td align="center">0x85</td><td align="center">i2l</td><td>将栈顶int型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td align="center">0x86</td><td align="center">i2f</td><td>将栈顶int型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td align="center">0x87</td><td align="center">i2d</td><td>将栈顶int型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td align="center">0x88</td><td align="center">l2i</td><td>将栈顶long型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td align="center">0x89</td><td align="center">l2f</td><td>将栈顶long型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8a</td><td align="center">l2d</td><td>将栈顶long型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8b</td><td align="center">f2i</td><td>将栈顶float型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8c</td><td align="center">f2l</td><td>将栈顶float型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8d</td><td align="center">f2d</td><td>将栈顶float型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8e</td><td align="center">d2i</td><td>将栈顶double型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8f</td><td align="center">d2l</td><td>将栈顶double型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td align="center">0x90</td><td align="center">d2f</td><td>将栈顶double型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td align="center">0x91</td><td align="center">i2b</td><td>将栈顶int型数值强制转换为byte型数值并将结果压入栈顶</td></tr><tr><td align="center">0x92</td><td align="center">i2c</td><td>将栈顶int型数值强制转换为char型数值并将结果压入栈顶</td></tr><tr><td align="center">0x93</td><td align="center">i2s</td><td>将栈顶int型数值强制转换为short型数值并将结果压入栈顶</td></tr><tr><td align="center">0x94</td><td align="center">lcmp</td><td>比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶</td></tr><tr><td align="center">0x95</td><td align="center">fcmpl</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td></tr><tr><td align="center">0x96</td><td align="center">fcmpg</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td></tr><tr><td align="center">0x97</td><td align="center">dcmpl</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将-1压入栈顶</td></tr><tr><td align="center">0x98</td><td align="center">dcmpg</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为NaN时, 将1压入栈顶</td></tr><tr><td align="center">0x99</td><td align="center">ifeq</td><td>当栈顶int型数值等于0时跳转</td></tr><tr><td align="center">0x9a</td><td align="center">ifne</td><td>当栈顶int型数值不等于0时跳转</td></tr><tr><td align="center">0x9b</td><td align="center">iflt</td><td>当栈顶int型数值小于0时跳转</td></tr><tr><td align="center">0x9c</td><td align="center">ifge</td><td>当栈顶int型数值大于等于0时跳转</td></tr><tr><td align="center">0x9d</td><td align="center">ifgt</td><td>当栈顶int型数值大于0时跳转</td></tr><tr><td align="center">0x9e</td><td align="center">ifle</td><td>当栈顶int型数值小于等于0时跳转</td></tr><tr><td align="center">0x9f</td><td align="center">if_icmpeq</td><td>比较栈顶两int型数值大小, 当结果等于0时跳转</td></tr><tr><td align="center">0xa0</td><td align="center">if_icmpne</td><td>比较栈顶两int型数值大小, 当结果不等于0时跳转</td></tr><tr><td align="center">0xa1</td><td align="center">if_icmplt</td><td>比较栈顶两int型数值大小, 当结果小于0时跳转</td></tr><tr><td align="center">0xa2</td><td align="center">if_icmpge</td><td>比较栈顶两int型数值大小, 当结果大于等于0时跳转</td></tr><tr><td align="center">0xa3</td><td align="center">if_icmpgt</td><td>比较栈顶两int型数值大小, 当结果大于0时跳转</td></tr><tr><td align="center">0xa4</td><td align="center">if_icmple</td><td>比较栈顶两int型数值大小, 当结果小于等于0时跳转</td></tr><tr><td align="center">0xa5</td><td align="center">if_acmpeq</td><td>比较栈顶两引用型数值, 当结果相等时跳转</td></tr><tr><td align="center">0xa6</td><td align="center">if_acmpne</td><td>比较栈顶两引用型数值, 当结果不相等时跳转</td></tr><tr><td align="center">0xa7</td><td align="center">goto</td><td>无条件跳转</td></tr><tr><td align="center">0xa8</td><td align="center">jsr</td><td>跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶</td></tr><tr><td align="center">0xa9</td><td align="center">ret</td><td>返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)</td></tr><tr><td align="center">0xaa</td><td align="center">tableswitch</td><td>用于switch条件跳转, case值连续(可变长度指令)</td></tr><tr><td align="center">0xab</td><td align="center">lookupswitch</td><td>用于switch条件跳转, case值不连续(可变长度指令)</td></tr><tr><td align="center">0xac</td><td align="center">ireturn</td><td>从当前方法返回int</td></tr><tr><td align="center">0xad</td><td align="center">lreturn</td><td>从当前方法返回long</td></tr><tr><td align="center">0xae</td><td align="center">freturn</td><td>从当前方法返回float</td></tr><tr><td align="center">0xaf</td><td align="center">dreturn</td><td>从当前方法返回double</td></tr><tr><td align="center">0xb0</td><td align="center">areturn</td><td>从当前方法返回对象引用</td></tr><tr><td align="center">0xb1</td><td align="center">return</td><td>从当前方法返回void</td></tr><tr><td align="center">0xb2</td><td align="center">getstatic</td><td>获取指定类的静态域, 并将其压入栈顶</td></tr><tr><td align="center">0xb3</td><td align="center">putstatic</td><td>为指定类的静态域赋值</td></tr><tr><td align="center">0xb4</td><td align="center">getfield</td><td>获取指定类的实例域, 并将其压入栈顶</td></tr><tr><td align="center">0xb5</td><td align="center">putfield</td><td>为指定类的实例域赋值</td></tr><tr><td align="center">0xb6</td><td align="center">invokevirtual</td><td>调用实例方法</td></tr><tr><td align="center">0xb7</td><td align="center">invokespecial</td><td>调用超类构建方法, 实例初始化方法, 私有方法</td></tr><tr><td align="center">0xb8</td><td align="center">invokestatic</td><td>调用静态方法</td></tr><tr><td align="center">0xb9</td><td align="center">invokeinterface</td><td>调用接口方法</td></tr><tr><td align="center">0xba</td><td align="center">invokedynamic</td><td>调用动态方法</td></tr><tr><td align="center">0xbb</td><td align="center">new</td><td>创建一个对象, 并将其引用引用值压入栈顶</td></tr><tr><td align="center">0xbc</td><td align="center">newarray</td><td>创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶</td></tr><tr><td align="center">0xbd</td><td align="center">anewarray</td><td>创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶</td></tr><tr><td align="center">0xbe</td><td align="center">arraylength</td><td>获取数组的长度值并压入栈顶</td></tr><tr><td align="center">0xbf</td><td align="center">athrow</td><td>将栈顶的异常抛出</td></tr><tr><td align="center">0xc0</td><td align="center">checkcast</td><td>检验类型转换, 检验未通过将抛出 ClassCastException</td></tr><tr><td align="center">0xc1</td><td align="center">instanceof</td><td>检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶</td></tr><tr><td align="center">0xc2</td><td align="center">monitorenter</td><td>获得对象的锁, 用于同步方法或同步块</td></tr><tr><td align="center">0xc3</td><td align="center">monitorexit</td><td>释放对象的锁, 用于同步方法或同步块</td></tr><tr><td align="center">0xc4</td><td align="center">wide</td><td>扩展本地变量的宽度</td></tr><tr><td align="center">0xc5</td><td align="center">multianewarray</td><td>创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶</td></tr><tr><td align="center">0xc6</td><td align="center">ifnull</td><td>为null时跳转</td></tr><tr><td align="center">0xc7</td><td align="center">ifnonnull</td><td>不为null时跳转</td></tr><tr><td align="center">0xc8</td><td align="center">goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td align="center">0xc9</td><td align="center">jsr_w</td><td>跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶</td></tr></tbody></table><p>推荐阅读：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTkvMDkvMDUvamF2YS1ieXRlY29kZS1lbmhhbmNlbWVudC5odG1s">字节码增强技术探索 - 美团技术团队<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Java Virtual Machine Specification 中，有对 JVM 指令集的详细描述，可以打开链接查看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 11：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2UxMS9odG1sL2p2bXMtNi5odG1s&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Java 8：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U4L2h0bWwvanZtcy02Lmh0bWw=&quot;&gt;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也有人整理了一个对照表，记录在下面&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://yonghong.tech/categories/Java/"/>
    
    
    <category term="Java" scheme="http://yonghong.tech/tags/Java/"/>
    
    <category term="JVM" scheme="http://yonghong.tech/tags/JVM/"/>
    
    <category term="指令集" scheme="http://yonghong.tech/tags/%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    
    <category term="Instruction" scheme="http://yonghong.tech/tags/Instruction/"/>
    
  </entry>
  
  <entry>
    <title>hg clone 与 Mercurial</title>
    <link href="http://yonghong.tech/2021/01/mercurial/"/>
    <id>http://yonghong.tech/2021/01/mercurial/</id>
    <published>2021-01-06T14:24:00.000Z</published>
    <updated>2021-01-06T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mercurial是跨平台的分布式版本控制软件，主要由Python语言实现，但也包含用C语言实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux，现在Mercurial已经移植到Windows、Mac OS X和大多数的类Unix系统中。Mercurial主要由命令行程序组成，现在也有了图形用户界面。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考水银的化学符号而取的名字。</p><p>Mercurial的主要设计目标包括高性能、可扩展性、分散性、完全分布式合作开发、能同时高效地处理纯文本和二进制文件，以及分支和合并功能，以此同时保持系统的简洁性[1]。Mercurial也包括一个集成的Web界面。</p><p>Mercurial的创建者和主要开发人员是Matt Mackal。其源代码采用GNU通用公共许可证第二版为授权，确保了Mercurial是一个自由软件。</p><span id="more"></span><h2 id="获取-Mercurial"><a href="#获取-Mercurial" class="headerlink" title="获取 Mercurial"></a>获取 Mercurial</h2><p>Mercurial 官方网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWVyY3VyaWFsLXNjbS5vcmcv">https://www.mercurial-scm.org/<i class="fa fa-external-link-alt"></i></span></p><p>我们可以从官方网站上获取到软件安装包：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWVyY3VyaWFsLXNjbS5vcmcvZG93bmxvYWRz">https://www.mercurial-scm.org/downloads<i class="fa fa-external-link-alt"></i></span></p><p>还可以根据系统选择合适安装方式安装命令行工具：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line"><span class="variable">$</span> apt<span class="literal">-get</span> install mercurial</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fedora</span></span><br><span class="line"><span class="variable">$</span> dnf install mercurial</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gentoo</span></span><br><span class="line"><span class="variable">$</span> emerge mercurial</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac OS (homebrew)</span></span><br><span class="line"><span class="variable">$</span> brew install mercurial</span><br><span class="line"></span><br><span class="line"><span class="comment"># FreeBSD</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /usr/ports/devel/mercurial</span><br><span class="line"><span class="variable">$</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solaris 11 Express</span></span><br><span class="line"><span class="variable">$</span> pkg install SUNWmercurial</span><br></pre></td></tr></table></figure><h2 id="使用-hg-命令行工具-clone-软件仓库"><a href="#使用-hg-命令行工具-clone-软件仓库" class="headerlink" title="使用 hg 命令行工具 clone 软件仓库"></a>使用 hg 命令行工具 clone 软件仓库</h2><p>比如 OpenJDK 的软件仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg clone https:<span class="regexp">//</span>hg.openjdk.java.net<span class="regexp">/jdk/</span>jdk11</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Mercurial是跨平台的分布式版本控制软件，主要由Python语言实现，但也包含用C语言实现的二进制比较工具。Mercurial一开始的主要运行平台是Linux，现在Mercurial已经移植到Windows、Mac OS X和大多数的类Unix系统中。Mercurial主要由命令行程序组成，现在也有了图形用户界面。对Mercurial的所有操作都由用不同的关键字作为参数调用程序“hg”来实现，Hg是参考水银的化学符号而取的名字。&lt;/p&gt;
&lt;p&gt;Mercurial的主要设计目标包括高性能、可扩展性、分散性、完全分布式合作开发、能同时高效地处理纯文本和二进制文件，以及分支和合并功能，以此同时保持系统的简洁性[1]。Mercurial也包括一个集成的Web界面。&lt;/p&gt;
&lt;p&gt;Mercurial的创建者和主要开发人员是Matt Mackal。其源代码采用GNU通用公共许可证第二版为授权，确保了Mercurial是一个自由软件。&lt;/p&gt;</summary>
    
    
    
    <category term="版本控制" scheme="http://yonghong.tech/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="hg" scheme="http://yonghong.tech/tags/hg/"/>
    
    <category term="Mercurial" scheme="http://yonghong.tech/tags/Mercurial/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第11期 | 2020年12月14日</title>
    <link href="http://yonghong.tech/weekly-011/"/>
    <id>http://yonghong.tech/weekly-011/</id>
    <published>2020-12-14T02:24:00.000Z</published>
    <updated>2020-12-14T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMTAvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==">C++服务编译耗时优化原理及实践<i class="fa fa-external-link-alt"></i></span><br>大型C++工程项目，都会面临编译耗时较长的问题。不管是开发调试迭代、准入测试，亦或是持续集成阶段，编译行为无处不在，降低编译时间对提高研发效率来说具有非常重要意义。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMnNvTHIxRjBYN3JjOGZaLTJmVEU2QQ==">爱奇艺微服务标准技术架构实践<i class="fa fa-external-link-alt"></i></span><br>为数以亿计的用户提供优质的视频服务的爱奇艺技术产品团队，为了适应业务的快速迭代和创新，并支撑海量的用户请求，很多团队都对各自的业务系统自发地进行了微服务架构的改造。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbEhHQzlKZUtiM29rVnV1UXkzekNXZw==">步入超高清视频时代视频编码技术的机遇与挑战——AV1时代要来了<i class="fa fa-external-link-alt"></i></span><br>近些年随着视频行业的迅猛发展，尤其像短视频、点播、直播、VR等领域的爆发，人们对于高清、超高清视频体验的追求越来越强烈，流媒体平台如何在提升观众观看体验，同时降低播放成本，利用技术降低带宽消耗的同时又能最大化的还原视频的画质和质量，成为了重要的课题。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTGtDb2FVRTVzbDg4SjkwaVZ3bG45QQ==">一文彻底理解 I/O 多路复用<i class="fa fa-external-link-alt"></i></span><br>这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVmlIS2Y5Y0Izbl9JalM0TFVIeXpLUQ==">10 张图告诉你，Kafka 是怎么做到支持百万级 TPS 的？<i class="fa fa-external-link-alt"></i></span><br>谈到大数据传输都会想到 Kafka，Kafka 号称大数据的杀手锏，在业界有很多成熟的应用场景并且被主流公司认可。这款为大数据而生的消息中间件，以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。在业界已经有很多成熟的消息中间件如：RabbitMQ, RocketMQ, ActiveMQ, ZeroMQ，为什么 Kafka 在众多的敌手中依然能有一席之地，当然靠的是其强悍的吞吐量。下面带领大家来揭秘。</li></ul><span id="more"></span><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTIvMDgvYXBhY2hlX2Fycm93X3N1bW1hcnkv">Apache Arrow：一种适合异构大数据系统的内存列存数据格式标准<i class="fa fa-external-link-alt"></i></span><br>本文介绍一种内存列存数据格式：Apache Arrow，它有一个非常大的愿景：提供内存数据分析 (in-memory analytics) 的开发平台，让数据在异构大数据系统间移动、处理地更快。同时，比较特别的是这个项目的启动形式与其他项目也不相同，Arrow 项目的草台班子由 5 个 Apache Members、6 个 PMC Chairs 和一些其它项目的 PMC 及 committer 构成，他们直接找到 ASF 董事会，征得同意后直接以顶级 Apache 项目身份启动。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="第十一届中国数据库技术大会（DTCC2020）"><a href="#第十一届中国数据库技术大会（DTCC2020）" class="headerlink" title="第十一届中国数据库技术大会（DTCC2020）"></a>第十一届中国数据库技术大会（DTCC2020）</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL2R0Y2MuaXQxNjguY29tLw==">http://dtcc.it168.com/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2020年12月21日 ~ 1010年12月23日</p><p>2020年12月21日~12月23日，由 IT168 旗下 ITPUB 企业社区平台主办的第十一届中国数据库技术大会（DTCC2020），将在北京隆重召开。大会以“架构革新 高效可控”为主题，设置2大主会场，20+技术专场，将邀请超百位行业专家，重点围绕数据架构、AI与大数据、传统企业数据库实践和国产开源数据库等内容展开分享和探讨，为广大数据领域从业人士提供一场年度盛会和交流平台。</p><p>为了帮助更多企业落地数据项目实施方案，今年将继续开设多门深度培训课程，内容涵盖数据中台、去IOE实践、区块链技术、内核开发实践等。3天传统技术演讲+1天深度主题，将汇聚各行业精英、技术领袖、行业专家和数据英雄，带来超过100场主题演讲和超5场培训课程的头脑风暴，诚邀您的加入。</p><p>历经十年的积累与沉淀，如今的DTCC已然成为国内数据库领域的技术风向标，见证了整个行业的发展与演变。作为顶级的数据领域技术盛会，DTCC2020将继续秉承一贯的干货分享和实践指导原则，期待大家的热情参与！</p><h3 id="第十届PostgreSQL中国技术大会"><a href="#第十届PostgreSQL中国技术大会" class="headerlink" title="第十届PostgreSQL中国技术大会"></a>第十届PostgreSQL中国技术大会</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3BnY29uZjIwMjAucG9zdGdyZXMuY24v">http://pgconf2020.postgres.cn/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2021年1月15日 ~ 2021年1月16日</p><p>2021年1月15～1月16日，由 PostgreSQL 中文社区主办的第十届《PostgreSQL 中国技术大会》将在南京索菲特银河大酒店现场隆重举办。</p><p>PostgreSQL 作为功能最强的的开源关系型数据库之一，得到了越来越多企业的推广和运用，也越来越受到广大技术爱好者的欢迎和重视。</p><p>本次大会以“开源，自研，新机遇”为主题。除了设立一个主会场外，还设立了多个分会场。大会汇聚了来自互联网、电商、教育，金融等各行业领域的专家，这将是 PostgreSQL 发展史上的又一次交流盛会。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzcubWQ=">科技爱好者周刊（第 137 期）：Slack 被收购，以及企业的技术选型<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3My5tZA==">Go语言爱好者周刊：第 73 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMjA3Lm1k">2020.12.07 - Flying the Nest: WebThings Gateway 1.0<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjEyLjE0Lm1k">老司机 iOS 周报 #139 | 2020-12-14<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ5Lmh0bWw=">R Weekly 2020-49 ggplot2, static code analysis, visual CV<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMTAvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==&quot;&gt;C++服务编译耗时优化原理及实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;大型C++工程项目，都会面临编译耗时较长的问题。不管是开发调试迭代、准入测试，亦或是持续集成阶段，编译行为无处不在，降低编译时间对提高研发效率来说具有非常重要意义。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMnNvTHIxRjBYN3JjOGZaLTJmVEU2QQ==&quot;&gt;爱奇艺微服务标准技术架构实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;为数以亿计的用户提供优质的视频服务的爱奇艺技术产品团队，为了适应业务的快速迭代和创新，并支撑海量的用户请求，很多团队都对各自的业务系统自发地进行了微服务架构的改造。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbEhHQzlKZUtiM29rVnV1UXkzekNXZw==&quot;&gt;步入超高清视频时代视频编码技术的机遇与挑战——AV1时代要来了&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;近些年随着视频行业的迅猛发展，尤其像短视频、点播、直播、VR等领域的爆发，人们对于高清、超高清视频体验的追求越来越强烈，流媒体平台如何在提升观众观看体验，同时降低播放成本，利用技术降低带宽消耗的同时又能最大化的还原视频的画质和质量，成为了重要的课题。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTGtDb2FVRTVzbDg4SjkwaVZ3bG45QQ==&quot;&gt;一文彻底理解 I/O 多路复用&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVmlIS2Y5Y0Izbl9JalM0TFVIeXpLUQ==&quot;&gt;10 张图告诉你，Kafka 是怎么做到支持百万级 TPS 的？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;谈到大数据传输都会想到 Kafka，Kafka 号称大数据的杀手锏，在业界有很多成熟的应用场景并且被主流公司认可。这款为大数据而生的消息中间件，以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。在业界已经有很多成熟的消息中间件如：RabbitMQ, RocketMQ, ActiveMQ, ZeroMQ，为什么 Kafka 在众多的敌手中依然能有一席之地，当然靠的是其强悍的吞吐量。下面带领大家来揭秘。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>JDK 15来袭，带你深入掌握 Java 15 新特性</title>
    <link href="http://yonghong.tech/2020/12/jdk-15-new-feature/"/>
    <id>http://yonghong.tech/2020/12/jdk-15-new-feature/</id>
    <published>2020-12-10T02:24:00.000Z</published>
    <updated>2020-12-10T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频来源：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZmNHkxQjd0dA==">https://www.bilibili.com/video/BV1vf4y1B7tt<i class="fa fa-external-link-alt"></i></span></p><h2 id="大背景"><a href="#大背景" class="headerlink" title="大背景"></a>大背景</h2><h3 id="25-岁的-Java"><a href="#25-岁的-Java" class="headerlink" title="25 岁的 Java"></a>25 岁的 Java</h3><h4 id="Java-的现状"><a href="#Java-的现状" class="headerlink" title="Java 的现状"></a>Java 的现状</h4><p>2020 年是 Java 诞生的第 25 个年头，Oracle 表示，目前 Java 仍然流行是流行的编程语言，广泛使用在企业中。目前全世界有超过 69% 的专职开发人员使用 Java，全世界有 510 亿台活动 Java 虚拟机（JVM）在部署中，目前 Java 主要被用于分析、数据管理、大数据、DevOps、移动、持续开发工具和聊天机器人等服务。</p><h4 id="历史版本的主要新特性"><a href="#历史版本的主要新特性" class="headerlink" title="历史版本的主要新特性"></a>历史版本的主要新特性</h4><p>在过去的这些年中，Java 在过去增强功能的推动下为用户提供了超过二十年的创新。例如：</p><ul><li>JDK 5：enum、泛型、自动装箱与拆箱、可变参数、增强循环等</li><li>JDK 6：支持脚本语言、JDBC 4.0 API</li><li>JDK 7：支持 try-with-resources、switch 语句块增加 String 支持、NIO 2.0 包</li><li>JDK 8：lambda 表达式、Stream API、新的日期时间的 API、方法引用、构造器引用</li><li>JDK 9：模块化系统、jshell</li><li>JDK 10：局部变量的类型推断</li><li>JDK 11：ZGC 的引入、Epsilon GC</li><li>JDK 12：switch 表达式、Shenandoah GC、增强 G1</li><li>JDK 13：switch 表达式引入 yield、文本块</li><li>JDK 14：instanceof 模式识别、Records、弃用 Parallel Scavenge + Serial GC 组合、删除 CMS GC</li></ul><span id="more"></span><h4 id="近期版本发布及维护时间"><a href="#近期版本发布及维护时间" class="headerlink" title="近期版本发布及维护时间"></a>近期版本发布及维护时间</h4><p>OpenJDK 发版本路线图：</p><p><img src="https://up-img.yonghong.tech/pic/2020/12/10-09-20-lKGMjQBUu1XzDeP-96MbI6.jpg" alt="OpenJDK 发版本路线图"></p><p>Oracle Java SE 支持路线图：<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhLXNlLXN1cHBvcnQtcm9hZG1hcC5odG1s">https://www.oracle.com/java/technologies/java-se-support-roadmap.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="https://up-img.yonghong.tech/pic/2020/12/10-09-20-Oracle-Java-SE-%E6%94%AF%E6%8C%81%E8%B7%AF%E7%BA%BF%E5%9B%BE-Bwu1zb.png" alt="Oracle Java SE 支持路线图"></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>因为是小步快跑、快速迭代，因此此处解释下这两个词：孵化器模块（Incubator）和预览特性（Preview）。</p><h4 id="孵化器模块（Incubator-孵化版-实验版）"><a href="#孵化器模块（Incubator-孵化版-实验版）" class="headerlink" title="孵化器模块（Incubator/孵化版/实验版）"></a>孵化器模块（Incubator/孵化版/实验版）</h4><p>尚未确定的 API/工具，主要用于从 Java 社区收集使用反馈，稳定性无保障，后期有较大可能性移除。</p><h4 id="预览特性（Preview-预览版）"><a href="#预览特性（Preview-预览版）" class="headerlink" title="预览特性（Preview/预览版）"></a>预览特性（Preview/预览版）</h4><p>规格已成型，实现已确定，但还未最终定稿。这些特性还是存在被移除的可能性，但一般来说最后都会被固定下来。</p><h3 id="新特性关注点"><a href="#新特性关注点" class="headerlink" title="新特性关注点"></a>新特性关注点</h3><p>角度一：语法层面</p><p>lambda 表达式、switch、自动装箱和拆箱、enum、接口中的静态方法、默认方法、私有方法</p><p>角度二：API 层面</p><p>Stream API、新的日期时间的 API、Optional、String、集合框架</p><p>角度三：底层优化</p><p>JVM 优化、元空间、GC、GC 的组合、GC 的参数、js 的执行引擎、集合底层实现等</p><h2 id="新特性概述"><a href="#新特性概述" class="headerlink" title="新特性概述"></a>新特性概述</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>这次发布的主要功能有：</p><p>Java 15 为用户提供了 14 项主要的增强/更改,包括一个孵化器模块、三个预览功能、两个不推荐使用的功能以及两个删除功能。</p><p><span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L3Byb2plY3RzL2pkay8xNS8=">https://openjdk.java.net/projects/jdk/15/<i class="fa fa-external-link-alt"></i></span></p><p><strong>Features</strong></p><ul><li>339:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzM5">Edwards-Curve Digital Signature Algorithm (EdDSA)<i class="fa fa-external-link-alt"></i></span> </li><li>360:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzYw">Sealed Classes (Preview)<i class="fa fa-external-link-alt"></i></span> </li><li>371:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzcx">Hidden Classes<i class="fa fa-external-link-alt"></i></span>          </li><li>372:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzcy">Remove the Nashorn JavaScript Engine<i class="fa fa-external-link-alt"></i></span> </li><li>373:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzcz">Reimplement the Legacy DatagramSocket API<i class="fa fa-external-link-alt"></i></span> </li><li>374:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzc0">Disable and Deprecate Biased Locking<i class="fa fa-external-link-alt"></i></span> </li><li>375:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzc1">Pattern Matching for instanceof (Second Preview)<i class="fa fa-external-link-alt"></i></span> </li><li>377:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzc3">ZGC: A Scalable Low-Latency Garbage Collector<i class="fa fa-external-link-alt"></i></span> </li><li>378:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzc4">Text Blocks<i class="fa fa-external-link-alt"></i></span>             </li><li>379:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzc5">Shenandoah: A Low-Pause-Time Garbage Collector<i class="fa fa-external-link-alt"></i></span> </li><li>381:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzgx">Remove the Solaris and SPARC Ports<i class="fa fa-external-link-alt"></i></span> </li><li>383:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzgz">Foreign-Memory Access API (Second Incubator)<i class="fa fa-external-link-alt"></i></span> </li><li>384:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzg0">Records (Second Preview)<i class="fa fa-external-link-alt"></i></span> </li><li>385:  <span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0L2plcHMvMzg1">Deprecate RMI Activation for Removal<i class="fa fa-external-link-alt"></i></span> </li></ul><p>对应中文特性：（JEP：JDK Enhancement Proposals，JDK 增强建议，也就是 JDK 的特性新增和改进提案。）</p><ul><li>JEP 339：EdDSA 数字签名算法</li><li>JEP 360：密封类（预览）</li><li>JEP 371：隐藏类</li><li>JEP 372：删除 Nashorn JavaScript 引擎</li><li>JEP 373：重新实现 Legacy DatagramSocket API</li><li>JEP 374：禁用偏向锁</li><li>JEP 375：instanceof 模式匹配（第二次预览）</li><li>JEP 377：ZGC：一个可扩展的低延迟垃圾收集器</li><li>JEP 378：文本块</li><li>JEP 379：Shenandoah：低暂停时间垃圾收集器</li><li>JEP 381：移除 Solaris 和 SPARC 端口</li><li>JEP 383：外部存储器访问 API（第二个孵化版）</li><li>JEP 384：Records（第二次预览）</li><li>JEP 385：废弃 RMI 激活机制</li></ul><p>总结：</p><ul><li>JDK 15 整体来看新特性方面并不算很亮眼，它主要是对之前版本预览特性的功能做了确定，如文本块、ZGC 等，这么一来我们就可以放心大胆的使用了。</li><li>你发任你发，我用 Java 8。</li></ul><h3 id="做出贡献的企业"><a href="#做出贡献的企业" class="headerlink" title="做出贡献的企业"></a>做出贡献的企业</h3><p>通过 Oracle 的官方博文中看到，虽然主力军 Oracle 干了 79.68% 的工作量，其次是开源巨头红帽。但还是有不少企业参与其中。国内企业贡献最多的居然是腾讯公司，被 Oracle 点名感谢。阿里巴巴和华为也做出了不可磨灭的贡献。Java 有中国科技力量的贡献能大大提升中国 IT 的硬实力。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>支持 Java 15 的开发工具</p><p>目前，官方博文说支持 Java 15 的工具，就下面这三款：</p><ul><li>JetBrains IDEA</li><li>Apache NetBeans</li><li>Eclipse Marketplace</li></ul><p>运行 JDK 15 需要 IDEA 2020.2 才能支持。（JDK 14 要求 2020.1）</p><p>JDK 15 下载路径：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamRrMTUtYXJjaGl2ZS1kb3dubG9hZHMuaHRtbA==">https://www.oracle.com/java/technologies/javase/jdk15-archive-downloads.html<i class="fa fa-external-link-alt"></i></span></p><p>如果使用 IDEA 需要设置 Project Structure -&gt; Project -&gt; Project language level 为 15 （Preview …）</p><p>如果使用 Gradle，还需配置 build.gradle</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启预览特性</span></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="keyword">options</span>.compilerArgs += <span class="string">&quot;--enable-preview&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新特性（主菜）"><a href="#新特性（主菜）" class="headerlink" title="新特性（主菜）"></a>新特性（主菜）</h2><h3 id="01-密封类"><a href="#01-密封类" class="headerlink" title="01-密封类"></a>01-密封类</h3><p><strong>JEP 360: Sealed Classes(Preview) 密封的类和接口（预览）</strong></p><p>通过密封的类和接口来增强 Java 编程语言，这是新的预览特性。</p><p>用于限制超类的使用，密封的类和接口限制其它可能继承或实现它们的其他类或接口。</p><p>这个特性的目标包括——允许类或接口的开发者来控制哪些代码负责实现，提供了比限制使用超类的访问修饰符声明方式更多的选择，并通过支持对模式的详尽分析而支持模式匹配的未来发展。</p><p>在 Java 中，类层次结构通过继承实现代码的重用，父类的方法可以被许多子类继承。</p><p>但是，类层次结构的目的并不总是重用代码。有时，其目的是对域中存在的各种可能性进行建模，例如图形库支持的形状类型或金融应用程序支持的贷款类型。当以这种方式使用类层次结构时，我们可能需要限制子类集从而来简化建模。</p><p>具体使用：</p><p>因为我们引入了 sealed class 或 interface。这些 class 或者 interface 只允许被指定的类或者 interface 进行拓展和实现。</p><p>使用修饰符 sealed class 或 interface，这些 class 或者 interface 只允许被指定的类或者 interface 进行拓展和实现。</p><p>使用修饰符 sealed，您可以将一个类声明为密封类。密封类使用 reserved 关键字 permits 列出可以直接拓展它的类。子类可以是最终的，非密封的或密封的。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> sealed <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">permits</span> <span class="title">Teacher</span>, <span class="title">Student</span>, <span class="title">Worker</span> </span>&#123; <span class="comment">// 人</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123; <span class="comment">// 教师</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sealed <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">permits</span> <span class="title">MiddleSchoolStudent</span>, <span class="title">GraduateStudent</span> </span>&#123; <span class="comment">// 学生</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MiddleSchoolStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123; <span class="comment">// 中学生</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123; <span class="comment">// 研究生</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">non-sealed <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123; <span class="comment">// 工人</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RailWayWorker</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123; <span class="comment">// 铁路工人</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="02-隐藏类"><a href="#02-隐藏类" class="headerlink" title="02-隐藏类"></a>02-隐藏类</h3><p><strong>JEP 371: Hidden Classes（隐藏类）</strong></p><p>该提案通过启用标准 API 来定义<strong>无法发现</strong>且<strong>具有有限生命周期</strong>的隐藏类，从而提高 JVM 上所有语言的效率。JDK 内部和外部的框架将能够动态生成类，而这些类可以定义隐藏类。通常来说基于 JVM 的很多语言都有动态生成类的机制，这样可以提高语言的灵活性和效率。</p><ul><li>隐藏类天生为框架设计的，在运行时生成内部的 class。</li><li>隐藏类只能通过反射访问，不能直接被其他类的字节码访问。</li><li>隐藏类可以独立于其他类加载、卸载，这可以减少框架的内存占用。</li></ul><p><strong>Hidden Classes 是什么呢？</strong><br>Hidden Classes 就是不能直接被其他 class 的二进制代码使用的 class。Hidden Classes 主要被一些框架用来生成运行时类，但是这些类不是用来直接使用的，而是通过反射机制来调用。</p><p>比如在 JDK 8 中引入的 lambda 表达式，JVM 并不会在编译的时候将 lambda 表达式转换成为专门的类，而是在运行时将相应的字节码动态生成相应的类对象。</p><p>另外使用动态代理也可以为某些类生成新的动态类。</p><p><strong>那么我们希望这些动态生成的类需要具有什么特性呢？</strong></p><ul><li><strong>不可发现性。</strong>因为我们是为某些静态的类动态生成的动态类，所以我们希望把这个动态生成的类看做是静态类的一部分。所以我们不希望除了该静态类之外的其他机制发现。</li><li><strong>访问控制。</strong>我们希望在访问控制静态类的同时，也能控制到动态生成的类。</li><li><strong>生命周期。</strong>动态生成类的生命周期一般都比较短，我们并不需要将其保存和静态类的生命周期一致。</li></ul><p><strong>API 的支持</strong><br>所以我们需要一些 API 来定义无法发现的且具有有限生命周期的隐藏类。这将提高所有基于 JVM 的语言实现的效率。比如：</p><ul><li>java.lang.reflect.Proxy 可以定义隐藏类作为实现代理接口的代理类。</li><li>java.lang.invoke.StringConcatFactory 可以生成隐藏类来保存常量连接的方法。</li><li>java.lang.invoke.LambdaMetaFactory 可以生成隐藏的 nestmate 类，以容纳访问封闭变量的 lambda 主体。</li></ul><p>普通类是通过调用 ClassLoader::defineClass 创建的，而隐藏来是通过调用 Lookup::defineHiddenClass 创建的。这使 JVM 从提供的字节中派生一个隐藏类，链接该隐藏类，并返回提供对隐藏类的反射访问的查找对象。调用程序可以通过返回的查找对象来获取隐藏类的 Class 对象。</p><h3 id="03-instanceof-模式匹配"><a href="#03-instanceof-模式匹配" class="headerlink" title="03-instanceof 模式匹配"></a>03-instanceof 模式匹配</h3><p><strong>JEP 375: Pattern Matching for instanceof(Second Preview) instanceof 自动匹配模式</strong></p><p>在 Java 14 中作为预览语言功能引入的 instanceof 模式匹配，在 Java 15 中处于第二次预览，而没有任何更改。</p><p>模式匹配允许程序中的通用逻辑（主要是从对象中的条件提取组件）可以更简洁地表达，Haskell 和 C# 等语言已采用模式匹配来实现简洁和安全性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceofTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String str = (String) obj;</span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Not String Type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) &#123;</span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Not String Type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1(<span class="string">&quot;Hello, Java&quot;</span>);</span><br><span class="line">        test2(<span class="string">&quot;Hello, Java&quot;</span>);</span><br><span class="line">        test1(<span class="keyword">null</span>);</span><br><span class="line">        test2(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04-ZGC-功能转正"><a href="#04-ZGC-功能转正" class="headerlink" title="04-ZGC 功能转正"></a>04-ZGC 功能转正</h3><p><strong>JEP 377: ZGC: A Scalable Low-Latency Garbage Collector(Production) ZGC 功能转正</strong></p><p>ZGC 是 Java 11 引入的新的垃圾收集器（JDK 9 以后默认的垃圾收集器是 G1），经过了多个实验阶段，自此终于成为正式特性。</p><p>自 2018 年以来，ZGC 已增加了许多改进，从并发类卸载、取消使用未使用的内存、对类数据共享的支持到改进的 NUMA 感知。此外，最大堆大小从 4 TB 增加到 16 TB。支持的平台包括 Linux、Windows 和 macOS。</p><p>ZGC 是一个重新设计的并发的垃圾回收器，通过减少 GC 停顿时间来提高性能。</p><p>但这并不是替换默认的 GC，默认的 GC 仍然还是 G1；之前需要通过 <code>-XX:+UnlockExperimentalVMOptions</code>, <code>-XX:+UseZGC</code> 来启用 ZGC，现在只需要 <code>-XX:+UseZGC</code> 就可以。相信不久的将来它必将成为默认的垃圾回收器。</p><p>相关的参数有 ZAllocationSpikeTolerance、ZCollectionInterval、ZFragmentationLimit、ZMarkStackSpaceLimit、ZProactive、ZUncommit、ZUncommitDelay、ZAllocationStall、ZPageAllocation、ZPageCacheFlush、ZRelocationSet、ZRelocationSetGroup、ZUncommit。</p><h3 id="05-文本块功能转正"><a href="#05-文本块功能转正" class="headerlink" title="05-文本块功能转正"></a>05-文本块功能转正</h3><p><strong>JEP 378: 文本块功能转正</strong></p><p>Text Blocks 首次是在 JDK 13 中以预览功能出现的，然后在 JDK 14 中又预览了一次，终于在 JDK 15 中被确定下来，可以放心使用了。</p><p>文本块是一种多行字符串文字，它避免了大多数转义序列的需要，以一种可预测的方式自动设置字符串的格式，并在需要时使开发人员可以控制格式，简化编写 Java 程序的任务。</p><p>文本块建议的目标是提高 Java 程序中的字符串的可读性，这些字符串便是以非 Java 语言编写的代码。另一个目标是支持从字符串文本迁移，规定任何新构造都可以表达与字符串文本相同的字符串集，解释相同的转义序列，并且以与字符串文本相同的方式进行操作。OpenJDK 开发人员希望添加转义序列来管理显式空白和换行控件。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBlockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String text = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                The Sound of Silence</span></span><br><span class="line"><span class="string">                寂静之声</span></span><br><span class="line"><span class="string">                Hello darkness, my old friend</span></span><br><span class="line"><span class="string">                你好 黑暗 我的老朋友</span></span><br><span class="line"><span class="string">                I&#x27;ve come to talk with you again</span></span><br><span class="line"><span class="string">                我又来和你交谈</span></span><br><span class="line"><span class="string">                Because a vision softly creeping</span></span><br><span class="line"><span class="string">                因为有一种幻觉正向悄悄地向我袭来</span></span><br><span class="line"><span class="string">                Left its seeds while I was sleeping</span></span><br><span class="line"><span class="string">                在我熟睡的时候留下了它的种子</span></span><br><span class="line"><span class="string">                And the vision that was planted in my brain</span></span><br><span class="line"><span class="string">                这种幻觉在我的脑海里生根发芽</span></span><br><span class="line"><span class="string">                Still remains</span></span><br><span class="line"><span class="string">                缠绕着我</span></span><br><span class="line"><span class="string">                Within the sound of silence 取消换行 \</span></span><br><span class="line"><span class="string">                伴随着寂静的声音\s空格</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06-Records"><a href="#06-Records" class="headerlink" title="06-Records"></a>06-Records</h3><p><strong>JEP 384: Records Class（预览）</strong></p><p>Records Class 也是第二次出现的预览功能，它在 JDK 14 中也出现过一次了，使用 Record 可以更方便的创建一个常量类，使用的前后代码对比如下。</p><ul><li>当你用 Record 声明一个类时，该类将自动拥有以下功能：<ul><li>获取成员变量的简单方法，以上面的代码为例 name() 和 partner()。注意区分于我们平常 getter 的写法。</li><li>一个 equals 方法的实现，执行比较时会比较该类的所有成员属性。</li><li>重写 equals 当然要重写 hashCode。</li><li>一个可以打印该类所有成员属性的 toString 方法。</li><li>请注意只会有一个构造方法。</li></ul></li></ul><h2 id="新特性（配菜）"><a href="#新特性（配菜）" class="headerlink" title="新特性（配菜）"></a>新特性（配菜）</h2><h3 id="01-EdDSA-数字签名算法"><a href="#01-EdDSA-数字签名算法" class="headerlink" title="01-EdDSA 数字签名算法"></a>01-EdDSA 数字签名算法</h3><p><strong>JEP 339: Edwards-Curve Digital Signature Algorithm（EdDSA 数字签名算法）</strong></p><p>这是一个新的功能。新加入基于 Edwards-Curve 数字签名算法（Edwards-Curve Digital Signature Algorithm）的加密签名，即爱德华兹曲线数字签名算法。</p><p>与 JDK 中的现有签名方案相比，EdDSA 具有更高的安全性和性能，因此备受关注。它已经在 OpenSSL 和 BoringSSL 等加密库中得到支持，在区块链领域用的比较多。</p><p>EdDSA 是一种现代的椭圆曲线方案，具有 JDK 中现有签名方案的优点。</p><h3 id="02-重新实现-DatagramSocket-API"><a href="#02-重新实现-DatagramSocket-API" class="headerlink" title="02-重新实现 DatagramSocket API"></a>02-重新实现 DatagramSocket API</h3><p><strong>JEP 373: Reimplement the Legacy DatagramSocket API（重新实现 DatagramSocket API）</strong></p><p>新的计划是 JEP 353 的后续，该方案重新实现了遗留的套接字 API。</p><p>java.net.datagram.Socket 和 java.net.MulticastSocket 的当前实现可以追溯到 JDK 1.0，那时 IPv6 还在开发中。因此，当前的多播套接字实现尝试调和 IPv4 和 IPv6 难以维护的方式。</p><ul><li>通过替换 java.net.datagram 的基础实现，重新实现旧版 DatagramSocket API。</li><li>更改 java.net.DatagramSocket 和 java.net.MulticastSocket 为更加简单、现代化的底层实现。提高了 JDK 的可维护性和稳定性。</li></ul><p>新的实现：</p><ul><li>易于调试和维护</li><li>与 Project Loom 中正在探索的虚拟线程协同</li></ul><h3 id="03-禁用偏向锁"><a href="#03-禁用偏向锁" class="headerlink" title="03-禁用偏向锁"></a>03-禁用偏向锁</h3><p><strong>JEP 374: Disable and Deprecate Biased Locking 禁用偏向锁定</strong></p><p>在默认情况下禁用偏向锁定，并弃用所有相关命令行选项。目标是确定是否需要继续支持偏置锁定的高维护成本的遗留同步优化，<strong>HotSpot 虚拟机使用该优化来减少非竞争锁定的开销</strong>。尽管某些 Java 应用程序在禁用偏向锁后可能会出现性能下降，但偏向锁的性能提高通常不像以前那么明显。</p><h3 id="04-Shenandoah-GC-转正"><a href="#04-Shenandoah-GC-转正" class="headerlink" title="04-Shenandoah GC 转正"></a>04-Shenandoah GC 转正</h3><p>Shenandoah 垃圾回收算法终于从实验特性转变为产品特性，这是一个从 JDK 12 引入的回收算法，该算法通过与正在运行的 Java 线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah 的暂停时间与堆大小无关，无论堆大小是 200 MB 还是 200 GB，都具有相同的一致暂停时间。</p><p>怎么形容 Shenandoah GC 和 ZGC 的关系呢？异同点大概如下：</p><ul><li>相同点：性能几乎可以认为是相同的。</li><li>不同的：ZGC 是 Oracle JDK 的，根正苗红。而 Shenandoah 只存在于 OpenJDK 中，因此使用时需要注意你的 JDK 版本。</li></ul><p>打开方式：使用 <code>-XX:+UseShenandoahGC</code> 命令行参数打开。</p><h3 id="05-外部存储器访问-API"><a href="#05-外部存储器访问-API" class="headerlink" title="05-外部存储器访问 API"></a>05-外部存储器访问 API</h3><p><strong>JEP 383: Foreign-Memory Access API(Second Incubator) 外部存储器访问 API（孵化器版）</strong></p><p>目的是引入一个 API，以允许 Java 程序安全、有效地访问 Java 堆之外的外部存储器。如本机、持久和托管堆。</p><p>有许多 Java 程序是访问外部内存的，比如 Ignite 和 MapDB。该 API 将有助于避免与垃圾收集相关的成本以及与跨进程共享内存以及通过将文件映射到内存来序列化和反序列化内存内容相关的不可预测性。该 Java API 目前没有为访问外部存储内存提供令人满意的解决方案。但是在新的提议中，API 不应该破化 JVM 的安全性。</p><p>Foreign-Memory Access API 在 JDK 14 被作为 Incubator API 引入，在 JDK 15 处于 Second Incubator，提供了改进。</p><h3 id="06-移除-Solaris-和-SPARC-端口"><a href="#06-移除-Solaris-和-SPARC-端口" class="headerlink" title="06-移除 Solaris 和 SPARC 端口"></a>06-移除 Solaris 和 SPARC 端口</h3><p><strong>JEP 381: Remove the Solaris and SPARC Ports（移除 Solaris 和 SPARC 端口）</strong></p><p>删除对 Solaris/SPARC、Solaris/x64 和 Linux/SPARC 端口的源代码和构建支持，在 JDK 14 中被标记为废弃，在 JDK 15 版本正式移除。</p><p>许多正在开发的项目和功能（如 Valhalla、Loom 和 Panama）需要进行重大更改以适应 CPU 架构和操作系统特定代码。</p><p>近年来，Solaris 和 SPARC 都已被 Linux 操作系统和英特尔处理器取代。放弃对 Solaris 和 SPARC 端口的支持将使 OpenJDK 社区的贡献者能够加速开发新功能，从而推动平台向前发展。</p><h3 id="07-移除-the-Nashorn-JS-引擎"><a href="#07-移除-the-Nashorn-JS-引擎" class="headerlink" title="07-移除 the Nashorn JS 引擎"></a>07-移除 the Nashorn JS 引擎</h3><p><strong>JEP 372: Remove the Nashorn JavaScript Engine</strong></p><p>Nashorn 是在 JDK 提出的脚本执行引擎，该功能是 2014 年 3 月发布的 JDK 8 的新特性。在 JDK 11 就已经把它标记为废弃了，JDK 15 完全移除。</p><p>在 JDK 11 中取以代之的是 GraalVM。GraalVM 是一个运行时平台，它支持 Java 和其他基于 Java 字节码的语言，但也支持其他语言，如 JavaScript，Ruby，Python 或 LLVM。性能是 Nashorn 的 2 倍以上。</p><p>JDK 15 移除了 Nashorn JavaScript Engine 及 jjs 命令行工具。具体就是 jdk.scripting.nashorn 及 jdk.scripting.nashorn.shell 这两个模块被移除了。</p><p>补充：</p><p><img src="https://up-img.yonghong.tech/pic/2020/12/10-09-20-graalvm-e6kACA.png" alt="Graal VM"></p><p>Graal VM 在 HotSpot VM 基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用。语言包括：Java、Scala、Groovy、Kotlin、C、C++、JavaScript、Ruby、Python、R等</p><h3 id="08-废弃-RMI-激活机制"><a href="#08-废弃-RMI-激活机制" class="headerlink" title="08-废弃 RMI 激活机制"></a>08-废弃 RMI 激活机制</h3><p><strong>JEP: Deprecate RMI Activation for Removal</strong></p><p>RMI Activation 被标记为 Deprecate，将会在未来的版本中删除。RMI 激活机制是 RMI 中一个过时的部分，自 Java 8 以来一直是可选的而非必选项。RMI 激活机制增加了持续的维护负担。RMI 的其他部分暂时不会被弃用。</p><p>在 RMI 系统中，我们使用延迟激活。延迟激活将激活对象推迟到客户第一次使用（即第一次方法调用）之前。</p><p>既然 RMI Activation 这么好用，为什么要废弃呢？</p><p>因为对于现代应用程序来说，分布式系统大部分都是基于 Web 的，Web 服务器已经解决了穿越防火墙，过滤请求，身份验证和安全性的问题，并且也提供了很多延迟加载的技术。</p><p>所以在现代应用程序中，RMI Activation 已经很少被使用到了。并且在各种开源代码库中，也基本上找不到 RMI Activation 的使用代码了。</p><p>为了减少 RMI Activation 的维护成本，在 JDK 8 中，RMI Activation 被置为可选的。现在在 JDK 15，终于可以废弃了。</p><h2 id="新特性（饭后甜点）"><a href="#新特性（饭后甜点）" class="headerlink" title="新特性（饭后甜点）"></a>新特性（饭后甜点）</h2><h3 id="01-添加项"><a href="#01-添加项" class="headerlink" title="01-添加项"></a>01-添加项</h3><ul><li>升级了 Unicode，支持 Unicode 13</li><li>给 CharSequence 新增了 isEmpty 方法</li><li>JDK 15 对 TreeMap 提供了 putIfAbsent、computeIfAbsent、computeIfPresent、compute、merge 方法提供了 overriding 实现</li><li>jcmd 的 GC.heap_dump 命令现在支持 gz 选项，以 dump 出 gzip 压缩版的 heap。压缩等级从 1（压缩快） 到 9（压缩慢），默认为1。</li><li>jdk.net.ExtendedSocketOptions 新增 SO_INCOMING_NAPI_ID 选项</li><li>新增 jdk.tls.client.SignatureSchemes 及 jdk.tls.server.SignatureSchemes 用于配置 TLS Signature Schemes</li><li>支持 certificate_authorities</li></ul><h3 id="02-移除项-amp-废弃项"><a href="#02-移除项-amp-废弃项" class="headerlink" title="02-移除项&amp;废弃项"></a>02-移除项&amp;废弃项</h3><ul><li>淘汰了 <code>-XX:UseAdaptiveGCBoundary</code></li><li>废弃了 ForceNUMA 选项</li><li>默认禁用了 Native SunEC Implementation</li></ul><h3 id="03-其他事项"><a href="#03-其他事项" class="headerlink" title="03-其他事项"></a>03-其他事项</h3><p>已知问题：</p><ul><li>HttpClient 现在没有覆盖在 SSLContext Default Parameters 中指定的 Protocols</li></ul><p>其他事项：</p><ul><li>当 DatagramPacket 没有设置 port 的时候，其 getPort 方法返回 0</li><li>优化了默认 G1 Heap Region Size 的计算</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;视频来源：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZmNHkxQjd0dA==&quot;&gt;https://www.bilibili.com/video/BV1vf4y1B7tt&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;大背景&quot;&gt;&lt;a href=&quot;#大背景&quot; class=&quot;headerlink&quot; title=&quot;大背景&quot;&gt;&lt;/a&gt;大背景&lt;/h2&gt;&lt;h3 id=&quot;25-岁的-Java&quot;&gt;&lt;a href=&quot;#25-岁的-Java&quot; class=&quot;headerlink&quot; title=&quot;25 岁的 Java&quot;&gt;&lt;/a&gt;25 岁的 Java&lt;/h3&gt;&lt;h4 id=&quot;Java-的现状&quot;&gt;&lt;a href=&quot;#Java-的现状&quot; class=&quot;headerlink&quot; title=&quot;Java 的现状&quot;&gt;&lt;/a&gt;Java 的现状&lt;/h4&gt;&lt;p&gt;2020 年是 Java 诞生的第 25 个年头，Oracle 表示，目前 Java 仍然流行是流行的编程语言，广泛使用在企业中。目前全世界有超过 69% 的专职开发人员使用 Java，全世界有 510 亿台活动 Java 虚拟机（JVM）在部署中，目前 Java 主要被用于分析、数据管理、大数据、DevOps、移动、持续开发工具和聊天机器人等服务。&lt;/p&gt;
&lt;h4 id=&quot;历史版本的主要新特性&quot;&gt;&lt;a href=&quot;#历史版本的主要新特性&quot; class=&quot;headerlink&quot; title=&quot;历史版本的主要新特性&quot;&gt;&lt;/a&gt;历史版本的主要新特性&lt;/h4&gt;&lt;p&gt;在过去的这些年中，Java 在过去增强功能的推动下为用户提供了超过二十年的创新。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 5：enum、泛型、自动装箱与拆箱、可变参数、增强循环等&lt;/li&gt;
&lt;li&gt;JDK 6：支持脚本语言、JDBC 4.0 API&lt;/li&gt;
&lt;li&gt;JDK 7：支持 try-with-resources、switch 语句块增加 String 支持、NIO 2.0 包&lt;/li&gt;
&lt;li&gt;JDK 8：lambda 表达式、Stream API、新的日期时间的 API、方法引用、构造器引用&lt;/li&gt;
&lt;li&gt;JDK 9：模块化系统、jshell&lt;/li&gt;
&lt;li&gt;JDK 10：局部变量的类型推断&lt;/li&gt;
&lt;li&gt;JDK 11：ZGC 的引入、Epsilon GC&lt;/li&gt;
&lt;li&gt;JDK 12：switch 表达式、Shenandoah GC、增强 G1&lt;/li&gt;
&lt;li&gt;JDK 13：switch 表达式引入 yield、文本块&lt;/li&gt;
&lt;li&gt;JDK 14：instanceof 模式识别、Records、弃用 Parallel Scavenge + Serial GC 组合、删除 CMS GC&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="http://yonghong.tech/categories/Java/"/>
    
    
    <category term="JDK" scheme="http://yonghong.tech/tags/JDK/"/>
    
    <category term="Java" scheme="http://yonghong.tech/tags/Java/"/>
    
    <category term="15" scheme="http://yonghong.tech/tags/15/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第10期 | 2020年12月07日</title>
    <link href="http://yonghong.tech/weekly-010/"/>
    <id>http://yonghong.tech/weekly-010/</id>
    <published>2020-12-07T02:24:00.000Z</published>
    <updated>2020-12-07T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOC9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMS8=">ClickHouse集群搭建（一）<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOS9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMi8=">ClickHouse集群搭建（二）<i class="fa fa-external-link-alt"></i></span><br>ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。</li><li><span class="exturl" data-url="aHR0cDovL2dlbmVyYWx0aGluay5naXRodWIuaW8vMjAyMC8xMS8yMy9hYm91dC1SZWVudHJhbnRMb2NrLXByb2JsZW1zLw==">ReentrantLock 的这几个问题，你都知道吗？<i class="fa fa-external-link-alt"></i></span><br>之前分析 AQS 的时候，了解到 AQS 依赖于内部的两个 FIFO 队列来完成同步状态的管理，当线程获取锁失败的时候，会将当前线程以及等待状态等信息构造成 Node 对象并将其加入同步队列中，同时会阻塞当前线程。当释放锁的时候，会将首节点的 next 节点唤醒 (head 节点是虚拟节点)，使其再次尝试获取锁。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvc2VydmljZS1tZXNoLWluLW1laXR1YW4uaHRtbA==">复杂环境下落地Service Mesh的挑战与实践<i class="fa fa-external-link-alt"></i></span><br>在私有云集群环境下建设 Service Mesh ，往往需要对现有技术架构做较大范围的改造，同时会面临诸如兼容困难、规模化支撑技术挑战大、推广困境多等一系列复杂性问题。本文会系统性地讲解在美团在落地 Service Mesh 过程中，我们面临的一些挑战及实践经验，希望能对大家有所启发或者帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxNDc5MTkwMjQ0MDk4MDYy">CDN工作原理及其在淘宝图片业务中的应用<i class="fa fa-external-link-alt"></i></span><br>淘宝的图片访问，有98%的流量都走了CDN缓存，只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。今年双11，淘宝鹿班的主图价格表达升级项目，就面临了这种挑战，让我们看看是如何解决的吧。<span id="more"></span></li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvY2lrbS0yMDIwLW5scC5odG1s">CIKM 2020 | 一文详解美团6篇精选论文<i class="fa fa-external-link-alt"></i></span><br>AI平台/搜索与NLP部/NLP中心/知识图谱组共有六篇论文（其中4篇长文，2篇短文）被国际会议CIKM2020接收，这些论文是知识图谱组在多模态知识图谱、MT-BERT、Graph Embedding和图谱可解释性等方向上的技术沉淀和应用。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="第十一届中国数据库技术大会（DTCC2020）"><a href="#第十一届中国数据库技术大会（DTCC2020）" class="headerlink" title="第十一届中国数据库技术大会（DTCC2020）"></a>第十一届中国数据库技术大会（DTCC2020）</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL2R0Y2MuaXQxNjguY29tLw==">http://dtcc.it168.com/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2020年12月21日 ~ 1010年12月23日</p><p>2020年12月21日~12月23日，由 IT168 旗下 ITPUB 企业社区平台主办的第十一届中国数据库技术大会（DTCC2020），将在北京隆重召开。大会以“架构革新 高效可控”为主题，设置2大主会场，20+技术专场，将邀请超百位行业专家，重点围绕数据架构、AI与大数据、传统企业数据库实践和国产开源数据库等内容展开分享和探讨，为广大数据领域从业人士提供一场年度盛会和交流平台。</p><p>为了帮助更多企业落地数据项目实施方案，今年将继续开设多门深度培训课程，内容涵盖数据中台、去IOE实践、区块链技术、内核开发实践等。3天传统技术演讲+1天深度主题，将汇聚各行业精英、技术领袖、行业专家和数据英雄，带来超过100场主题演讲和超5场培训课程的头脑风暴，诚邀您的加入。</p><p>历经十年的积累与沉淀，如今的DTCC已然成为国内数据库领域的技术风向标，见证了整个行业的发展与演变。作为顶级的数据领域技术盛会，DTCC2020将继续秉承一贯的干货分享和实践指导原则，期待大家的热情参与！</p><h3 id="第十届PostgreSQL中国技术大会"><a href="#第十届PostgreSQL中国技术大会" class="headerlink" title="第十届PostgreSQL中国技术大会"></a>第十届PostgreSQL中国技术大会</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3BnY29uZjIwMjAucG9zdGdyZXMuY24v">http://pgconf2020.postgres.cn/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2021年1月15日 ~ 2021年1月16日</p><p>2021年1月15～1月16日，由 PostgreSQL 中文社区主办的第十届《PostgreSQL 中国技术大会》将在南京索菲特银河大酒店现场隆重举办。</p><p>PostgreSQL 作为功能最强的的开源关系型数据库之一，得到了越来越多企业的推广和运用，也越来越受到广大技术爱好者的欢迎和重视。</p><p>本次大会以“开源，自研，新机遇”为主题。除了设立一个主会场外，还设立了多个分会场。大会汇聚了来自互联网、电商、教育，金融等各行业领域的专家，这将是 PostgreSQL 发展史上的又一次交流盛会。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzYubWQ=">科技爱好者周刊（第 136 期）：利特伍德奇迹定律<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3Mi5tZA==">Go语言爱好者周刊：第 72 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTMwLm1k">2020.11.30 - FrontPage: The Good, The Bad, and The Ugly<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjEyLjA3Lm1k">老司机 iOS 周报 #138 | 2020-12-07<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ4Lmh0bWw=">R Weekly 2020-48 Your first R package, magrittr, engineering Shiny<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOC9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMS8=&quot;&gt;ClickHouse集群搭建（一）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOS9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMi8=&quot;&gt;ClickHouse集群搭建（二）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2dlbmVyYWx0aGluay5naXRodWIuaW8vMjAyMC8xMS8yMy9hYm91dC1SZWVudHJhbnRMb2NrLXByb2JsZW1zLw==&quot;&gt;ReentrantLock 的这几个问题，你都知道吗？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;之前分析 AQS 的时候，了解到 AQS 依赖于内部的两个 FIFO 队列来完成同步状态的管理，当线程获取锁失败的时候，会将当前线程以及等待状态等信息构造成 Node 对象并将其加入同步队列中，同时会阻塞当前线程。当释放锁的时候，会将首节点的 next 节点唤醒 (head 节点是虚拟节点)，使其再次尝试获取锁。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvc2VydmljZS1tZXNoLWluLW1laXR1YW4uaHRtbA==&quot;&gt;复杂环境下落地Service Mesh的挑战与实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在私有云集群环境下建设 Service Mesh ，往往需要对现有技术架构做较大范围的改造，同时会面临诸如兼容困难、规模化支撑技术挑战大、推广困境多等一系列复杂性问题。本文会系统性地讲解在美团在落地 Service Mesh 过程中，我们面临的一些挑战及实践经验，希望能对大家有所启发或者帮助。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxNDc5MTkwMjQ0MDk4MDYy&quot;&gt;CDN工作原理及其在淘宝图片业务中的应用&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;淘宝的图片访问，有98%的流量都走了CDN缓存，只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。今年双11，淘宝鹿班的主图价格表达升级项目，就面临了这种挑战，让我们看看是如何解决的吧。</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>欧陆词典每日一句-2020年11月</title>
    <link href="http://yonghong.tech/eudic-2020-11/"/>
    <id>http://yonghong.tech/eudic-2020-11/</id>
    <published>2020-11-30T12:00:00.000Z</published>
    <updated>2020-11-30T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。</p></blockquote><hr><p>If I were you, I wouldn’t worry about it. 如果我是你，我不会为此而担忧。</p><p>They worked hard at whatever they did, but they had a sense of achievement. 无论做什么，他们都很努力，有一种成就感。</p><p>A company should find ways to innovate not just in products but also in functions, business models and processes. 一个公司要寻求的不仅仅是产品创新，还应寻求运营、商业模式和流程方面的创新。</p><span id="more"></span><p>I just trust that the principle of reciprocity is true, and I give what I want. 我相信互利互惠的原则，我想要得到就要付出。</p><p>Most successful people are unorthodox persons whose minds wander outside traditional ways of thinking. 大多数成功的人都并非遵循传统之人，他们的思维方式都游离在传统的思维方式之外。</p><p>Curriculums — from grammar school to college, should evolve to focus less on memorizing facts and more on creativity and complex communication. 从语法学校到大学的课程，都应该逐渐发展，更多地注重创新和复杂的交流，而不是把重点放在记忆事实上。</p><p>Gradually it became dark outside. The rain was still beating on the windows, and I could hear the wind in the trees. 外面的天渐渐黑了。雨点仍然拍打着窗户，还可以听到风在树枝间呼啸。</p><hr><p>Almost all companies recognize the importance of innovation today. 如今，几乎所有的公司都知道创新的重要性。</p><p>I wish you well. You have my best wishes. 我祝福你。向你致以最好的祝愿。</p><p>Too much happiness can be destructive. 乐极也会生悲。</p><p>If you can speak the language, it’s easier to get to know the country and its people. 如果会说当地语言，了解这个国家和人民就会更加容易。</p><p>Truly my favorite part is to see the kids jumping up and down and they just get so excited. 我最喜欢的就是看着孩子们兴奋地蹦蹦跳跳。</p><p>People are curious by nature. 人类天性好奇。</p><p>They believed in goodness, in community, and helping one another. 他们信仰美德，信仰团体，信仰互助。</p><hr><p>In my line of work, I receive a lot of emails. I also send a lot of emails. 在我的职业生涯中，我收到过不少电子邮件，也发出去不少。</p><p>Your joy for life, transmitted wherever you took your smile, and the sparkle in those unforgettable eyes. 你对生活的欣喜，通过你的微笑和你令人难忘的双眸中的闪光，传遍了你的所到之处。</p><p>Use your voice to speak out for what’s right. 用你的影响力去为正义发声。</p><p>All kinds of myths surround the lives of well-known people. 名人的生活总是被各种各样的荒诞故事所围绕。</p><p>Demand is rising rapidly, because of the world’s increasing population and expanding industry. 需求量正在激增，因为整个世界人口急剧增长，工业规模不断扩大。</p><p>If I could go back in history and live when I liked, I wouldn’t go back very far. 如果我能回到过去并生活在我喜欢的年代，我不会选很久以前。</p><p>You might imagine the job you will get when you finish school. 你可能会设想自己毕业后从事的工作。</p><hr><p>We often use slang expressions when we talk, because they are so vivid and colorful. 我们说话时会经常使用俚语，因为俚语很生动、很丰富多彩。</p><p>You need to recognize each step of progress you take towards achieving your goals. 你成功路上的每一点进步都值得自己的认可。</p><p>With a lot of hard work and a good education, anything is possible. 只要你愿意努力工作，努力接受教育，任何事情都是可能的。</p><p>Think of an email as a letter. Spelling, grammar and punctuation should not be overlooked. 把编辑电子邮件当成在写信，拼写、语法、标点都不应忽视。</p><p>The ability to work well with others and collaborate on projects is a sought-after ability in nearly every position. 对于任何职位，与他人保持良好的合作关系，可以进行有效的项目合作，这些对职场人来说都是倍受追捧的能力。</p><p>I like to collect bits and pieces from different parts of the world. 我喜欢在世界各地搜集点点滴滴的东西。</p><p>I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。</p><hr><p>A well-organized essay will group similar ideas together and put them in the proper order. 一篇条理清晰的文章会把相似的观点组织在一起，并按适当的顺序排列。</p><p>Wherever you go and for whatever reason, it’s important to be safe. 不论你去哪，因为什么原因，安全都很重要。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;If I were you, I wouldn’t worry about it. 如果我是你，我不会为此而担忧。&lt;/p&gt;
&lt;p&gt;They worked hard at whatever they did, but they had a sense of achievement. 无论做什么，他们都很努力，有一种成就感。&lt;/p&gt;
&lt;p&gt;A company should find ways to innovate not just in products but also in functions, business models and processes. 一个公司要寻求的不仅仅是产品创新，还应寻求运营、商业模式和流程方面的创新。&lt;/p&gt;</summary>
    
    
    
    <category term="学英语" scheme="http://yonghong.tech/categories/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="http://yonghong.tech/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="学英语" scheme="http://yonghong.tech/tags/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="欧陆词典" scheme="http://yonghong.tech/tags/%E6%AC%A7%E9%99%86%E8%AF%8D%E5%85%B8/"/>
    
    <category term="每日一句" scheme="http://yonghong.tech/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>句读-2020年11月</title>
    <link href="http://yonghong.tech/judou-2020-11/"/>
    <id>http://yonghong.tech/judou-2020-11/</id>
    <published>2020-11-30T10:00:00.000Z</published>
    <updated>2020-11-30T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​</p></blockquote><hr><p>生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度。 ​​​​中村恒子</p><p>如果一个人必须完成一件自己不喜欢的事，最好的办法就是尽快做好，然后结束。迟子建</p><p>无论风暴将我带到什么样的岸边，我都将以主人的身份上岸。贺拉斯</p><span id="more"></span><p>有的人走了就再也没回来过，所以，等待和犹豫才是这个世界上最无情的杀手。三毛</p><p>你总是喜欢把事情拖到第二天，你不能再这么拖了，因为有一天，你会有很多事要做，你的余生都不够你用。《余生的第一天》</p><p>很多时候，并不是别人在折磨我们，而是我们用自己的价值观去评判对方的是非对错，是我们在折磨自己。铃木大拙</p><p>我太想爱上一个人了，只是不知道该爱谁。《木兰花》</p><hr><p>语言和文字真的是不可执取的东西，当一句话说出来或者写下来，它就不是你的了，你必须允许别人任意解读，甚至误读。所以我最想说的话，其实在我开口的一刹那就已经说完。扎西朗姆·多多</p><p>当没有任何一个人信任你的时候，沉默和坚持就是最好的反击和证明。托马斯·哈里斯 《沉默的羔羊》</p><p>你形容自己是随和、好相处又安分守己的人，所以你要不就是非常随和，要不就是极度与人疏离。《大小谎言》</p><p>我渴望拥抱你，对你说一千句温柔的蠢话，然这样的话只能在纸上我才能好意思写写，即使在想象中我见了你也将羞愧低头，你是如此可爱而残忍。朱生豪 《醒来觉得甚是爱你》</p><p>我们必须全力以赴，同时又不抱持任何希望。不管做什么事，都要当它是全世界最重要的一件事，但同时又知道这件事根本无关紧要。里尔克</p><p>我们要的或许不是爱，而是偏爱，从他人的偏爱里，确认自己是独特的。只有这样，才能消解在芸芸众生中的孤独。苏更生</p><p>世界上最让人感动的，是遥远的相似性。霍金</p><hr><p>假如您此时此刻刚好陷入了困境，正饱受折磨，那么我很想告诉您：“尽管眼下十分艰难，可日后这段经历说不定就会开花结果。”也不知道这话能否成为慰藉，不过请您这样换位思考、奋力前行。村上春树</p><p>我去练习，去训练，就是避免自己过度思考。平野步梦</p><p>我不会再尝试成为真实的我以外的东西了，我希望你能接受这样的我。《她》</p><p>人的本能是追逐从他身边飞走的东西，却逃避追逐他的东西。伏尔泰</p><p>有教养不是吃饭不洒汤，是别人洒汤的时候别去看他。契诃夫</p><p>能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​</p><p>生活给了我想要的东西，又让我知道这都是没有意义的。</p><hr><p>若有人能让你体会到心碎狂喜和一败涂地，那伟大的并不是他而是你自己。琦殿</p><p>人的一生中，最光辉的一天并非是功成名就那天，而是从悲叹与绝望中产生对人生的挑战，以勇敢迈向意志那天。福楼拜</p><p>有时候，觉得所有人都很美好，下一刻，这些人又变得贪得无厌，而且世界冷酷无比，根本没有自己的立足之地。然而，这都是自己的内心产生的幻想。我们总是将自己内心的恐惧投射在他人身上，当我们看他人，或是看世界的时候，其实看到的是自己。石田衣良 《掌心迷路》</p><p>太在意别人的视线和评价，才会不断寻求别人的认可。对认可的追求，才扼杀了自由。由于不想被任何人讨厌，才选择了不自由的生活方式。换言之，自由就是不再寻求认可。阿德勒</p><p>在以后的日子里，如果我们在各自的道路上，能不时对望一眼，就好了。林清玄</p><p>我始终相信，一切高贵的情感都羞于表白，一切深刻的体验都拙于言辞。周国平</p><p>事实是，每个人都有可能伤害你。你只需要找到那些值得让你忍受的人。鲍勃·马利</p><hr><p>比起偶然的幸福感，充足的睡眠似乎有着更持久的治愈力。禾几</p><p>渺小的忧伤和渺小的爱寿命很长，伟大的爱和伟大的忧伤却毁于自身的过于丰富强烈。王尔德 《道林·格雷的画像》</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度。 ​​​​中村恒子&lt;/p&gt;
&lt;p&gt;如果一个人必须完成一件自己不喜欢的事，最好的办法就是尽快做好，然后结束。迟子建&lt;/p&gt;
&lt;p&gt;无论风暴将我带到什么样的岸边，我都将以主人的身份上岸。贺拉斯&lt;/p&gt;</summary>
    
    
    
    <category term="句读" scheme="http://yonghong.tech/categories/%E5%8F%A5%E8%AF%BB/"/>
    
    
    <category term="句读" scheme="http://yonghong.tech/tags/%E5%8F%A5%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第9期 | 2020年11月30日</title>
    <link href="http://yonghong.tech/weekly-009/"/>
    <id>http://yonghong.tech/weekly-009/</id>
    <published>2020-11-30T02:24:00.000Z</published>
    <updated>2020-11-30T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3ljMTk5NDY2Ni9wLzEwODMxMDM5Lmh0bWw=">Mysql 索引精讲<i class="fa fa-external-link-alt"></i></span><br>本文主要讲述常见索引类型(实现层面)、索引种类(应用层面)、聚簇索引与非聚簇索引、覆盖索引、最佳索引使用策略。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlR1aml0d2tNbDVMUmRiV0N4T0VHQQ==">京东到家MySQL容器化，为何首选Docker而非K8S？<i class="fa fa-external-link-alt"></i></span><br>本文根据詹乡泉老师在〖deeplus直播第250期〗线上分享演讲内容整理而成。（文末有获取本期PPT&amp;回放的方式，不要错过），分享视频：<span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9za1psTGhxRFVkYw==">https://youtu.be/skZlLhqDUdc<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWmE5ZVIwdE5qb1UzclRnNXhUWWdOQQ==">高德最佳实践：Serverless规模化落地有哪些价值？<i class="fa fa-external-link-alt"></i></span><br>曾经看上去很美、一直被观望的 Serverless，现已逐渐进入落地的阶段。今年的”十一出行节”，高德在核心业务规模化落地 Serverless，由 Serverless 支撑的业务在流量高峰期的表现十分优秀。传统应用也能带来同样的体验，那么 Serverless 的差异化价值又是什么呢？本文分享高德 Serverless 规模化落地背后的实践总结。</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFqaWFuL3AvMTEyMjM5OTIuaHRtbA==">Elasticsearch 技术分析（九）：全文搜索引擎Elasticsearch，这篇文章给讲透了！<i class="fa fa-external-link-alt"></i></span><br>本篇主要是基于之前的博文的一个总结，希望通过这篇文章能让读者大致了解Elasticsearch是做什么的以及它的使用和基本原理。</li></ul><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNDgzX2hlc1phbGFHUlBlYnp6NXRQQQ==">Android D8编译器“bug”导致Crash的问题排查<i class="fa fa-external-link-alt"></i></span><br>这篇文章主要是分析了一个因为 Android D8 编译器分配的寄存器不太合理，导致运行时 ART 抛出了 VerifyError 而 Crash 的问题，下文简单分析了下问题产生的原因以及我们采用的修复方案。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjYvY29uc2lzdGVuY3ktaW4tdWktZGVzaWduLmh0bWw=">移动端UI一致性解决方案<i class="fa fa-external-link-alt"></i></span><br>UI一致性是绝大部分研发团队面临的共性问题，大家对落地设计规范，提高UI中台能力，提升产研效率具有强烈的诉求。通过UI一致性的建设，不仅可以在品牌上实现体验升级，更可以全面提高产研效率，为业务的快速迭代提供有力支持和有效保障。统一的品牌符号、品牌特征，有助于加深产品在用户心目中的印象。统一的用户界面和交互形式，能帮助用户加深对产品的熟悉感和信任感。而一个好的设计语言可以在体验上为产品加分，也能够更好的创造一致性体验。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZGRUVXhRRUVuSWJfYjFQek5fSlJKQQ==">干货 | 响应式设计在携程火车票的应用<i class="fa fa-external-link-alt"></i></span><br>可能很多人脑海中已经出现了这样一个动画，当浏览器中页面尺寸不断变化时，内容也在随之变化。简单说，响应式网站设计是一种允许设计和代码响应设备屏幕大小的方法。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOUdqWEI5RXUtT1AzZklqZFFXS2tsZw==">UME - 丰富的Flutter调试工具<i class="fa fa-external-link-alt"></i></span><br>目前西瓜视频作者侧 Flutter 业务场景已经覆盖了 40多个页面 (包括视频播放场景)，用户侧核心场景包括我的 Tab 也已经是 Flutter，在开发过程中，暴露了一些问题，debug 调试难、离开了 IDE 后犹如抓瞎、PM 设计 QA 验收过程中拿不到有用的信息，在市面上找了一圈，也没有类似 iOS Flex 这样强大的调试工具，例如视图大小、层级的展示，实例对象属性的实时修改，网络请求抓取，log 日志打印，文件查看等，所以西瓜视频 Flutter 基础团队决定开发 UME。</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FyY2hpdGVjdHVyZS8xMTY4Ni8=">携程多语言平台-Shark系统的高可用演进之路<i class="fa fa-external-link-alt"></i></span><br>Shark是携程IBU国际化进程中孵化的集多语言内容管理、多语言翻译、多语言内容下发等功能为一体的多语言平台，目前为携程海外几十个站点和上千个业务应用提供稳定的多语言内容管理和下发服务。本文主要分享携程IBU多语言团队在提升系统稳定性过程中的一些实践和总结，希望给大家一些参考和帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk4NDk0ODE3NTYzOTAxOTYw">淘系面向业务价值的精细化流量管控实战-双11实录<i class="fa fa-external-link-alt"></i></span><br>本文将从背景问题、实战效果、设计思路与解法三个方面介绍马克尼(Marconi)在2020双11中，保障了淘系（淘宝、天猫等）核心业务平台（如 首页、会场、直播、互动、我的淘宝 等），多架构层次（从接入网关到业务应用集群/容器）管控业务流量并提升服务业务效果，给予用户顺滑的体验；提升了淘系(及阿里巴巴集团更多的BU)的稳定性底盘，成为应用稳定性保障的核心能力，推动了业界在大型分布式在线业务系统的高可用/稳定性保障进展。为今年双11创新纪录提供保障！</li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjcvc2VsZi1kcml2aW5nLWluLXNpbXVsYXRpb24tc3lzdGVtLmh0bWw=">美团无人车引擎在仿真中的实践<i class="fa fa-external-link-alt"></i></span><br>过去几年，自动驾驶技术有了飞速发展。国内也出现了许多自动驾驶创业企业，这些公司以百度开源项目Apollo为起点，大都可以直接进行公开道路测试，公开道路测试也成为促进技术进步的主要方法。基础问题得以解决之后，行业面临的更多是长尾问题，依靠路测驱动自动驾驶能力建设的方式变得不再高效，离线仿真的地位日益凸显。行业头部企业在仿真的投入十分巨大，Waymo公司2019年公布的仿真里程是100亿英里，是路测里程的1000倍。相应地，美团无人车团队在仿真上的投入也在逐渐增大。在仿真平台的建设中，团队发现公开道路测试和仿真测试看似相似，实际上差异巨大：在车载环境下，为了确保系统的稳定运行，通常要保证一定资源处于空闲状态；仿真环境则不同，如何高效利用资源，如何实现压榨资源的同时确保仿真结果与路测结果一致成为了关键目标。在应对这些挑战的过程中，美团提出了无人车引擎的概念，将车载与离线环境的差异隔离起来：功能模块无需任何更改便可以满足两种场景的需要。</li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRGtDR3Vzem5IOEY4cDM5b1JMdU5CUQ==">TensorFlow Serving 模型更新毛刺的完全优化实践<i class="fa fa-external-link-alt"></i></span><br>在点击率CTR（Click Through Rate）预估算法的推荐场景中使用 Tensorflow Serving热更新较大模型时会出现短暂的延时毛刺，导致业务侧超时，降低算法效果，为了解决这个问题，爱奇艺深度学习平台团队经过多个阶段的优化实践，最后对 TF Serving 和 Tensorflow 的源码进行深入优化，将模型热更新时的毛刺现象解决，本文将分享Tensorflow Serving的优化细节，希望对大家有帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYW1lOVhMMjE4RksxRHVfYnkzX0w1QQ==">日志异常检测初步实践与探索<i class="fa fa-external-link-alt"></i></span><br>日志的主要目的是记录系统（包括服务和业务等）状态和重要的事件帮助定位系统的问题。日志对于理解系统状态和定位性能问题至关重要。因此，日志是在线监控和异常检测的一个重要信息源。在很多业务和服务的故障自愈过程中，日志异常检测与根因分析是必不可少的一环。但是之前我们通常都使用人工的方式来定位问题，主要包括人工检测与分析和人工学习错误日志提取正则表达式来进行故障定位这两种方式。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="第十一届中国数据库技术大会（DTCC2020）"><a href="#第十一届中国数据库技术大会（DTCC2020）" class="headerlink" title="第十一届中国数据库技术大会（DTCC2020）"></a>第十一届中国数据库技术大会（DTCC2020）</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL2R0Y2MuaXQxNjguY29tLw==">http://dtcc.it168.com/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2020年12月21日 ~ 1010年12月23日</p><p>2020年12月21日~12月23日，由 IT168 旗下 ITPUB 企业社区平台主办的第十一届中国数据库技术大会（DTCC2020），将在北京隆重召开。大会以“架构革新 高效可控”为主题，设置2大主会场，20+技术专场，将邀请超百位行业专家，重点围绕数据架构、AI与大数据、传统企业数据库实践和国产开源数据库等内容展开分享和探讨，为广大数据领域从业人士提供一场年度盛会和交流平台。</p><p>为了帮助更多企业落地数据项目实施方案，今年将继续开设多门深度培训课程，内容涵盖数据中台、去IOE实践、区块链技术、内核开发实践等。3天传统技术演讲+1天深度主题，将汇聚各行业精英、技术领袖、行业专家和数据英雄，带来超过100场主题演讲和超5场培训课程的头脑风暴，诚邀您的加入。</p><p>历经十年的积累与沉淀，如今的DTCC已然成为国内数据库领域的技术风向标，见证了整个行业的发展与演变。作为顶级的数据领域技术盛会，DTCC2020将继续秉承一贯的干货分享和实践指导原则，期待大家的热情参与！</p><h3 id="第十届PostgreSQL中国技术大会"><a href="#第十届PostgreSQL中国技术大会" class="headerlink" title="第十届PostgreSQL中国技术大会"></a>第十届PostgreSQL中国技术大会</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3BnY29uZjIwMjAucG9zdGdyZXMuY24v">http://pgconf2020.postgres.cn/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2021年1月15日 ~ 2021年1月16日</p><p>2021年1月15～1月16日，由 PostgreSQL 中文社区主办的第十届《PostgreSQL 中国技术大会》将在南京索菲特银河大酒店现场隆重举办。</p><p>PostgreSQL 作为功能最强的的开源关系型数据库之一，得到了越来越多企业的推广和运用，也越来越受到广大技术爱好者的欢迎和重视。</p><p>本次大会以“开源，自研，新机遇”为主题。除了设立一个主会场外，还设立了多个分会场。大会汇聚了来自互联网、电商、教育，金融等各行业领域的专家，这将是 PostgreSQL 发展史上的又一次交流盛会。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzUubWQ=">科技爱好者周刊（第 135 期）：什么行业适合创业？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3MS5tZA==">Go语言爱好者周刊：第 71 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTIzLm1k">2020.11.23 - Moving my serverless project to Ruby on Rails<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjExLjMwLm1k">老司机 iOS 周报 #138 | 2020-11-30<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ3Lmh0bWw=">R Weekly 2020-47 NHS-R, testthat utility belt, bayesian networks<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3ljMTk5NDY2Ni9wLzEwODMxMDM5Lmh0bWw=&quot;&gt;Mysql 索引精讲&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文主要讲述常见索引类型(实现层面)、索引种类(应用层面)、聚簇索引与非聚簇索引、覆盖索引、最佳索引使用策略。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlR1aml0d2tNbDVMUmRiV0N4T0VHQQ==&quot;&gt;京东到家MySQL容器化，为何首选Docker而非K8S？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文根据詹乡泉老师在〖deeplus直播第250期〗线上分享演讲内容整理而成。（文末有获取本期PPT&amp;amp;回放的方式，不要错过），分享视频：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly95b3V0dS5iZS9za1psTGhxRFVkYw==&quot;&gt;https://youtu.be/skZlLhqDUdc&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWmE5ZVIwdE5qb1UzclRnNXhUWWdOQQ==&quot;&gt;高德最佳实践：Serverless规模化落地有哪些价值？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;曾经看上去很美、一直被观望的 Serverless，现已逐渐进入落地的阶段。今年的”十一出行节”，高德在核心业务规模化落地 Serverless，由 Serverless 支撑的业务在流量高峰期的表现十分优秀。传统应用也能带来同样的体验，那么 Serverless 的差异化价值又是什么呢？本文分享高德 Serverless 规模化落地背后的实践总结。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFqaWFuL3AvMTEyMjM5OTIuaHRtbA==&quot;&gt;Elasticsearch 技术分析（九）：全文搜索引擎Elasticsearch，这篇文章给讲透了！&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本篇主要是基于之前的博文的一个总结，希望通过这篇文章能让读者大致了解Elasticsearch是做什么的以及它的使用和基本原理。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第8期 | 2020年11月23日</title>
    <link href="http://yonghong.tech/weekly-008/"/>
    <id>http://yonghong.tech/weekly-008/</id>
    <published>2020-11-23T02:24:00.000Z</published>
    <updated>2020-11-23T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdlgzMGQ0c0FYMm9FVG5OaDN1WmxFQQ==">干货 | 携程 Cilium+BGP 云原生网络实践<i class="fa fa-external-link-alt"></i></span><br>Cilium 是近两年最火的云原生网络方案之一。Cilium 的核心基于 eBPF，有两大亮点：基于 eBPF 的灵活、高性能网络，以及基于 eBPF 的 L3-L7 安全策略实现。携程 2019 年开始在生产环境使用 Cilium，本文将介绍 Cilium 在携程的落地情况，以及我们基于 Cilium 的、覆盖虚拟机、物理机和容器的云原生安全的一些探索。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==">数据人的“大考”：AnalyticDB如何强力支撑双11？<i class="fa fa-external-link-alt"></i></span><br>每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk2Mjg4OTkwNzY1MjUyNjE2">双十一SSR优化实践：秒开率提升新高度<i class="fa fa-external-link-alt"></i></span><br>会场是每年双十一的主角之一，会场的用户体验自然也是每年最关注的点。在日趋复杂的业务需求下，如何保障我们的用户体验不劣化甚至能更优化是永恒的命题。<br>今年（2020）我们在不改变现有架构，不改变业务的前提下，在会场上使用了 SSR 技术，将秒开率提高到了新的高度（82.6%）；也观察到在用户体验得到优化的同时，业务指标如 UV 点击率等也有小幅的增长（视不同业务场景有不同的提升，最大可达 5%），带来了不错的业务价值。<br>本文将从服务端、前端两个角度介绍我们在 SSR 上的方案与经验<br>1、前端在解决工程化、业务效果评估上的具体实践与方法论<br>2、服务端在解决前端模块代码于服务端执行、隔离和性能优化上的具体实践与方法论</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENyaXhYcW5FbnVIcFlmVVBqeUFDQQ==">爱奇艺知识移动端组件化探索和实践<i class="fa fa-external-link-alt"></i></span><br>组件化对于任何一个业务场景复杂的APP以及经过多次迭代之后的产品来说都是必经之路，组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程。组件化要做的不仅仅是表面上看到的模块拆分解耦，其背后还有很多工作来支撑组件化的进行，例如结合业务特性的模块拆分策略、模块间的交互方式和构建系统等等。本文主要讲述爱奇艺知识APP如何结合自身的业务特点，探索和实践了一套高效的移动端组件化方案。</li></ul><span id="more"></span><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNWU5Y21xdnZhSWhOczhDTlZKdU5vZw==">基于chaosblade的故障注入平台实践<i class="fa fa-external-link-alt"></i></span><br>当今社会互联网应用越来越广泛，用户量日益剧增。在人们对互联网服务的依赖性增大的同时，也对服务的可用性和体验感有了更高的要求。那么如何保障服务在运营过程中能一直给用户提供稳定的、不间断的、可靠可信的服务呢？例如一个金融产品，如果出现过一次问题，那可能带来巨大的损失。大家都知道金融产品的系统架构和服务逻辑是相当复杂的，至此大家都会第一时间联想到测试工程师，他们会通过单元测试、集成测试、性能测试等来验证服务的稳定性。但尽管如此，也是远远不够的，因为错误可以在任何时间以任何形式发生，尤其是对分布式系统。所以这里就需要引入混沌工程（Chaos Engineering）。</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk3MDExMDUyNjAxNDA5NTQ5">设计模式最佳套路—— 愉快地使用策略模式<i class="fa fa-external-link-alt"></i></span><br>策略模式（Strategy Pattern）定义了一组策略，分别在不同类中封装起来，每种策略都可以根据当前场景相互替换，从而使策略的变化可以独立于操作者。比如我们要去某个地方，会根据距离的不同（或者是根据手头经济状况）来选择不同的出行方式（共享单车、坐公交、滴滴打车等等），这些出行方式即不同的策略。</li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTkvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==">Apache Kylin的实践与优化<i class="fa fa-external-link-alt"></i></span><br>Apache Kylin是一个基于Hadoop大数据平台打造的开源OLAP引擎，它采用了多维立方体预计算技术，利用空间换时间的方法，将查询速度提升至亚秒级别，极大地提高了数据分析的效率，并带来了便捷、灵活的查询功能。</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xNy8yMDI4Lmh0bWw=">双汇大数据方案选型：从棘手的InfluxDB+Redis到毫秒级查询的TDengine<i class="fa fa-external-link-alt"></i></span><br>双汇发展多个分厂的能源管控大数据系统主要采用两种技术栈：InfluxDB/Redis和Kafka/Redis/HBase/Flink，对于中小型研发团队来讲，无论是系统搭建，还是实施运维都非常棘手。经过对InfluxDB/Redis和TDengine大数据平台的功能和性能对比测试，最终将TDengine作为实施方案。</li></ul><h2 id="近期会议公开课"><a href="#近期会议公开课" class="headerlink" title="近期会议公开课"></a>近期会议公开课</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h3 id="NGINX开源社区技术专题系列课程（安全专题）"><a href="#NGINX开源社区技术专题系列课程（安全专题）" class="headerlink" title="NGINX开源社区技术专题系列课程（安全专题）"></a>NGINX开源社区技术专题系列课程（安全专题）</h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmdpbngub3JnLmNuL2FydGljbGUvZGV0YWlsLzMzNg==">https://www.nginx.org.cn/article/detail/336<i class="fa fa-external-link-alt"></i></span></p><p>主题：使用ModSecurity/App Protect模块构建NGINX WAF</p><p>时间：11月25日下午2-3点</p><p>讲师：NGINX解决方案架构师邹俊</p><p>企业需要迅速将服务和应用推向市场，而快速将代码发布到生产环境中的压力使得安全性很容易下滑。过度依赖诸如漏洞扫描器之类的自动化工具是危险的，因为它们不能捕捉到所有问题。将各种跨功能开发团队提供的代码结合起来，就不太清楚谁负责实施安全性。在生产环境中运行多个应用和应用版本会使应用程序的防护层出现裂缝。</p><p>最终的结果是，对web应用防火墙（WAF）等安全工具的需求从未像现在这样迫切。这些安全工具通常与负载平衡代理集成，并部署在公司网络的边缘（或前门）以创建安全的外围环境。</p><p>安全不再是CISO和SecOps团队的唯一领域。DevOps团队在接受、测试和部署作为CI/CD管道一部分的安全策略方面扮演着重要角色。NGINX App Protect将F5先进WAF技术的有效性与NGINX的灵活性和性能相结合。它本机运行在NGINX Plus上，以解决现代DevOps环境面临的安全挑战。</p><p>通过本次公开课，您可以了解：</p><ul><li>NGINX WAF使用场景</li><li>NGINX WAF vs NGINX App Protect</li><li>NGINX App Protect策略配置</li><li>KIC WAF策略配置</li></ul><h2 id="会议公开课资料"><a href="#会议公开课资料" class="headerlink" title="会议公开课资料"></a>会议公开课资料</h2><h3 id="2020-Google-开发者大会-Google-Developer-Summit"><a href="#2020-Google-开发者大会-Google-Developer-Summit" class="headerlink" title="2020 Google 开发者大会 (Google Developer Summit)"></a>2020 Google 开发者大会 (Google Developer Summit)</h3><p>Google 开发者大会 (Google Developer Summit) 是谷歌面向开发者展示最新产品和平台的年度盛会。2020 Google 开发者大会于 11 月 16 日 至 21 日举行，这是谷歌首次以全线上大会的形式与中国开发者相聚。本次大会以“代码不止”为主题，全面介绍了产品更新以及一系列面向本地开发者的技术支持内容，旨在赋能开发者高效创新、持续不断地创造愉悦的产品体验。</p><p>2020 Google 开发者大会 (Google Developer Summit) 全部视频 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGRjT01jRE1yTHJVbVp1WFJLdE9saERaR3BzdlFJWGk3">https://www.youtube.com/playlist?list=PLdcOMcDMrLrUmZuXRKtOlhDZGpsvQIXi7<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 主题演讲 <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS81ek82MEhOUWtXUQ==">https://youtu.be/5zO60HNQkWQ<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Android、Google Play、ChromeOS <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9OLXg3dFhZZk94RQ==">https://youtu.be/N-x7tXYfOxE<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Flutter、Web、Material Design <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS80VkxRTXlTUWg4UQ==">https://youtu.be/4VLQMySQh8Q<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 TensorFlow、Google 女性开发者职业发展座谈会 <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9OdTl6Z1VJNUtUYw==">https://youtu.be/Nu9zgUI5KTc<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Google Cloud、Google Assistant、游戏和移动应用、Firebase <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS95cjhBeGFqZTBDNA==">https://youtu.be/yr8Axaje0C4<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 谷歌艺术与文化、ARCore by Google、WearOS by Google <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS94cWZwR0FXOGRfTQ==">https://youtu.be/xqfpGAW8d_M<i class="fa fa-external-link-alt"></i></span></p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzQubWQ=">科技爱好者周刊（第 134 期）：未来的游戏业比现在大100倍<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3MC5tZA==">Go语言爱好者周刊：第 70 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTE2Lm1k">2020.11.16 - KISS, SOLID, YAGNI And Other Fun Acronyms<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjExLjIzLm1k">老司机 iOS 周报 #137 | 2020-11-23<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ2Lmh0bWw=">R Weekly 2020-46 Open Acces, YAPOEH, Docker<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdlgzMGQ0c0FYMm9FVG5OaDN1WmxFQQ==&quot;&gt;干货 | 携程 Cilium+BGP 云原生网络实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Cilium 是近两年最火的云原生网络方案之一。Cilium 的核心基于 eBPF，有两大亮点：基于 eBPF 的灵活、高性能网络，以及基于 eBPF 的 L3-L7 安全策略实现。携程 2019 年开始在生产环境使用 Cilium，本文将介绍 Cilium 在携程的落地情况，以及我们基于 Cilium 的、覆盖虚拟机、物理机和容器的云原生安全的一些探索。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==&quot;&gt;数据人的“大考”：AnalyticDB如何强力支撑双11？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk2Mjg4OTkwNzY1MjUyNjE2&quot;&gt;双十一SSR优化实践：秒开率提升新高度&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;会场是每年双十一的主角之一，会场的用户体验自然也是每年最关注的点。在日趋复杂的业务需求下，如何保障我们的用户体验不劣化甚至能更优化是永恒的命题。&lt;br&gt;今年（2020）我们在不改变现有架构，不改变业务的前提下，在会场上使用了 SSR 技术，将秒开率提高到了新的高度（82.6%）；也观察到在用户体验得到优化的同时，业务指标如 UV 点击率等也有小幅的增长（视不同业务场景有不同的提升，最大可达 5%），带来了不错的业务价值。&lt;br&gt;本文将从服务端、前端两个角度介绍我们在 SSR 上的方案与经验&lt;br&gt;1、前端在解决工程化、业务效果评估上的具体实践与方法论&lt;br&gt;2、服务端在解决前端模块代码于服务端执行、隔离和性能优化上的具体实践与方法论&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENyaXhYcW5FbnVIcFlmVVBqeUFDQQ==&quot;&gt;爱奇艺知识移动端组件化探索和实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;组件化对于任何一个业务场景复杂的APP以及经过多次迭代之后的产品来说都是必经之路，组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程。组件化要做的不仅仅是表面上看到的模块拆分解耦，其背后还有很多工作来支撑组件化的进行，例如结合业务特性的模块拆分策略、模块间的交互方式和构建系统等等。本文主要讲述爱奇艺知识APP如何结合自身的业务特点，探索和实践了一套高效的移动端组件化方案。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第7期 | 2020年11月16日</title>
    <link href="http://yonghong.tech/weekly-007/"/>
    <id>http://yonghong.tech/weekly-007/</id>
    <published>2020-11-16T02:24:00.000Z</published>
    <updated>2020-11-16T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTIvamF2YS05LWNtcy1nYy5odG1s">Java中9种常见的CMS GC问题分析与解决<i class="fa fa-external-link-alt"></i></span><br>目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用。</li><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8xNS9KYXZhLUNvbGxlY3RvcnMlRTUlQjglQjglRTclOTQlQTglRTclOUElODQyMCVFNCVCOCVBQSVFNiU5NiVCOSVFNiVCMyU5NS8=">Java-Collectors常用的20个方法<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xMi8yMDA3Lmh0bWw=">TDengine + EMQ X + Grafana 轻松搭建高效低成本的边缘侧工业互联网平台<i class="fa fa-external-link-alt"></i></span><br>本文将介绍基于TDengine、EMQ X搭建一个集工业数据采集、汇聚、清洗、存储分析以及可视化展示等能力于一体的轻量级边缘计算工业互联网平台。在此方案基础上，读者可以根据自身需求调整方案设计，从而搭建满足实际业务需求的工业互联网平台，加速实现工业智能化转型。</li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4MTU3NA==">微服务授权应该怎么做？<i class="fa fa-external-link-alt"></i></span><br>前后端鉴权是一个很大的话题，不同组织的鉴权方式各不相同，甚至对同一协议的业务实现也可能相去甚远。本文尝试从认证与授权两个维度来描述标题中的鉴权，大部分篇幅还是偏认证。</li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4NTMxNA==">分布式系统！如何实现用户追踪和认证？<i class="fa fa-external-link-alt"></i></span><br>讲使用 spring security 等具体技术的资料已经很多了，这篇文章不打算写框架和代码的具体实现。我们会讨论认证和授权的区别，然后会介绍一些被业界广泛采用的技术，最后会聊聊怎么为 API 构建选择合适的认证方式。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVHlsNmRTYjdtSEJ1cXFONld2RXVhdw==">一例 Go 编译器代码优化 bug 定位和修复解析<i class="fa fa-external-link-alt"></i></span><br>本文中介绍了 Go 编译器的整体编译流程脉络和一个编译优化错误导致数据越界访问的 bug，并分析了对这个 bug 的排查和修复过程，希望能够借此让大家对 Go 编译器有更多的了解，在遇到类似问题时有排查思路。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZkoyMnk3TVF2a2NOSmtpQW5Nd2NVZw==">服务注册中心 | 记一次Consul故障分析与优化<i class="fa fa-external-link-alt"></i></span><br>在微服务体系中，服务注册中心是最基础的组件，它的稳定性会直接影响整个服务体系的稳定性。本文主要介绍了爱奇艺微服务平台基于Consul的服务注册中心建设方式，与内部容器平台、API网关的集成情况，并重点记录了Consul遇到的一次故障，分析解决的过程，以及针对这次故障从架构上的优化调整措施。Consul 是近几年比较流行的服务发现工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比Consul 的方案更“一站式”，使用起来也较 为简单。他的主要应用场景为：服务发现、服务隔离、服务配置。</li></ul><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlpPcG5pa3JyV1pZREhjOW5JUmpXUQ==">干货 | 携程移动直播探索<i class="fa fa-external-link-alt"></i></span><br>直播行业大概在10年前就开始兴起了，秀场直播和游戏直播是pc时代比较成功的应用场景。现阶段，移动互联网的大规模普及，流量价格越来越便宜，移动视频直播异常火爆，随着各行各业的不断融合，直播带货超高的营业额，明星艺人、销售、秀场网红的涌入，直播行业迎来了空前的繁荣发展。从pc直播到渐渐火爆的移动直播，直播技术也在不断地更新迭代，趋于成熟。本文从直播流的选择、交互优化、快速迭代等方面介绍携程直播技术。</li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy84OTM4">【技术猩球】​七牛云内部平台架构 QStreaming——轻量级大数据ETL的开发框架<i class="fa fa-external-link-alt"></i></span><br>QStreaming is a framework that simplifies writing and executing ETLs on top of Apache Spark. It is based on a simple sql-like configuration file and runs on any Spark cluster</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvd1A4TWxRcjZRLVo1NDJZenBCQ1pFQQ==">HDFS慢节点监控及处理<i class="fa fa-external-link-alt"></i></span><br>HDFS集群随着使用时间的增长，难免会出现一些“性能退化”的节点，主要表现为磁盘读写变慢、网络传输变慢，我们统称这些节点为慢节点。当集群扩大到一定规模，比如上千个节点的集群，慢节点通常是不容易被发现的。大多数时候，慢节点都藏匿于众多健康节点中，只有在客户端频繁访问这些有问题的节点，发现读写变慢了，才会被感知到。</li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FpLzExMTI1Lw==">日均5亿字符翻译量，百毫秒内响应，携程机器翻译平台实践<i class="fa fa-external-link-alt"></i></span><br>随着国际化进程的开展，携程正加速第三次创业，各部门及业务场景对多语种的需求日益增长，依靠译员或精通多语种的客服难以支撑持续扩大的自然文本翻译流量。机器翻译技术作为近年来人工智能领域在自然语言处理任务上探索的先驱，逐渐走出学术的象牙塔，开始为普通用户提供实时便捷的翻译服务，并已取得了显著的成效。在这样的形势下，针对旅游服务场景提供更高质量低成本的机器翻译服务成为了一个重要课题。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzMubWQ=">科技爱好者周刊（第 133 期）：贵州变瑞士，有没有可能？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2OS5tZA==">Go语言爱好者周刊：第 69 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTA5Lm1k">2020.11.09 - 7GUIs: A GUI Programming Benchmark<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNi0yMDIwLjExLjE2Lm1k">老司机 iOS 周报 #136 | 2020-11-16<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ1Lmh0bWw=">R Weekly 2020-45 Publishing, Prefrontal Cortex, Parentheses<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTIvamF2YS05LWNtcy1nYy5odG1s&quot;&gt;Java中9种常见的CMS GC问题分析与解决&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8xNS9KYXZhLUNvbGxlY3RvcnMlRTUlQjglQjglRTclOTQlQTglRTclOUElODQyMCVFNCVCOCVBQSVFNiU5NiVCOSVFNiVCMyU5NS8=&quot;&gt;Java-Collectors常用的20个方法&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xMi8yMDA3Lmh0bWw=&quot;&gt;TDengine + EMQ X + Grafana 轻松搭建高效低成本的边缘侧工业互联网平台&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文将介绍基于TDengine、EMQ X搭建一个集工业数据采集、汇聚、清洗、存储分析以及可视化展示等能力于一体的轻量级边缘计算工业互联网平台。在此方案基础上，读者可以根据自身需求调整方案设计，从而搭建满足实际业务需求的工业互联网平台，加速实现工业智能化转型。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4MTU3NA==&quot;&gt;微服务授权应该怎么做？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;前后端鉴权是一个很大的话题，不同组织的鉴权方式各不相同，甚至对同一协议的业务实现也可能相去甚远。本文尝试从认证与授权两个维度来描述标题中的鉴权，大部分篇幅还是偏认证。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4NTMxNA==&quot;&gt;分布式系统！如何实现用户追踪和认证？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;讲使用 spring security 等具体技术的资料已经很多了，这篇文章不打算写框架和代码的具体实现。我们会讨论认证和授权的区别，然后会介绍一些被业界广泛采用的技术，最后会聊聊怎么为 API 构建选择合适的认证方式。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVHlsNmRTYjdtSEJ1cXFONld2RXVhdw==&quot;&gt;一例 Go 编译器代码优化 bug 定位和修复解析&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文中介绍了 Go 编译器的整体编译流程脉络和一个编译优化错误导致数据越界访问的 bug，并分析了对这个 bug 的排查和修复过程，希望能够借此让大家对 Go 编译器有更多的了解，在遇到类似问题时有排查思路。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZkoyMnk3TVF2a2NOSmtpQW5Nd2NVZw==&quot;&gt;服务注册中心 | 记一次Consul故障分析与优化&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在微服务体系中，服务注册中心是最基础的组件，它的稳定性会直接影响整个服务体系的稳定性。本文主要介绍了爱奇艺微服务平台基于Consul的服务注册中心建设方式，与内部容器平台、API网关的集成情况，并重点记录了Consul遇到的一次故障，分析解决的过程，以及针对这次故障从架构上的优化调整措施。Consul 是近几年比较流行的服务发现工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比Consul 的方案更“一站式”，使用起来也较 为简单。他的主要应用场景为：服务发现、服务隔离、服务配置。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第6期 | 2020年11月09日</title>
    <link href="http://yonghong.tech/weekly-006/"/>
    <id>http://yonghong.tech/weekly-006/</id>
    <published>2020-11-09T02:24:00.000Z</published>
    <updated>2020-11-09T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc2MzQ1Mg==">程序员都应该知道的URI，一文帮你全面了解<i class="fa fa-external-link-alt"></i></span><br>URI 是每个程序员都应该了解的概念，同时相关联的还有 URL, URN 等概念簇。了解这些概念，可以帮助我们更好地窥探万维网(WWW)的设计，同时也能帮我们在工作中有效解决跟 URI 相关概念的问题，更加理解 encode,decode 工作原理，更好地助力网络编程！</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODkxNTgyMTYyNzk4MTE2ODcx">5G时代|淘宝直播高画质低延时技术探索<i class="fa fa-external-link-alt"></i></span><br>5G将对视频分辨率和清晰度提出越来越高的要求。淘宝作为一个数亿级用户的短视频与直播平台，业务多样，两端用户分布广，设备和网络情况复杂，给多媒体内容存储和分发带来巨大挑战。在内容生产过程中把控好质量和成本，在内容分发和消费过程中确保用户体验，是当前面临的主要问题。为了解决这个问题，我们有两个优化目标，一是在画质不变的前提下降码率，二是在码率不变的前提下提升画面质量。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMlBSWF92VmhpM1N5Z3JaeWRCZkc2dw==">干货 | 携程Elasticsearch数据同步实践<i class="fa fa-external-link-alt"></i></span><br>Elasticsearch是最近几年非常热门的分布式搜索和数据分析引擎，携程内部不仅使用ES实现了大规模的日志平台，也广泛使用ES实现了各个业务场景的搜索、推荐等功能。本文聚焦在业务搜索的场景分享了我们在做数据同步方面的思考和实践，希望能对大家有所启发。</li></ul><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMDUvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">积木Sketch插件进阶开发指南<i class="fa fa-external-link-alt"></i></span><br>积木插件原本只是外卖提升UI/RD协作效率的一次尝试，最初的目标仅是UI一致性，但是现在已经作为全面提升产研效率的媒介，承载了越来越多的功能。 </li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY5Njc2NA==">优秀 ！华为是这样使用Git rebase的<i class="fa fa-external-link-alt"></i></span><br>理论上来说，只要能合理管理项目分支，这几个命令已经足以应付所有的日常开发工作。但是如果我们偶尔看一下自己的git graph，我的天呐，为什么会这么乱。鉴于分支管理的混乱（或者根本就没有进行过分支管理），我们经常遇到一些意想不到的问题，因此需要使用很多面生的git命令来解决我们的问题，比如说本文讲到的git rebase。</li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmF1dGhpbmcuY24vYmxvZy9kZXRhaWwvODc=">你真的会使用搜索引擎吗？<i class="fa fa-external-link-alt"></i></span><br>相信很多人平时打开网页，想要搜索东西的时候，都会直接选择输入关键词，于是得到一大堆种类不一的搜索结果，在茫茫页面中苦苦寻找自己需要的信息。这种不经思考的搜索方式，不仅增加了搜索信息的时间成本，还往往找不到正确的信息。那么，正确的搜索方式是什么呢？本文结合了作者多年的搜索经验和实践，包教包会，让你从只会简单搜索关键词的小白瞬间成长为掌握多种搜索技巧的高手，下面便开始学习吧</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzIubWQ=">科技爱好者周刊（第 132 期）：快能力和慢能力<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2OC5tZA==">Go语言爱好者周刊：第 68 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTAyLm1k">2020.11.02 - If not SPAs, What?<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMS0yMDIwLjExLjA5Lm1k">老司机 iOS 周报 #135 | 2020-11-09<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ0Lmh0bWw=">R Weekly 2020-44 {emphatic}, American political data, data science teaching<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc2MzQ1Mg==&quot;&gt;程序员都应该知道的URI，一文帮你全面了解&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;URI 是每个程序员都应该了解的概念，同时相关联的还有 URL, URN 等概念簇。了解这些概念，可以帮助我们更好地窥探万维网(WWW)的设计，同时也能帮我们在工作中有效解决跟 URI 相关概念的问题，更加理解 encode,decode 工作原理，更好地助力网络编程！&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODkxNTgyMTYyNzk4MTE2ODcx&quot;&gt;5G时代|淘宝直播高画质低延时技术探索&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;5G将对视频分辨率和清晰度提出越来越高的要求。淘宝作为一个数亿级用户的短视频与直播平台，业务多样，两端用户分布广，设备和网络情况复杂，给多媒体内容存储和分发带来巨大挑战。在内容生产过程中把控好质量和成本，在内容分发和消费过程中确保用户体验，是当前面临的主要问题。为了解决这个问题，我们有两个优化目标，一是在画质不变的前提下降码率，二是在码率不变的前提下提升画面质量。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMlBSWF92VmhpM1N5Z3JaeWRCZkc2dw==&quot;&gt;干货 | 携程Elasticsearch数据同步实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Elasticsearch是最近几年非常热门的分布式搜索和数据分析引擎，携程内部不仅使用ES实现了大规模的日志平台，也广泛使用ES实现了各个业务场景的搜索、推荐等功能。本文聚焦在业务搜索的场景分享了我们在做数据同步方面的思考和实践，希望能对大家有所启发。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第5期 | 2020年11月02日</title>
    <link href="http://yonghong.tech/weekly-005/"/>
    <id>http://yonghong.tech/weekly-005/</id>
    <published>2020-11-02T02:24:00.000Z</published>
    <updated>2020-11-02T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY2MjA0Ng==">你不知道的JMM底层原理<i class="fa fa-external-link-alt"></i></span><br>在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMzAvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">Native地图与Web融合技术的应用与实践<i class="fa fa-external-link-alt"></i></span><br>本文将WebView与Native地图组件叠加到一起，实现了用户手势事件智能分发的机制，解决了WebView与Native地图在同一页面内布局困难的问题。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTAvMjYvcG9zZWlkb24v">波塞冬：伴鱼运营活动前端配置化实践<i class="fa fa-external-link-alt"></i></span><br>波塞冬，是伴鱼活动运营解决方案的总称，包含活动规则体系、h5 可视化开发平台等，名称来源于古希腊神话，波塞冬是海洋和所有水系的管理者，寓意为 palfish 发展提供超能力。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOExFclpXSjBGMFZzWjdXZ2pDYi1WZw==">干货 | 深入浅出Apple响应式框架Combine<i class="fa fa-external-link-alt"></i></span><br>Combine.framework 是Apple在2019 WWDC 上基于Swift推出的函数响应框架（Functional Reactive Programming）,支持Apple全平台的操作系统（iOS13+，macOS 10.15+等）。函数式响应框架无论在哪个平台早已流行泛滥，开源的Rx更是实现了各种语言的响应式编程框架。Apple在这个时候推出响应式框架，无疑是对自己护城河的进一步巩固。事实上SwiftUI的数据驱动就是依赖Combine。本文将深入浅出地介绍Combine的基本概念和原理，然后通过具体demo详细阐述其在实际编码中的应用。<span id="more"></span></li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzEubWQ=">科技爱好者周刊（第 131 期）：你的头脑是二值逻辑，还是三值逻辑？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2Ny5tZA==">Go语言爱好者周刊：第 67 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDI2Lm1k">2020.10.26 - The Tyranny of Metrics<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNC0yMDIwLjExLjAyLm1k">老司机 iOS 周报 #134 | 2020-11-02<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQzLmh0bWw=">R Weekly 2020-43 Rolling averages with {slider}, mapping as art, and mapping flooding impacts.<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY2MjA0Ng==&quot;&gt;你不知道的JMM底层原理&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMzAvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==&quot;&gt;Native地图与Web融合技术的应用与实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文将WebView与Native地图组件叠加到一起，实现了用户手势事件智能分发的机制，解决了WebView与Native地图在同一页面内布局困难的问题。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTAvMjYvcG9zZWlkb24v&quot;&gt;波塞冬：伴鱼运营活动前端配置化实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;波塞冬，是伴鱼活动运营解决方案的总称，包含活动规则体系、h5 可视化开发平台等，名称来源于古希腊神话，波塞冬是海洋和所有水系的管理者，寓意为 palfish 发展提供超能力。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOExFclpXSjBGMFZzWjdXZ2pDYi1WZw==&quot;&gt;干货 | 深入浅出Apple响应式框架Combine&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Combine.framework 是Apple在2019 WWDC 上基于Swift推出的函数响应框架（Functional Reactive Programming）,支持Apple全平台的操作系统（iOS13+，macOS 10.15+等）。函数式响应框架无论在哪个平台早已流行泛滥，开源的Rx更是实现了各种语言的响应式编程框架。Apple在这个时候推出响应式框架，无疑是对自己护城河的进一步巩固。事实上SwiftUI的数据驱动就是依赖Combine。本文将深入浅出地介绍Combine的基本概念和原理，然后通过具体demo详细阐述其在实际编码中的应用。</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>欧陆词典每日一句-2020年10月</title>
    <link href="http://yonghong.tech/eudic-2020-10/"/>
    <id>http://yonghong.tech/eudic-2020-10/</id>
    <published>2020-10-31T12:00:00.000Z</published>
    <updated>2020-10-31T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。</p></blockquote><hr><ul><li><p>Volunteers are teenagers and adults who choose to spend some time, unpaid, helping other people in some way. 志愿者是选择花费时间，不求酬劳以某种方式帮助他人的青少年或者是成年人。</p></li><li><p>Aim high but within reason. 要有雄心，但也要理性。</p></li></ul><span id="more"></span><ul><li><p>It’s important to prepare for your trip in advance and to take precautions while you are travelling. 提前为你的旅行做好准备，在旅行的时候警惕点，很重要。</p></li><li><p>Everything is going according to plan. 一切都照计划进行着。</p></li><li><p>The main measure of economic progress is the gross national product(GNP). 经济增长主要的衡量标准是国民生产总值（GNP）。</p></li><li><p>Dance expresses love and hate, joy and sorrow, life and death, and everything else in between. 舞蹈能表达爱与恨，快乐与忧愁，生存和死亡，以及一切的一切。</p></li><li><p>If you are a college student looking for a part-time job, the best place to start your job search is right on campus. 如果你是一名正在找兼职工作的大学生，那么开始找工作的最好地点就是在学校。</p></li></ul><hr><ul><li><p>What have been the main challenges and opportunities that you have faced? 你面临的主要挑战和机遇是什么？</p></li><li><p>I guess I should recognize my mistakes and learn the lesson they teach me and move forward. 我想我应该认识到自己的错误，从中汲取教训，然后继续前进。</p></li><li><p>My rich dad taught me a lesson I have carried all my life and that was the necessity of being charitable or giving. 富爸爸教给我一生受用的经验，即乐善好施是必要的。</p></li><li><p>Working in a team can have huge benefits. 在团队中工作可以带来巨大的好处。</p></li><li><p>Buckle up in every seat, on every trip, every time. 交通出行必系安全带。</p></li><li><p>Be sure to attend all classes and leave enough time to finish your assignments and prepare well for examinations. 一定要参加所有的课程，留下足够的时间完成你的作业，好好准备考试。</p></li><li><p>Most people know Marie Curie was the first woman to win the Nobel Prize and the first person to win it twice. 大多数人都知道玛丽·居里是第一位获得诺贝尔奖的女性，同时也是第一位两次获得诺贝尔奖的女性。</p></li></ul><hr><ul><li><p>Even after all these years, I want to get better and better. 即使经过这么多年，我还是想做到精益求精。</p></li><li><p>My heart is full of many things to say to you. 我心里装满了要向你倾诉的话。</p></li><li><p>I guess living on campus, I’ll have a chance to have a closer circle of friends since we’ll be living together. 我想，进入校园生活后，我们会住在一起，我就有机会结交一些更亲密的好友。</p></li><li><p>People who enjoy extreme sports actually seek out danger—it gives them extreme pleasure! 享受极限运动的人追求危险——这会给他们带来极度快感！</p></li><li><p>Your journey forward will not always be easy. 你的前途未必总是一帆风顺。</p></li><li><p>I really appreciate this. Thanks for your help. 我对此很感激。感谢你的帮助。</p></li><li><p>Regular physical activity helps maintain a healthy weight and can prevent some chronic diseases. 定期体育活动有助保持健康体重，避免慢性疾病产生。</p></li></ul><hr><ul><li><p>Philanthropy is a growing movement, a lot more can be done. 慈善是一项不断发展的事业，还有很多事情可以去完成。</p></li><li><p>In college, time is scarce, and consequently, very precious. 在大学里，时间很少，因此非常宝贵。</p></li><li><p>Overconcern with being perfect can damage our confidence if we never achieve it. 如果我们最终没法变得完美，对它过于追求反而会有损我们的自信心。</p></li><li><p>Allow me to introduce myself. 请允许我自我介绍一下。</p></li><li><p>I really want to push harder and progress further. 我真的希望更加努力，取得更大的进步。</p></li><li><p>It’s a long way, but I think you’ll have a good time. 路途很长，但我觉得你会度过一段美好的时光。</p></li><li><p>As he got in the habit of hard work, his grades began to soar. 随着他养成刻苦学习的习惯，他的成绩开始飙升。</p></li></ul><hr><ul><li><p>There is lots of snow around, and the ground freezes, which can make life difficult for animals. 到处都是积雪，大地被冰封，这让动物们的生活变得艰难。</p></li><li><p>Sleeping better may help fight off illness. 好的睡眠能够抵御疾病。</p></li><li><p>It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Volunteers are teenagers and adults who choose to spend some time, unpaid, helping other people in some way. 志愿者是选择花费时间，不求酬劳以某种方式帮助他人的青少年或者是成年人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aim high but within reason. 要有雄心，但也要理性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学英语" scheme="http://yonghong.tech/categories/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="http://yonghong.tech/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="学英语" scheme="http://yonghong.tech/tags/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="欧陆词典" scheme="http://yonghong.tech/tags/%E6%AC%A7%E9%99%86%E8%AF%8D%E5%85%B8/"/>
    
    <category term="每日一句" scheme="http://yonghong.tech/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>句读-2020年10月</title>
    <link href="http://yonghong.tech/judou-2020-10/"/>
    <id>http://yonghong.tech/judou-2020-10/</id>
    <published>2020-10-31T11:00:00.000Z</published>
    <updated>2020-10-31T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>答非所问，其实已经是答了。木心</p></blockquote><hr><p>浮现在天空中的月亮尽管一样，但我们看到的也许是另一个东西。村上春树 《1Q84》</p><p>其实秋天不是秋天，秋天是夏天努力地想要停止下来的那段时光。简蔓</p><span id="more"></span><p>生活比秩序重要，适度的混乱对心灵有益。玛丽莲·弗伦奇</p><p>不要说住在同一个城市，就算天天出没在同一座楼里，原来说见不着就是见不着。缘分一物，竟可诡谲至此。其实，人用不着出海，隔断千山的大海自然会跟着你。梁文道 《我执》</p><p>坏名声比好名声容易承担多了，因为后者背负起来更沉重，你必须表现得名副其实，而任何偏差都会被看成像是你犯了罪。坏名声的话，名实不符却可以当作是你在与人为善。阿尔贝·加缪</p><p>喜欢，是看某物好甚至极好，随之而来的念头是：“欲占有”。爱，则多是看某物不好或还不够好，其实是盼望它好以至非常好，随之而得的激励是：“愿付出”。史铁生</p><p>一个人无须为他的时代着急，也无须为个人着急，他只须天真的没办法，自然会在波浪上浮着，而相信：哼，我浮着最合适。老舍</p><hr><p>肉体才是人的神殿，不管里面供奉的是什么，都应该好好保持它的强韧、美丽和清洁。村上春树</p><p>人变得真正低劣时，除了高兴别人的不幸之外，已无其他乐趣可言。歌德</p><p>我想你了，可是我不能对你说，怕只怕，说了，对你也是一种折磨。艾米莉·狄金森</p><p>一个人若没有独立的人格，别人一个眼神，便可以把你关进心牢里，别让自己的灵魂，一辈子都在牢笼中渡过。《半山文集》</p><p>懒惰是索价极高的奢侈品，一旦到期清付，必定偿还不起。徐悲鸿</p><p>很喜欢那种通过一点点的努力，然后感受到自己正在慢慢进步的感觉。就像爬山一样，随着跟山顶的距离逐渐拉近，看到的风景也越来越美，内心更是越发欢愉。其实无论离山顶有多远，人总归应该多看些这种风景的。</p><p>你要搞清楚自己人生的剧本——不是你父母的续集，不是你子女的前传，更不是你朋友的外篇。对待生命你不妨大胆冒险一点，因为最终你要失去它。生命中最难的阶段不是没有人懂你，而是你不懂你自己。尼采  </p><hr><p>对谁都很温柔，就说明谁都不重要，明确到底谁才是最重要的，也是一种温柔吧。《请和废柴的我谈恋爱》</p><p>很多时候，优秀的人难以接受自己平庸，因为他们自省意识强，但能力又可能不足以改变现状。毕导</p><p>你对人情世故的每一分通透，对爱来爱去的每一分豁达，都是用失望换来的。傅首尔</p><p>人生在世，会遇到一些好事，还会遇上些坏事。好事我承受得起，坏事也承受得住。就这样坦荡荡做个寻常人也不坏。王小波</p><p>我决定不要再假装自己知道很多事情。我要成为我自己，渴望学习一切有待了解的东西。当你想显示自己是房间里最聪明的人时，就会什么东西都学不到了。芭芭拉·金索沃尔</p><p>没有人在修剪其生活之时会不割伤自己。勒内·夏尔</p><p>我最快乐的时候，是我既不思想也不向往的时候，甚至没有梦的时候。佩索阿</p><hr><p>你像风来了又走，我心满了又空。张爱玲 《半生缘》</p><p>一点点小事就可以安慰我们，因为一点点小事就可以刺痛我们。帕斯卡尔 《沉思录》</p><p>人类不快乐的唯一原因是他不知道如何安静地呆在他的房间里。帕斯卡 《思想录》</p><p>一个人如果刻意逃避他所惧怕的东西，也许会发现自己只是抄了条近路去见它。约翰·罗纳德·瑞尔·托尔金</p><p>做你自己，说出你的感受，因为那些介意的人对你不重要，而对你重要的人不会介意。苏斯博士</p><p>一个人里有两个我，一个在黑暗中醒着，一个在光明中睡着。卡里·纪伯伦 《沙与沫》</p><p>真正的英雄不是改变世界，而是改变自己生活的每一天。项飚 《把自己作为方法》</p><hr><p>答非所问，其实已经是答了。木心</p><p>交谈如果超过理解的限度可能就是一种破坏，一种炫耀。艾丽丝·门罗</p><p>周一到周五是出卖自己灵魂的日子，周六和周日是赎回自己灵魂的日子。 朱德庸</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;答非所问，其实已经是答了。木心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;浮现在天空中的月亮尽管一样，但我们看到的也许是另一个东西。村上春树 《1Q84》&lt;/p&gt;
&lt;p&gt;其实秋天不是秋天，秋天是夏天努力地想要停止下来的那段时光。简蔓&lt;/p&gt;</summary>
    
    
    
    <category term="句读" scheme="http://yonghong.tech/categories/%E5%8F%A5%E8%AF%BB/"/>
    
    
    <category term="句读" scheme="http://yonghong.tech/tags/%E5%8F%A5%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java基本数据类型以及缓存池</title>
    <link href="http://yonghong.tech/2020/10/java-ji-ben-shu-ju-lei-xing-yi-ji-huan-cun-chi/"/>
    <id>http://yonghong.tech/2020/10/java-ji-ben-shu-ju-lei-xing-yi-ji-huan-cun-chi/</id>
    <published>2020-10-28T03:00:00.000Z</published>
    <updated>2020-10-28T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Java的8种数据类型和他们的封装类，封装类数值范围，封装类的缓存池。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">byte/8</span><br><span class="line">char/16</span><br><span class="line">short/16</span><br><span class="line">int/32</span><br><span class="line">float/32</span><br><span class="line">long/64</span><br><span class="line">double/64</span><br><span class="line">boolean/~</span><br></pre></td></tr></table></figure><p>boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。</p><span id="more"></span><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱 调用了 Integer.valueOf(2)</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱 调用了 X.intValue()</span></span><br></pre></td></tr></table></figure><h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><table><thead><tr><th>类型</th><th>最大/小值</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>Integer</td><td>最大值</td><td>0x7fffffff</td><td>2 147 483 647</td></tr><tr><td>Integer</td><td>最小值</td><td>0x80000000</td><td>-2 147 483 648</td></tr><tr><td>Long</td><td>最大值</td><td>0x7fffffffffffffffL</td><td>9 223 372 036 854 775 807</td></tr><tr><td>Long</td><td>最小值</td><td>0x8000000000000000L</td><td>-9 223 372 036 854 775 808</td></tr><tr><td>Float</td><td>最大值</td><td>0x1.fffffeP+127f</td><td>3.4028235e+38f</td></tr><tr><td>Float</td><td>最小值</td><td>0x0.000002P-126f</td><td>1.4e-45f</td></tr><tr><td>Double</td><td>最大值</td><td>0x1.fffffffffffffP+1023</td><td>1.7976931348623157e+308</td></tr><tr><td>Double</td><td>最小值</td><td>0x0.0000000000001P-1022</td><td>4.9e-324</td></tr></tbody></table><p>另外 <code>java.math</code> 包中还有 <code>BigInteger</code> 和 <code>BigDecimal</code> 类型，基本上是任意精度的，极限就是你机器的上限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0x7fffffff = 2147483647</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x80000000 = -2147483648</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x7fffffffffffffffL = 9223372036854775807</span></span><br><span class="line">System.out.println(Long.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x8000000000000000L = -9223372036854775808</span></span><br><span class="line">System.out.println(Long.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1.fffffeP+127f = 3.4028235e+38f</span></span><br><span class="line">System.out.println(Float.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x0.000002P-126f = 1.4e-45f</span></span><br><span class="line">System.out.println(Float.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1.fffffffffffffP+1023 = 1.7976931348623157e+308</span></span><br><span class="line">System.out.println(Double.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x0.0000000000001P-1022 = 4.9e-324</span></span><br><span class="line">System.out.println(Double.MIN_VALUE);</span><br></pre></td></tr></table></figure><h2 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h2><p>基本类型对应的缓冲池如下：</p><ul><li>boolean values true and false</li><li>all byte values</li><li>short values between -128 and 127</li><li>int values between -128 and 127</li><li>char in the range \u0000 to \u007F</li></ul><p>在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲池范围内，就可以直接使用缓冲池中的对象。</p><p>在 jdk 1.8 所有的数值类缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 - 128，上界默认是 127，但是这个上界是可调的，在启动 jvm 的时候，通过 -XX:AutoBoxCacheMax=<size> 来指定这个缓冲池的大小，该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ByteCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> Byte[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Byte((<span class="keyword">byte</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CharacterCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Character((<span class="keyword">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Short"><a href="#Short" class="headerlink" title="Short"></a>Short</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ShortCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Short cache[] = <span class="keyword">new</span> Short[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Short((<span class="keyword">short</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer[] cache;</span><br><span class="line">    <span class="keyword">static</span> Integer[] archivedCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load IntegerCache.archivedCache from archive, if possible</span></span><br><span class="line">        VM.initializeFromArchive(IntegerCache.class);</span><br><span class="line">        <span class="keyword">int</span> size = (high - low) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the archived cache if it exists and is large enough</span></span><br><span class="line">        <span class="keyword">if</span> (archivedCache == <span class="keyword">null</span> || size &gt; archivedCache.length) &#123;</span><br><span class="line">            Integer[] c = <span class="keyword">new</span> Integer[size];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c.length; k++)</span><br><span class="line">                c[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">            archivedCache = c;</span><br><span class="line">        &#125;</span><br><span class="line">        cache = archivedCache;</span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LongCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LongCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Long cache[] = <span class="keyword">new</span> Long[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Long(i - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了Java的8种数据类型和他们的封装类，封装类数值范围，封装类的缓存池。&lt;/p&gt;
&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;byte/8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long/64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double/64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean/~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://yonghong.tech/tags/Java/"/>
    
    <category term="基本数据累心" scheme="http://yonghong.tech/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B4%AF%E5%BF%83/"/>
    
    <category term="包装类" scheme="http://yonghong.tech/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
    <category term="封装类" scheme="http://yonghong.tech/tags/%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    
    <category term="缓存池" scheme="http://yonghong.tech/tags/%E7%BC%93%E5%AD%98%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第4期 | 2020年10月26日</title>
    <link href="http://yonghong.tech/weekly-004/"/>
    <id>http://yonghong.tech/weekly-004/</id>
    <published>2020-10-26T02:24:00.000Z</published>
    <updated>2020-10-26T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s">基本功 | Java即时编译器原理解析及实践<i class="fa fa-external-link-alt"></i></span><br>跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。</li></ul><span id="more"></span><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnlvdXphbi5jb20veW91LXphbi1iYW8tbGkteWUtd3UtamlhLWdvdS1zaGUtamkteXUtc2hpLWppYW4v">有赞保理业务架构设计与实践<i class="fa fa-external-link-alt"></i></span><br>为保障消费者权益，有赞提供基础消费保障服务。买家确认收货后，资金才可结算到卖家店铺余额，普遍的结算周期在7天左右。从商家的角度出发，结算账期的产生使得资金周转变慢，这为扩大生产交易规模制造了困难。于是快速回款产品应运而生，有赞通过引入保理机构，以应收账款保理转让的模式来帮助商家实现资金快速回笼。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWZZRzdUZ0ZLMHJSTjcwY3ZJb1ByUQ==">低代码在爱奇艺鹊桥数据同步平台的实践<i class="fa fa-external-link-alt"></i></span><br>本文结合爱奇艺App后端在业务数据同步方面的实践，分享基于低代码平台高效交付业务需求及避免重复开发的经验。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWF4QW5XZlZxZTNtTTBiSEZWVjVHZw==">软件开发必修课：你该知道的GRASP职责分配模式<i class="fa fa-external-link-alt"></i></span><br>阿里妹导读：软件开发为什么需要职责驱动设计（RDD）？职责应该如何分配？如何结合架构模式在实际开发中实践落地？本文介绍一种通用的职责分配模式——GRASP，通过举例详解GRASP的几大原则，并分享两个实际运用的案例。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="携程技术沙龙——大数据与AI技术实践"><a href="#携程技术沙龙——大数据与AI技术实践" class="headerlink" title="携程技术沙龙——大数据与AI技术实践"></a><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENUQUx3OTFJRGd5a2V3eW9HSmsyUQ==">携程技术沙龙——大数据与AI技术实践<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENUQUx3OTFJRGd5a2V3eW9HSmsyUQ==">https://mp.weixin.qq.com/s/DCTALw91IDgykewyoGJk2Q<i class="fa fa-external-link-alt"></i></span></p><ul><li>10月27日 19:00-20:00 Trip全球化指标平台建设 协程曾荣军</li><li>11月3日 19:00-20:00 大数据离在线混合部署技术方案 腾讯高廉墀</li><li>11月10日 19:00-20:00 携程机器翻译技术 携程余谦</li><li>11月17日 19:00-20:00 智能写稿技术在58部落内容社区的应用实践 58同城李忠</li></ul><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzAubWQ=">科技爱好者周刊（第 130 期）：低龄化的互联网<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2Ni5tZA==">Go语言爱好者周刊：第 66 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDE5Lm1k">2020.10.19 - The Developer Experience Gap<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMy0yMDIwLjEwLjI2Lm1k">老司机 iOS 周报 #133 | 2020-10-26<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQyLmh0bWw=">R Weekly 2020-42 Climate animation, NNMF in soccer, and Raspberry Pi with R<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s&quot;&gt;基本功 | Java即时编译器原理解析及实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    <category term="即时编译" scheme="http://yonghong.tech/tags/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91/"/>
    
    <category term="数据同步" scheme="http://yonghong.tech/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
    <category term="平台架构" scheme="http://yonghong.tech/tags/%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84/"/>
    
    <category term="有赞" scheme="http://yonghong.tech/tags/%E6%9C%89%E8%B5%9E/"/>
    
    <category term="RDD" scheme="http://yonghong.tech/tags/RDD/"/>
    
    <category term="架构" scheme="http://yonghong.tech/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="设计模式" scheme="http://yonghong.tech/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL核心应用开发规范</title>
    <link href="http://yonghong.tech/2020/10/mysql-he-xin-ying-yong-kai-fa-gui-fan/"/>
    <id>http://yonghong.tech/2020/10/mysql-he-xin-ying-yong-kai-fa-gui-fan/</id>
    <published>2020-10-25T09:00:00.000Z</published>
    <updated>2020-10-25T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL核心应用开发规范总结起来有三点：表越窄越好，表越小越好，请求够高效，接下来详细解释一下这三点。</p><h2 id="表越窄越好"><a href="#表越窄越好" class="headerlink" title="表越窄越好"></a>表越窄越好</h2><p>设计表字段的时候，选择的数据类型够用就行。</p><ul><li>存储账号名（长度≤30）就没必要 varchar(255)</li><li>Unix时间戳，可以使用无符号整型（INT UNSIGNED）</li><li>IPv4地址，也可以使用无符号整型（INET_AOTN()和INET_NTOA()函数）</li></ul><p>可以通过执行 show table status 来查看表的统计信息：</p><ul><li>Avg_row_length 值超过100字节</li><li>Data_free 值大于0说明表存在碎片</li></ul><span id="more"></span><h2 id="表越小越好"><a href="#表越小越好" class="headerlink" title="表越小越好"></a>表越小越好</h2><p>真正“好”的架构：</p><ul><li>让我们线上的业务表，它的数据量尽可能小</li><li>热表数据量足够小，IO操作代价更小（分库分表，冷热数据分离，窄表5000万，宽表50万）</li></ul><h2 id="请求够高效"><a href="#请求够高效" class="headerlink" title="请求够高效"></a>请求够高效</h2><p>事务要尽快的提交/回滚</p><p>修改/删除数据 ——&gt; 锁定数据行</p><p>表锁 未释放导致其他SQL或事务被阻塞</p><p>捕获长时间未提交的SQL或事务</p><ul><li>监控MySQL的线程状态</li><li>监控InnoDB的事务状态</li><li>设置时长超过5秒告警</li><li>设置锁表行数大于10告警</li><li>检查或者监控SQL注入的风险（SLEEP()函数，UNION ALL请求）</li></ul><h2 id="其他重要细节"><a href="#其他重要细节" class="headerlink" title="其他重要细节"></a>其他重要细节</h2><h3 id="schema设计原则"><a href="#schema设计原则" class="headerlink" title="schema设计原则"></a>schema设计原则</h3><p>1.尽量小的原则<br>2.禁止使用外键——增加行锁<br>3.自增INT/BIGINT主键（InnoDB引擎表如果使用char或者uuid作为主键，会导致数据存储的顺序离散随机，影响性能）<br>4.字符集和库表的设计要一致，MySQL实例，database，table，column，存储过程，event，都要保持一致<br>5.MySQL尽量高效的建议</p><ul><li><p>单表</p><ul><li>①单表的数据量尽量不要超过5000万</li><li>②单表的物理大小尽量不要超过20G</li><li>③索引的数量不要超过5个</li></ul></li><li><p>实例</p><ul><li>①总的大小不要超过500G</li><li>②总表数量不要超过5000个（包含分区）</li></ul><p>有一个例子是t1表是utf8mb4编码（四个字节），t2是utf8编码（三个字节）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `c1` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `c2` <span class="type">varchar</span>(<span class="number">270</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c3` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c4` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">  KEY `int_col` (`c1`),</span><br><span class="line">  KEY `char_col` (`c2`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t2` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `c1` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `c2` <span class="type">varchar</span>(<span class="number">270</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c3` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c4` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">  KEY `int_col` (`c1`),</span><br><span class="line">  KEY `char_col` (`c2`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>当两个表做join时，select t1 后c2是4个字节的编码，带入t2后，无法使用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.c2 <span class="operator">=</span> t2.c2 <span class="keyword">where</span> t1.id <span class="operator">&gt;</span> <span class="number">500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t2    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> <span class="keyword">join</span> buffer (Block Nested Loop) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>当把t2的编码也改成utf8mb4后，可以正常使用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.c2 <span class="operator">=</span> t2.c2 <span class="keyword">where</span> t1.id <span class="operator">&gt;</span> <span class="number">500</span>;                                                                                           <span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>        <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t2    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> char_col      <span class="operator">|</span> char_col <span class="operator">|</span> <span class="number">1082</span>    <span class="operator">|</span> demo.t1.c2 <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="库表字段设计规范"><a href="#库表字段设计规范" class="headerlink" title="库表字段设计规范"></a>库表字段设计规范</h3><p>1.每个表建议不要超过50个字段<br>2.优先选择utf8mb4字符集<br>3.严谨在数据库中明文存储用户的一些核心数据（密码，身份证号等，自己定义加密算法）<br>4.用好INT数据类型（UNSIGNED，金额用途——扩大N倍使用bigint）<br>5.遇到大对象数据类型（BLOB、TEXT）字段，尽量拆出去，再用主键做关联<br>6.字符类型尽可能使用varchar的数据类型（同长度更新）<br>7.日期数据数据建议采用datetime数据类型（datetime类型 0000-9999年，timestamp类型 1970-2038）</p><h3 id="SQL开发的建议"><a href="#SQL开发的建议" class="headerlink" title="SQL开发的建议"></a>SQL开发的建议</h3><p>1.多表JOIN时，JOIN列的数据类型要一致<br>2.多表JOIN时，把过滤后结果集较小的表作为驱动表（或者使用 inner join 让优化器去做优化）<br>3.在查询的where条件中用上函数或表达式要用8.0版本<br>4.不要看到where条件中出现的列就直接创建索引<br>5.尽可能不要去执行select *操作<br>6.不要执行LIKE ‘%x%’<br>7.尽可能不要用 “!=” 条件<br>8.如果能确定返回结果数量的话最好加上 LIMIT N，优化器通常会再进一步优化，参考<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2xpbWl0LW9wdGltaXphdGlvbi5odG1s">LIMIT优化<i class="fa fa-external-link-alt"></i></span><br>9.优先使用UNION ALL，代替UNION<br>10.所有的SQL都要通过SQL审核系统检查，符合标准后才能上线</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL核心应用开发规范总结起来有三点：表越窄越好，表越小越好，请求够高效，接下来详细解释一下这三点。&lt;/p&gt;
&lt;h2 id=&quot;表越窄越好&quot;&gt;&lt;a href=&quot;#表越窄越好&quot; class=&quot;headerlink&quot; title=&quot;表越窄越好&quot;&gt;&lt;/a&gt;表越窄越好&lt;/h2&gt;&lt;p&gt;设计表字段的时候，选择的数据类型够用就行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储账号名（长度≤30）就没必要 varchar(255)&lt;/li&gt;
&lt;li&gt;Unix时间戳，可以使用无符号整型（INT UNSIGNED）&lt;/li&gt;
&lt;li&gt;IPv4地址，也可以使用无符号整型（INET_AOTN()和INET_NTOA()函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过执行 show table status 来查看表的统计信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avg_row_length 值超过100字节&lt;/li&gt;
&lt;li&gt;Data_free 值大于0说明表存在碎片&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://yonghong.tech/tags/MySQL/"/>
    
    <category term="开发规范" scheme="http://yonghong.tech/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>微服务基础设施搭建必做的 4 件事</title>
    <link href="http://yonghong.tech/2020/10/wei-fu-wu-ji-chu-she-shi-da-jian/"/>
    <id>http://yonghong.tech/2020/10/wei-fu-wu-ji-chu-she-shi-da-jian/</id>
    <published>2020-10-24T09:00:00.000Z</published>
    <updated>2020-10-24T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式系统中进程如何通信"><a href="#分布式系统中进程如何通信" class="headerlink" title="分布式系统中进程如何通信"></a>分布式系统中进程如何通信</h2><p>由传统的函数调用变成跨网络的进程间通信(RPC)，通信中间件需要屏蔽复杂性，需要关注以下4点</p><ul><li>公司的多语言诉求（多种语言需要要避开语言绑定的RPC框架）</li><li>性能方面 序列化协议</li><li>业务长期演进中通信框架替换成本</li><li>考虑通信框架背后的微服务组件生态是否完整（配置管理，服务发现，断路器，负载均衡）</li></ul><p>RPC通讯框架的4个实践经验：</p><ul><li>公司作战需要规范（趁早规范化、标准化）</li><li>具备服务异常保护机制（a.过载保护，节点，接口等，b.异常故障压制，弱化依赖，默认值，降级）</li><li>健壮的集群间容错策略（a.流量容错，b.调用端对端服务节点状态感知）</li><li>多样的调用方式支持多样的业务场景（异步，OneWay）</li></ul><span id="more"></span><h2 id="服务集群中节点和流量如何管理"><a href="#服务集群中节点和流量如何管理" class="headerlink" title="服务集群中节点和流量如何管理"></a>服务集群中节点和流量如何管理</h2><p>问题一：单体应用中函数调用是基于内存中函数地址寻址，服务化后调用端如何找到对端节点？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-16-48-IMG_0034-NbTskD.PNG" alt="服务注册中心原理图"></p><p>问题二：服务端扩容，调用端如何发现新节点并进行负载均衡？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0035-DBxxWH.PNG" alt="服务扩容原理图"></p><p>问题三：服务端个别节点宕机，如何自动使其失效避免调用端继续调用报错？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0036-78o40S.PNG" alt="异常节点摘除原理图"></p><p>场景一：单节点业务异常时，需要快速禁用异常节点。<br>场景二：对于服务发布时灰度的节点，期望降低其流量比例。<br>场景三：业务在多地域部署时，期望支持同地域优先级等个性化的路由策略。</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0037-9Q0Knr.PNG" alt="路由策略原理图"></p><p>技术选型</p><ul><li>经验一：系统要适当弱化对注册中心的依赖</li><li>经验二：趁早减少不必要的数据交互，规划扩容方案</li><li>经验三：有限保证可用性而非一致性（注册中心定位为AP系统而非CP系统）</li></ul><h2 id="系统复杂化后如何快速发现与定位异常"><a href="#系统复杂化后如何快速发现与定位异常" class="headerlink" title="系统复杂化后如何快速发现与定位异常"></a>系统复杂化后如何快速发现与定位异常</h2><p>分布式系统监控的三大利器：</p><ul><li>集中式的log日志系统</li><li>metrics指标系统</li><li>分布式链路追踪tracing</li></ul><p>推荐文章：Metrics, tracing, and logging</p><h2 id="微服务拆分后团队组织如何变化"><a href="#微服务拆分后团队组织如何变化" class="headerlink" title="微服务拆分后团队组织如何变化"></a>微服务拆分后团队组织如何变化</h2><p>问题：按技术能力组织团队，协作效率低、不聚集导致专业度有限</p><p>建议：</p><ul><li>按业务职能组织团队，聚集所属业务与产品</li><li>规模到一定程度，建设独立的基础技术团队</li></ul><hr><p>1024 程序员节快乐！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分布式系统中进程如何通信&quot;&gt;&lt;a href=&quot;#分布式系统中进程如何通信&quot; class=&quot;headerlink&quot; title=&quot;分布式系统中进程如何通信&quot;&gt;&lt;/a&gt;分布式系统中进程如何通信&lt;/h2&gt;&lt;p&gt;由传统的函数调用变成跨网络的进程间通信(RPC)，通信中间件需要屏蔽复杂性，需要关注以下4点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司的多语言诉求（多种语言需要要避开语言绑定的RPC框架）&lt;/li&gt;
&lt;li&gt;性能方面 序列化协议&lt;/li&gt;
&lt;li&gt;业务长期演进中通信框架替换成本&lt;/li&gt;
&lt;li&gt;考虑通信框架背后的微服务组件生态是否完整（配置管理，服务发现，断路器，负载均衡）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RPC通讯框架的4个实践经验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司作战需要规范（趁早规范化、标准化）&lt;/li&gt;
&lt;li&gt;具备服务异常保护机制（a.过载保护，节点，接口等，b.异常故障压制，弱化依赖，默认值，降级）&lt;/li&gt;
&lt;li&gt;健壮的集群间容错策略（a.流量容错，b.调用端对端服务节点状态感知）&lt;/li&gt;
&lt;li&gt;多样的调用方式支持多样的业务场景（异步，OneWay）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="分布式" scheme="http://yonghong.tech/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="微服务" scheme="http://yonghong.tech/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="RPC" scheme="http://yonghong.tech/tags/RPC/"/>
    
  </entry>
  
</feed>
