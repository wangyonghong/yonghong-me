<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永红的互联网手记</title>
  
  <subtitle>我相信好代码和好产品改变世界！</subtitle>
  <link href="http://yonghong.tech/atom.xml" rel="self"/>
  
  <link href="http://yonghong.tech/"/>
  <updated>2020-12-07T02:24:00.000Z</updated>
  <id>http://yonghong.tech/</id>
  
  <author>
    <name>王永红(Micheal Wang)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术爱好者周刊 第10期 | 2020年12月07日</title>
    <link href="http://yonghong.tech/weekly-010/"/>
    <id>http://yonghong.tech/weekly-010/</id>
    <published>2020-12-07T02:24:00.000Z</published>
    <updated>2020-12-07T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOC9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMS8=">ClickHouse集群搭建（一）<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOS9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMi8=">ClickHouse集群搭建（二）<i class="fa fa-external-link-alt"></i></span><br>ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。</li><li><span class="exturl" data-url="aHR0cDovL2dlbmVyYWx0aGluay5naXRodWIuaW8vMjAyMC8xMS8yMy9hYm91dC1SZWVudHJhbnRMb2NrLXByb2JsZW1zLw==">ReentrantLock 的这几个问题，你都知道吗？<i class="fa fa-external-link-alt"></i></span><br>之前分析 AQS 的时候，了解到 AQS 依赖于内部的两个 FIFO 队列来完成同步状态的管理，当线程获取锁失败的时候，会将当前线程以及等待状态等信息构造成 Node 对象并将其加入同步队列中，同时会阻塞当前线程。当释放锁的时候，会将首节点的 next 节点唤醒 (head 节点是虚拟节点)，使其再次尝试获取锁。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvc2VydmljZS1tZXNoLWluLW1laXR1YW4uaHRtbA==">复杂环境下落地Service Mesh的挑战与实践<i class="fa fa-external-link-alt"></i></span><br>在私有云集群环境下建设 Service Mesh ，往往需要对现有技术架构做较大范围的改造，同时会面临诸如兼容困难、规模化支撑技术挑战大、推广困境多等一系列复杂性问题。本文会系统性地讲解在美团在落地 Service Mesh 过程中，我们面临的一些挑战及实践经验，希望能对大家有所启发或者帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxNDc5MTkwMjQ0MDk4MDYy">CDN工作原理及其在淘宝图片业务中的应用<i class="fa fa-external-link-alt"></i></span><br>淘宝的图片访问，有98%的流量都走了CDN缓存，只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。今年双11，淘宝鹿班的主图价格表达升级项目，就面临了这种挑战，让我们看看是如何解决的吧。<a id="more"></a></li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvY2lrbS0yMDIwLW5scC5odG1s">CIKM 2020 | 一文详解美团6篇精选论文<i class="fa fa-external-link-alt"></i></span><br>AI平台/搜索与NLP部/NLP中心/知识图谱组共有六篇论文（其中4篇长文，2篇短文）被国际会议CIKM2020接收，这些论文是知识图谱组在多模态知识图谱、MT-BERT、Graph Embedding和图谱可解释性等方向上的技术沉淀和应用。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="第十一届中国数据库技术大会（DTCC2020）"><a href="#第十一届中国数据库技术大会（DTCC2020）" class="headerlink" title="第十一届中国数据库技术大会（DTCC2020）"></a>第十一届中国数据库技术大会（DTCC2020）</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL2R0Y2MuaXQxNjguY29tLw==">http://dtcc.it168.com/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2020年12月21日 ~ 1010年12月23日</p><p>2020年12月21日~12月23日，由 IT168 旗下 ITPUB 企业社区平台主办的第十一届中国数据库技术大会（DTCC2020），将在北京隆重召开。大会以“架构革新 高效可控”为主题，设置2大主会场，20+技术专场，将邀请超百位行业专家，重点围绕数据架构、AI与大数据、传统企业数据库实践和国产开源数据库等内容展开分享和探讨，为广大数据领域从业人士提供一场年度盛会和交流平台。</p><p>为了帮助更多企业落地数据项目实施方案，今年将继续开设多门深度培训课程，内容涵盖数据中台、去IOE实践、区块链技术、内核开发实践等。3天传统技术演讲+1天深度主题，将汇聚各行业精英、技术领袖、行业专家和数据英雄，带来超过100场主题演讲和超5场培训课程的头脑风暴，诚邀您的加入。</p><p>历经十年的积累与沉淀，如今的DTCC已然成为国内数据库领域的技术风向标，见证了整个行业的发展与演变。作为顶级的数据领域技术盛会，DTCC2020将继续秉承一贯的干货分享和实践指导原则，期待大家的热情参与！</p><h3 id="第十届PostgreSQL中国技术大会"><a href="#第十届PostgreSQL中国技术大会" class="headerlink" title="第十届PostgreSQL中国技术大会"></a>第十届PostgreSQL中国技术大会</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3BnY29uZjIwMjAucG9zdGdyZXMuY24v">http://pgconf2020.postgres.cn/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2021年1月15日 ~ 2021年1月16日</p><p>2021年1月15～1月16日，由 PostgreSQL 中文社区主办的第十届《PostgreSQL 中国技术大会》将在南京索菲特银河大酒店现场隆重举办。</p><p>PostgreSQL 作为功能最强的的开源关系型数据库之一，得到了越来越多企业的推广和运用，也越来越受到广大技术爱好者的欢迎和重视。</p><p>本次大会以“开源，自研，新机遇”为主题。除了设立一个主会场外，还设立了多个分会场。大会汇聚了来自互联网、电商、教育，金融等各行业领域的专家，这将是 PostgreSQL 发展史上的又一次交流盛会。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzYubWQ=">科技爱好者周刊（第 136 期）：利特伍德奇迹定律<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3Mi5tZA==">Go语言爱好者周刊：第 72 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTMwLm1k">2020.11.30 - FrontPage: The Good, The Bad, and The Ugly<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjEyLjA3Lm1k">老司机 iOS 周报 #138 | 2020-12-07<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ4Lmh0bWw=">R Weekly 2020-48 Your first R package, magrittr, engineering Shiny<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOC9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMS8=&quot;&gt;ClickHouse集群搭建（一）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOS9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMi8=&quot;&gt;ClickHouse集群搭建（二）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2dlbmVyYWx0aGluay5naXRodWIuaW8vMjAyMC8xMS8yMy9hYm91dC1SZWVudHJhbnRMb2NrLXByb2JsZW1zLw==&quot;&gt;ReentrantLock 的这几个问题，你都知道吗？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;之前分析 AQS 的时候，了解到 AQS 依赖于内部的两个 FIFO 队列来完成同步状态的管理，当线程获取锁失败的时候，会将当前线程以及等待状态等信息构造成 Node 对象并将其加入同步队列中，同时会阻塞当前线程。当释放锁的时候，会将首节点的 next 节点唤醒 (head 节点是虚拟节点)，使其再次尝试获取锁。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvc2VydmljZS1tZXNoLWluLW1laXR1YW4uaHRtbA==&quot;&gt;复杂环境下落地Service Mesh的挑战与实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在私有云集群环境下建设 Service Mesh ，往往需要对现有技术架构做较大范围的改造，同时会面临诸如兼容困难、规模化支撑技术挑战大、推广困境多等一系列复杂性问题。本文会系统性地讲解在美团在落地 Service Mesh 过程中，我们面临的一些挑战及实践经验，希望能对大家有所启发或者帮助。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxNDc5MTkwMjQ0MDk4MDYy&quot;&gt;CDN工作原理及其在淘宝图片业务中的应用&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;淘宝的图片访问，有98%的流量都走了CDN缓存，只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。今年双11，淘宝鹿班的主图价格表达升级项目，就面临了这种挑战，让我们看看是如何解决的吧。</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>欧陆词典每日一句-2020年11月</title>
    <link href="http://yonghong.tech/eudic-2020-11/"/>
    <id>http://yonghong.tech/eudic-2020-11/</id>
    <published>2020-11-30T12:00:00.000Z</published>
    <updated>2020-11-30T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。</p></blockquote><hr><p>If I were you, I wouldn’t worry about it. 如果我是你，我不会为此而担忧。</p><p>They worked hard at whatever they did, but they had a sense of achievement. 无论做什么，他们都很努力，有一种成就感。</p><p>A company should find ways to innovate not just in products but also in functions, business models and processes. 一个公司要寻求的不仅仅是产品创新，还应寻求运营、商业模式和流程方面的创新。</p><a id="more"></a><p>I just trust that the principle of reciprocity is true, and I give what I want. 我相信互利互惠的原则，我想要得到就要付出。</p><p>Most successful people are unorthodox persons whose minds wander outside traditional ways of thinking. 大多数成功的人都并非遵循传统之人，他们的思维方式都游离在传统的思维方式之外。</p><p>Curriculums — from grammar school to college, should evolve to focus less on memorizing facts and more on creativity and complex communication. 从语法学校到大学的课程，都应该逐渐发展，更多地注重创新和复杂的交流，而不是把重点放在记忆事实上。</p><p>Gradually it became dark outside. The rain was still beating on the windows, and I could hear the wind in the trees. 外面的天渐渐黑了。雨点仍然拍打着窗户，还可以听到风在树枝间呼啸。</p><hr><p>Almost all companies recognize the importance of innovation today. 如今，几乎所有的公司都知道创新的重要性。</p><p>I wish you well. You have my best wishes. 我祝福你。向你致以最好的祝愿。</p><p>Too much happiness can be destructive. 乐极也会生悲。</p><p>If you can speak the language, it’s easier to get to know the country and its people. 如果会说当地语言，了解这个国家和人民就会更加容易。</p><p>Truly my favorite part is to see the kids jumping up and down and they just get so excited. 我最喜欢的就是看着孩子们兴奋地蹦蹦跳跳。</p><p>People are curious by nature. 人类天性好奇。</p><p>They believed in goodness, in community, and helping one another. 他们信仰美德，信仰团体，信仰互助。</p><hr><p>In my line of work, I receive a lot of emails. I also send a lot of emails. 在我的职业生涯中，我收到过不少电子邮件，也发出去不少。</p><p>Your joy for life, transmitted wherever you took your smile, and the sparkle in those unforgettable eyes. 你对生活的欣喜，通过你的微笑和你令人难忘的双眸中的闪光，传遍了你的所到之处。</p><p>Use your voice to speak out for what’s right. 用你的影响力去为正义发声。</p><p>All kinds of myths surround the lives of well-known people. 名人的生活总是被各种各样的荒诞故事所围绕。</p><p>Demand is rising rapidly, because of the world’s increasing population and expanding industry. 需求量正在激增，因为整个世界人口急剧增长，工业规模不断扩大。</p><p>If I could go back in history and live when I liked, I wouldn’t go back very far. 如果我能回到过去并生活在我喜欢的年代，我不会选很久以前。</p><p>You might imagine the job you will get when you finish school. 你可能会设想自己毕业后从事的工作。</p><hr><p>We often use slang expressions when we talk, because they are so vivid and colorful. 我们说话时会经常使用俚语，因为俚语很生动、很丰富多彩。</p><p>You need to recognize each step of progress you take towards achieving your goals. 你成功路上的每一点进步都值得自己的认可。</p><p>With a lot of hard work and a good education, anything is possible. 只要你愿意努力工作，努力接受教育，任何事情都是可能的。</p><p>Think of an email as a letter. Spelling, grammar and punctuation should not be overlooked. 把编辑电子邮件当成在写信，拼写、语法、标点都不应忽视。</p><p>The ability to work well with others and collaborate on projects is a sought-after ability in nearly every position. 对于任何职位，与他人保持良好的合作关系，可以进行有效的项目合作，这些对职场人来说都是倍受追捧的能力。</p><p>I like to collect bits and pieces from different parts of the world. 我喜欢在世界各地搜集点点滴滴的东西。</p><p>I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。</p><hr><p>A well-organized essay will group similar ideas together and put them in the proper order. 一篇条理清晰的文章会把相似的观点组织在一起，并按适当的顺序排列。</p><p>Wherever you go and for whatever reason, it’s important to be safe. 不论你去哪，因为什么原因，安全都很重要。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I have to make a difficult choice. Decide quickly. 我必须做一个艰难的选择。那就是迅速做出决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;If I were you, I wouldn’t worry about it. 如果我是你，我不会为此而担忧。&lt;/p&gt;
&lt;p&gt;They worked hard at whatever they did, but they had a sense of achievement. 无论做什么，他们都很努力，有一种成就感。&lt;/p&gt;
&lt;p&gt;A company should find ways to innovate not just in products but also in functions, business models and processes. 一个公司要寻求的不仅仅是产品创新，还应寻求运营、商业模式和流程方面的创新。&lt;/p&gt;</summary>
    
    
    
    <category term="学英语" scheme="http://yonghong.tech/categories/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="http://yonghong.tech/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="学英语" scheme="http://yonghong.tech/tags/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="欧陆词典" scheme="http://yonghong.tech/tags/%E6%AC%A7%E9%99%86%E8%AF%8D%E5%85%B8/"/>
    
    <category term="每日一句" scheme="http://yonghong.tech/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>句读-2020年11月</title>
    <link href="http://yonghong.tech/judou-2020-11/"/>
    <id>http://yonghong.tech/judou-2020-11/</id>
    <published>2020-11-30T10:00:00.000Z</published>
    <updated>2020-11-30T10:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​</p></blockquote><hr><p>生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度。 ​​​​中村恒子</p><p>如果一个人必须完成一件自己不喜欢的事，最好的办法就是尽快做好，然后结束。迟子建</p><p>无论风暴将我带到什么样的岸边，我都将以主人的身份上岸。贺拉斯</p><a id="more"></a><p>有的人走了就再也没回来过，所以，等待和犹豫才是这个世界上最无情的杀手。三毛</p><p>你总是喜欢把事情拖到第二天，你不能再这么拖了，因为有一天，你会有很多事要做，你的余生都不够你用。《余生的第一天》</p><p>很多时候，并不是别人在折磨我们，而是我们用自己的价值观去评判对方的是非对错，是我们在折磨自己。铃木大拙</p><p>我太想爱上一个人了，只是不知道该爱谁。《木兰花》</p><hr><p>语言和文字真的是不可执取的东西，当一句话说出来或者写下来，它就不是你的了，你必须允许别人任意解读，甚至误读。所以我最想说的话，其实在我开口的一刹那就已经说完。扎西朗姆·多多</p><p>当没有任何一个人信任你的时候，沉默和坚持就是最好的反击和证明。托马斯·哈里斯 《沉默的羔羊》</p><p>你形容自己是随和、好相处又安分守己的人，所以你要不就是非常随和，要不就是极度与人疏离。《大小谎言》</p><p>我渴望拥抱你，对你说一千句温柔的蠢话，然这样的话只能在纸上我才能好意思写写，即使在想象中我见了你也将羞愧低头，你是如此可爱而残忍。朱生豪 《醒来觉得甚是爱你》</p><p>我们必须全力以赴，同时又不抱持任何希望。不管做什么事，都要当它是全世界最重要的一件事，但同时又知道这件事根本无关紧要。里尔克</p><p>我们要的或许不是爱，而是偏爱，从他人的偏爱里，确认自己是独特的。只有这样，才能消解在芸芸众生中的孤独。苏更生</p><p>世界上最让人感动的，是遥远的相似性。霍金</p><hr><p>假如您此时此刻刚好陷入了困境，正饱受折磨，那么我很想告诉您：“尽管眼下十分艰难，可日后这段经历说不定就会开花结果。”也不知道这话能否成为慰藉，不过请您这样换位思考、奋力前行。村上春树</p><p>我去练习，去训练，就是避免自己过度思考。平野步梦</p><p>我不会再尝试成为真实的我以外的东西了，我希望你能接受这样的我。《她》</p><p>人的本能是追逐从他身边飞走的东西，却逃避追逐他的东西。伏尔泰</p><p>有教养不是吃饭不洒汤，是别人洒汤的时候别去看他。契诃夫</p><p>能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​</p><p>生活给了我想要的东西，又让我知道这都是没有意义的。</p><hr><p>若有人能让你体会到心碎狂喜和一败涂地，那伟大的并不是他而是你自己。琦殿</p><p>人的一生中，最光辉的一天并非是功成名就那天，而是从悲叹与绝望中产生对人生的挑战，以勇敢迈向意志那天。福楼拜</p><p>有时候，觉得所有人都很美好，下一刻，这些人又变得贪得无厌，而且世界冷酷无比，根本没有自己的立足之地。然而，这都是自己的内心产生的幻想。我们总是将自己内心的恐惧投射在他人身上，当我们看他人，或是看世界的时候，其实看到的是自己。石田衣良 《掌心迷路》</p><p>太在意别人的视线和评价，才会不断寻求别人的认可。对认可的追求，才扼杀了自由。由于不想被任何人讨厌，才选择了不自由的生活方式。换言之，自由就是不再寻求认可。阿德勒</p><p>在以后的日子里，如果我们在各自的道路上，能不时对望一眼，就好了。林清玄</p><p>我始终相信，一切高贵的情感都羞于表白，一切深刻的体验都拙于言辞。周国平</p><p>事实是，每个人都有可能伤害你。你只需要找到那些值得让你忍受的人。鲍勃·马利</p><hr><p>比起偶然的幸福感，充足的睡眠似乎有着更持久的治愈力。禾几</p><p>渺小的忧伤和渺小的爱寿命很长，伟大的爱和伟大的忧伤却毁于自身的过于丰富强烈。王尔德 《道林·格雷的画像》</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;能折磨你的，从来不是别人的绝情，而是你的心存幻想和期待。 ​​​​&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;生活如果没有目标，就会变得懒散。一旦决定“今天这样做”，生活一下子就会张弛有度。 ​​​​中村恒子&lt;/p&gt;
&lt;p&gt;如果一个人必须完成一件自己不喜欢的事，最好的办法就是尽快做好，然后结束。迟子建&lt;/p&gt;
&lt;p&gt;无论风暴将我带到什么样的岸边，我都将以主人的身份上岸。贺拉斯&lt;/p&gt;</summary>
    
    
    
    <category term="句读" scheme="http://yonghong.tech/categories/%E5%8F%A5%E8%AF%BB/"/>
    
    
    <category term="句读" scheme="http://yonghong.tech/tags/%E5%8F%A5%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第9期 | 2020年11月30日</title>
    <link href="http://yonghong.tech/weekly-009/"/>
    <id>http://yonghong.tech/weekly-009/</id>
    <published>2020-11-30T02:24:00.000Z</published>
    <updated>2020-11-30T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3ljMTk5NDY2Ni9wLzEwODMxMDM5Lmh0bWw=">Mysql 索引精讲<i class="fa fa-external-link-alt"></i></span><br>本文主要讲述常见索引类型(实现层面)、索引种类(应用层面)、聚簇索引与非聚簇索引、覆盖索引、最佳索引使用策略。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlR1aml0d2tNbDVMUmRiV0N4T0VHQQ==">京东到家MySQL容器化，为何首选Docker而非K8S？<i class="fa fa-external-link-alt"></i></span><br>本文根据詹乡泉老师在〖deeplus直播第250期〗线上分享演讲内容整理而成。（文末有获取本期PPT&amp;回放的方式，不要错过），分享视频：<span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9za1psTGhxRFVkYw==">https://youtu.be/skZlLhqDUdc<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWmE5ZVIwdE5qb1UzclRnNXhUWWdOQQ==">高德最佳实践：Serverless规模化落地有哪些价值？<i class="fa fa-external-link-alt"></i></span><br>曾经看上去很美、一直被观望的 Serverless，现已逐渐进入落地的阶段。今年的”十一出行节”，高德在核心业务规模化落地 Serverless，由 Serverless 支撑的业务在流量高峰期的表现十分优秀。传统应用也能带来同样的体验，那么 Serverless 的差异化价值又是什么呢？本文分享高德 Serverless 规模化落地背后的实践总结。</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFqaWFuL3AvMTEyMjM5OTIuaHRtbA==">Elasticsearch 技术分析（九）：全文搜索引擎Elasticsearch，这篇文章给讲透了！<i class="fa fa-external-link-alt"></i></span><br>本篇主要是基于之前的博文的一个总结，希望通过这篇文章能让读者大致了解Elasticsearch是做什么的以及它的使用和基本原理。</li></ul><a id="more"></a><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNDgzX2hlc1phbGFHUlBlYnp6NXRQQQ==">Android D8编译器“bug”导致Crash的问题排查<i class="fa fa-external-link-alt"></i></span><br>这篇文章主要是分析了一个因为 Android D8 编译器分配的寄存器不太合理，导致运行时 ART 抛出了 VerifyError 而 Crash 的问题，下文简单分析了下问题产生的原因以及我们采用的修复方案。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjYvY29uc2lzdGVuY3ktaW4tdWktZGVzaWduLmh0bWw=">移动端UI一致性解决方案<i class="fa fa-external-link-alt"></i></span><br>UI一致性是绝大部分研发团队面临的共性问题，大家对落地设计规范，提高UI中台能力，提升产研效率具有强烈的诉求。通过UI一致性的建设，不仅可以在品牌上实现体验升级，更可以全面提高产研效率，为业务的快速迭代提供有力支持和有效保障。统一的品牌符号、品牌特征，有助于加深产品在用户心目中的印象。统一的用户界面和交互形式，能帮助用户加深对产品的熟悉感和信任感。而一个好的设计语言可以在体验上为产品加分，也能够更好的创造一致性体验。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZGRUVXhRRUVuSWJfYjFQek5fSlJKQQ==">干货 | 响应式设计在携程火车票的应用<i class="fa fa-external-link-alt"></i></span><br>可能很多人脑海中已经出现了这样一个动画，当浏览器中页面尺寸不断变化时，内容也在随之变化。简单说，响应式网站设计是一种允许设计和代码响应设备屏幕大小的方法。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOUdqWEI5RXUtT1AzZklqZFFXS2tsZw==">UME - 丰富的Flutter调试工具<i class="fa fa-external-link-alt"></i></span><br>目前西瓜视频作者侧 Flutter 业务场景已经覆盖了 40多个页面 (包括视频播放场景)，用户侧核心场景包括我的 Tab 也已经是 Flutter，在开发过程中，暴露了一些问题，debug 调试难、离开了 IDE 后犹如抓瞎、PM 设计 QA 验收过程中拿不到有用的信息，在市面上找了一圈，也没有类似 iOS Flex 这样强大的调试工具，例如视图大小、层级的展示，实例对象属性的实时修改，网络请求抓取，log 日志打印，文件查看等，所以西瓜视频 Flutter 基础团队决定开发 UME。</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FyY2hpdGVjdHVyZS8xMTY4Ni8=">携程多语言平台-Shark系统的高可用演进之路<i class="fa fa-external-link-alt"></i></span><br>Shark是携程IBU国际化进程中孵化的集多语言内容管理、多语言翻译、多语言内容下发等功能为一体的多语言平台，目前为携程海外几十个站点和上千个业务应用提供稳定的多语言内容管理和下发服务。本文主要分享携程IBU多语言团队在提升系统稳定性过程中的一些实践和总结，希望给大家一些参考和帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk4NDk0ODE3NTYzOTAxOTYw">淘系面向业务价值的精细化流量管控实战-双11实录<i class="fa fa-external-link-alt"></i></span><br>本文将从背景问题、实战效果、设计思路与解法三个方面介绍马克尼(Marconi)在2020双11中，保障了淘系（淘宝、天猫等）核心业务平台（如 首页、会场、直播、互动、我的淘宝 等），多架构层次（从接入网关到业务应用集群/容器）管控业务流量并提升服务业务效果，给予用户顺滑的体验；提升了淘系(及阿里巴巴集团更多的BU)的稳定性底盘，成为应用稳定性保障的核心能力，推动了业界在大型分布式在线业务系统的高可用/稳定性保障进展。为今年双11创新纪录提供保障！</li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjcvc2VsZi1kcml2aW5nLWluLXNpbXVsYXRpb24tc3lzdGVtLmh0bWw=">美团无人车引擎在仿真中的实践<i class="fa fa-external-link-alt"></i></span><br>过去几年，自动驾驶技术有了飞速发展。国内也出现了许多自动驾驶创业企业，这些公司以百度开源项目Apollo为起点，大都可以直接进行公开道路测试，公开道路测试也成为促进技术进步的主要方法。基础问题得以解决之后，行业面临的更多是长尾问题，依靠路测驱动自动驾驶能力建设的方式变得不再高效，离线仿真的地位日益凸显。行业头部企业在仿真的投入十分巨大，Waymo公司2019年公布的仿真里程是100亿英里，是路测里程的1000倍。相应地，美团无人车团队在仿真上的投入也在逐渐增大。在仿真平台的建设中，团队发现公开道路测试和仿真测试看似相似，实际上差异巨大：在车载环境下，为了确保系统的稳定运行，通常要保证一定资源处于空闲状态；仿真环境则不同，如何高效利用资源，如何实现压榨资源的同时确保仿真结果与路测结果一致成为了关键目标。在应对这些挑战的过程中，美团提出了无人车引擎的概念，将车载与离线环境的差异隔离起来：功能模块无需任何更改便可以满足两种场景的需要。</li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRGtDR3Vzem5IOEY4cDM5b1JMdU5CUQ==">TensorFlow Serving 模型更新毛刺的完全优化实践<i class="fa fa-external-link-alt"></i></span><br>在点击率CTR（Click Through Rate）预估算法的推荐场景中使用 Tensorflow Serving热更新较大模型时会出现短暂的延时毛刺，导致业务侧超时，降低算法效果，为了解决这个问题，爱奇艺深度学习平台团队经过多个阶段的优化实践，最后对 TF Serving 和 Tensorflow 的源码进行深入优化，将模型热更新时的毛刺现象解决，本文将分享Tensorflow Serving的优化细节，希望对大家有帮助。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYW1lOVhMMjE4RksxRHVfYnkzX0w1QQ==">日志异常检测初步实践与探索<i class="fa fa-external-link-alt"></i></span><br>日志的主要目的是记录系统（包括服务和业务等）状态和重要的事件帮助定位系统的问题。日志对于理解系统状态和定位性能问题至关重要。因此，日志是在线监控和异常检测的一个重要信息源。在很多业务和服务的故障自愈过程中，日志异常检测与根因分析是必不可少的一环。但是之前我们通常都使用人工的方式来定位问题，主要包括人工检测与分析和人工学习错误日志提取正则表达式来进行故障定位这两种方式。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="第十一届中国数据库技术大会（DTCC2020）"><a href="#第十一届中国数据库技术大会（DTCC2020）" class="headerlink" title="第十一届中国数据库技术大会（DTCC2020）"></a>第十一届中国数据库技术大会（DTCC2020）</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL2R0Y2MuaXQxNjguY29tLw==">http://dtcc.it168.com/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2020年12月21日 ~ 1010年12月23日</p><p>2020年12月21日~12月23日，由 IT168 旗下 ITPUB 企业社区平台主办的第十一届中国数据库技术大会（DTCC2020），将在北京隆重召开。大会以“架构革新 高效可控”为主题，设置2大主会场，20+技术专场，将邀请超百位行业专家，重点围绕数据架构、AI与大数据、传统企业数据库实践和国产开源数据库等内容展开分享和探讨，为广大数据领域从业人士提供一场年度盛会和交流平台。</p><p>为了帮助更多企业落地数据项目实施方案，今年将继续开设多门深度培训课程，内容涵盖数据中台、去IOE实践、区块链技术、内核开发实践等。3天传统技术演讲+1天深度主题，将汇聚各行业精英、技术领袖、行业专家和数据英雄，带来超过100场主题演讲和超5场培训课程的头脑风暴，诚邀您的加入。</p><p>历经十年的积累与沉淀，如今的DTCC已然成为国内数据库领域的技术风向标，见证了整个行业的发展与演变。作为顶级的数据领域技术盛会，DTCC2020将继续秉承一贯的干货分享和实践指导原则，期待大家的热情参与！</p><h3 id="第十届PostgreSQL中国技术大会"><a href="#第十届PostgreSQL中国技术大会" class="headerlink" title="第十届PostgreSQL中国技术大会"></a>第十届PostgreSQL中国技术大会</h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3BnY29uZjIwMjAucG9zdGdyZXMuY24v">http://pgconf2020.postgres.cn/<i class="fa fa-external-link-alt"></i></span></p><p>会议时间：2021年1月15日 ~ 2021年1月16日</p><p>2021年1月15～1月16日，由 PostgreSQL 中文社区主办的第十届《PostgreSQL 中国技术大会》将在南京索菲特银河大酒店现场隆重举办。</p><p>PostgreSQL 作为功能最强的的开源关系型数据库之一，得到了越来越多企业的推广和运用，也越来越受到广大技术爱好者的欢迎和重视。</p><p>本次大会以“开源，自研，新机遇”为主题。除了设立一个主会场外，还设立了多个分会场。大会汇聚了来自互联网、电商、教育，金融等各行业领域的专家，这将是 PostgreSQL 发展史上的又一次交流盛会。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzUubWQ=">科技爱好者周刊（第 135 期）：什么行业适合创业？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3MS5tZA==">Go语言爱好者周刊：第 71 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTIzLm1k">2020.11.23 - Moving my serverless project to Ruby on Rails<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjExLjMwLm1k">老司机 iOS 周报 #138 | 2020-11-30<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ3Lmh0bWw=">R Weekly 2020-47 NHS-R, testthat utility belt, bayesian networks<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3ljMTk5NDY2Ni9wLzEwODMxMDM5Lmh0bWw=&quot;&gt;Mysql 索引精讲&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文主要讲述常见索引类型(实现层面)、索引种类(应用层面)、聚簇索引与非聚簇索引、覆盖索引、最佳索引使用策略。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlR1aml0d2tNbDVMUmRiV0N4T0VHQQ==&quot;&gt;京东到家MySQL容器化，为何首选Docker而非K8S？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文根据詹乡泉老师在〖deeplus直播第250期〗线上分享演讲内容整理而成。（文末有获取本期PPT&amp;amp;回放的方式，不要错过），分享视频：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly95b3V0dS5iZS9za1psTGhxRFVkYw==&quot;&gt;https://youtu.be/skZlLhqDUdc&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWmE5ZVIwdE5qb1UzclRnNXhUWWdOQQ==&quot;&gt;高德最佳实践：Serverless规模化落地有哪些价值？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;曾经看上去很美、一直被观望的 Serverless，现已逐渐进入落地的阶段。今年的”十一出行节”，高德在核心业务规模化落地 Serverless，由 Serverless 支撑的业务在流量高峰期的表现十分优秀。传统应用也能带来同样的体验，那么 Serverless 的差异化价值又是什么呢？本文分享高德 Serverless 规模化落地背后的实践总结。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFqaWFuL3AvMTEyMjM5OTIuaHRtbA==&quot;&gt;Elasticsearch 技术分析（九）：全文搜索引擎Elasticsearch，这篇文章给讲透了！&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本篇主要是基于之前的博文的一个总结，希望通过这篇文章能让读者大致了解Elasticsearch是做什么的以及它的使用和基本原理。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第8期 | 2020年11月23日</title>
    <link href="http://yonghong.tech/weekly-008/"/>
    <id>http://yonghong.tech/weekly-008/</id>
    <published>2020-11-23T02:24:00.000Z</published>
    <updated>2020-11-23T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdlgzMGQ0c0FYMm9FVG5OaDN1WmxFQQ==">干货 | 携程 Cilium+BGP 云原生网络实践<i class="fa fa-external-link-alt"></i></span><br>Cilium 是近两年最火的云原生网络方案之一。Cilium 的核心基于 eBPF，有两大亮点：基于 eBPF 的灵活、高性能网络，以及基于 eBPF 的 L3-L7 安全策略实现。携程 2019 年开始在生产环境使用 Cilium，本文将介绍 Cilium 在携程的落地情况，以及我们基于 Cilium 的、覆盖虚拟机、物理机和容器的云原生安全的一些探索。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==">数据人的“大考”：AnalyticDB如何强力支撑双11？<i class="fa fa-external-link-alt"></i></span><br>每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk2Mjg4OTkwNzY1MjUyNjE2">双十一SSR优化实践：秒开率提升新高度<i class="fa fa-external-link-alt"></i></span><br>会场是每年双十一的主角之一，会场的用户体验自然也是每年最关注的点。在日趋复杂的业务需求下，如何保障我们的用户体验不劣化甚至能更优化是永恒的命题。<br>今年（2020）我们在不改变现有架构，不改变业务的前提下，在会场上使用了 SSR 技术，将秒开率提高到了新的高度（82.6%）；也观察到在用户体验得到优化的同时，业务指标如 UV 点击率等也有小幅的增长（视不同业务场景有不同的提升，最大可达 5%），带来了不错的业务价值。<br>本文将从服务端、前端两个角度介绍我们在 SSR 上的方案与经验<br>1、前端在解决工程化、业务效果评估上的具体实践与方法论<br>2、服务端在解决前端模块代码于服务端执行、隔离和性能优化上的具体实践与方法论</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENyaXhYcW5FbnVIcFlmVVBqeUFDQQ==">爱奇艺知识移动端组件化探索和实践<i class="fa fa-external-link-alt"></i></span><br>组件化对于任何一个业务场景复杂的APP以及经过多次迭代之后的产品来说都是必经之路，组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程。组件化要做的不仅仅是表面上看到的模块拆分解耦，其背后还有很多工作来支撑组件化的进行，例如结合业务特性的模块拆分策略、模块间的交互方式和构建系统等等。本文主要讲述爱奇艺知识APP如何结合自身的业务特点，探索和实践了一套高效的移动端组件化方案。</li></ul><a id="more"></a><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNWU5Y21xdnZhSWhOczhDTlZKdU5vZw==">基于chaosblade的故障注入平台实践<i class="fa fa-external-link-alt"></i></span><br>当今社会互联网应用越来越广泛，用户量日益剧增。在人们对互联网服务的依赖性增大的同时，也对服务的可用性和体验感有了更高的要求。那么如何保障服务在运营过程中能一直给用户提供稳定的、不间断的、可靠可信的服务呢？例如一个金融产品，如果出现过一次问题，那可能带来巨大的损失。大家都知道金融产品的系统架构和服务逻辑是相当复杂的，至此大家都会第一时间联想到测试工程师，他们会通过单元测试、集成测试、性能测试等来验证服务的稳定性。但尽管如此，也是远远不够的，因为错误可以在任何时间以任何形式发生，尤其是对分布式系统。所以这里就需要引入混沌工程（Chaos Engineering）。</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk3MDExMDUyNjAxNDA5NTQ5">设计模式最佳套路—— 愉快地使用策略模式<i class="fa fa-external-link-alt"></i></span><br>策略模式（Strategy Pattern）定义了一组策略，分别在不同类中封装起来，每种策略都可以根据当前场景相互替换，从而使策略的变化可以独立于操作者。比如我们要去某个地方，会根据距离的不同（或者是根据手头经济状况）来选择不同的出行方式（共享单车、坐公交、滴滴打车等等），这些出行方式即不同的策略。</li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTkvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==">Apache Kylin的实践与优化<i class="fa fa-external-link-alt"></i></span><br>Apache Kylin是一个基于Hadoop大数据平台打造的开源OLAP引擎，它采用了多维立方体预计算技术，利用空间换时间的方法，将查询速度提升至亚秒级别，极大地提高了数据分析的效率，并带来了便捷、灵活的查询功能。</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xNy8yMDI4Lmh0bWw=">双汇大数据方案选型：从棘手的InfluxDB+Redis到毫秒级查询的TDengine<i class="fa fa-external-link-alt"></i></span><br>双汇发展多个分厂的能源管控大数据系统主要采用两种技术栈：InfluxDB/Redis和Kafka/Redis/HBase/Flink，对于中小型研发团队来讲，无论是系统搭建，还是实施运维都非常棘手。经过对InfluxDB/Redis和TDengine大数据平台的功能和性能对比测试，最终将TDengine作为实施方案。</li></ul><h2 id="近期会议公开课"><a href="#近期会议公开课" class="headerlink" title="近期会议公开课"></a>近期会议公开课</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h3 id="NGINX开源社区技术专题系列课程（安全专题）"><a href="#NGINX开源社区技术专题系列课程（安全专题）" class="headerlink" title="NGINX开源社区技术专题系列课程（安全专题）"></a>NGINX开源社区技术专题系列课程（安全专题）</h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmdpbngub3JnLmNuL2FydGljbGUvZGV0YWlsLzMzNg==">https://www.nginx.org.cn/article/detail/336<i class="fa fa-external-link-alt"></i></span></p><p>主题：使用ModSecurity/App Protect模块构建NGINX WAF</p><p>时间：11月25日下午2-3点</p><p>讲师：NGINX解决方案架构师邹俊</p><p>企业需要迅速将服务和应用推向市场，而快速将代码发布到生产环境中的压力使得安全性很容易下滑。过度依赖诸如漏洞扫描器之类的自动化工具是危险的，因为它们不能捕捉到所有问题。将各种跨功能开发团队提供的代码结合起来，就不太清楚谁负责实施安全性。在生产环境中运行多个应用和应用版本会使应用程序的防护层出现裂缝。</p><p>最终的结果是，对web应用防火墙（WAF）等安全工具的需求从未像现在这样迫切。这些安全工具通常与负载平衡代理集成，并部署在公司网络的边缘（或前门）以创建安全的外围环境。</p><p>安全不再是CISO和SecOps团队的唯一领域。DevOps团队在接受、测试和部署作为CI/CD管道一部分的安全策略方面扮演着重要角色。NGINX App Protect将F5先进WAF技术的有效性与NGINX的灵活性和性能相结合。它本机运行在NGINX Plus上，以解决现代DevOps环境面临的安全挑战。</p><p>通过本次公开课，您可以了解：</p><ul><li>NGINX WAF使用场景</li><li>NGINX WAF vs NGINX App Protect</li><li>NGINX App Protect策略配置</li><li>KIC WAF策略配置</li></ul><h2 id="会议公开课资料"><a href="#会议公开课资料" class="headerlink" title="会议公开课资料"></a>会议公开课资料</h2><h3 id="2020-Google-开发者大会-Google-Developer-Summit"><a href="#2020-Google-开发者大会-Google-Developer-Summit" class="headerlink" title="2020 Google 开发者大会 (Google Developer Summit)"></a>2020 Google 开发者大会 (Google Developer Summit)</h3><p>Google 开发者大会 (Google Developer Summit) 是谷歌面向开发者展示最新产品和平台的年度盛会。2020 Google 开发者大会于 11 月 16 日 至 21 日举行，这是谷歌首次以全线上大会的形式与中国开发者相聚。本次大会以“代码不止”为主题，全面介绍了产品更新以及一系列面向本地开发者的技术支持内容，旨在赋能开发者高效创新、持续不断地创造愉悦的产品体验。</p><p>2020 Google 开发者大会 (Google Developer Summit) 全部视频 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTGRjT01jRE1yTHJVbVp1WFJLdE9saERaR3BzdlFJWGk3">https://www.youtube.com/playlist?list=PLdcOMcDMrLrUmZuXRKtOlhDZGpsvQIXi7<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 主题演讲 <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS81ek82MEhOUWtXUQ==">https://youtu.be/5zO60HNQkWQ<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Android、Google Play、ChromeOS <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9OLXg3dFhZZk94RQ==">https://youtu.be/N-x7tXYfOxE<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Flutter、Web、Material Design <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS80VkxRTXlTUWg4UQ==">https://youtu.be/4VLQMySQh8Q<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 TensorFlow、Google 女性开发者职业发展座谈会 <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9OdTl6Z1VJNUtUYw==">https://youtu.be/Nu9zgUI5KTc<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 Google Cloud、Google Assistant、游戏和移动应用、Firebase <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS95cjhBeGFqZTBDNA==">https://youtu.be/yr8Axaje0C4<i class="fa fa-external-link-alt"></i></span></p><p>2020 Google 开发者大会 技术演讲专场 谷歌艺术与文化、ARCore by Google、WearOS by Google <span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS94cWZwR0FXOGRfTQ==">https://youtu.be/xqfpGAW8d_M<i class="fa fa-external-link-alt"></i></span></p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzQubWQ=">科技爱好者周刊（第 134 期）：未来的游戏业比现在大100倍<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA3MC5tZA==">Go语言爱好者周刊：第 70 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTE2Lm1k">2020.11.16 - KISS, SOLID, YAGNI And Other Fun Acronyms<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNy0yMDIwLjExLjIzLm1k">老司机 iOS 周报 #137 | 2020-11-23<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ2Lmh0bWw=">R Weekly 2020-46 Open Acces, YAPOEH, Docker<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdlgzMGQ0c0FYMm9FVG5OaDN1WmxFQQ==&quot;&gt;干货 | 携程 Cilium+BGP 云原生网络实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Cilium 是近两年最火的云原生网络方案之一。Cilium 的核心基于 eBPF，有两大亮点：基于 eBPF 的灵活、高性能网络，以及基于 eBPF 的 L3-L7 安全策略实现。携程 2019 年开始在生产环境使用 Cilium，本文将介绍 Cilium 在携程的落地情况，以及我们基于 Cilium 的、覆盖虚拟机、物理机和容器的云原生安全的一些探索。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==&quot;&gt;数据人的“大考”：AnalyticDB如何强力支撑双11？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk2Mjg4OTkwNzY1MjUyNjE2&quot;&gt;双十一SSR优化实践：秒开率提升新高度&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;会场是每年双十一的主角之一，会场的用户体验自然也是每年最关注的点。在日趋复杂的业务需求下，如何保障我们的用户体验不劣化甚至能更优化是永恒的命题。&lt;br&gt;今年（2020）我们在不改变现有架构，不改变业务的前提下，在会场上使用了 SSR 技术，将秒开率提高到了新的高度（82.6%）；也观察到在用户体验得到优化的同时，业务指标如 UV 点击率等也有小幅的增长（视不同业务场景有不同的提升，最大可达 5%），带来了不错的业务价值。&lt;br&gt;本文将从服务端、前端两个角度介绍我们在 SSR 上的方案与经验&lt;br&gt;1、前端在解决工程化、业务效果评估上的具体实践与方法论&lt;br&gt;2、服务端在解决前端模块代码于服务端执行、隔离和性能优化上的具体实践与方法论&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENyaXhYcW5FbnVIcFlmVVBqeUFDQQ==&quot;&gt;爱奇艺知识移动端组件化探索和实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;组件化对于任何一个业务场景复杂的APP以及经过多次迭代之后的产品来说都是必经之路，组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程。组件化要做的不仅仅是表面上看到的模块拆分解耦，其背后还有很多工作来支撑组件化的进行，例如结合业务特性的模块拆分策略、模块间的交互方式和构建系统等等。本文主要讲述爱奇艺知识APP如何结合自身的业务特点，探索和实践了一套高效的移动端组件化方案。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第7期 | 2020年11月16日</title>
    <link href="http://yonghong.tech/weekly-007/"/>
    <id>http://yonghong.tech/weekly-007/</id>
    <published>2020-11-16T02:24:00.000Z</published>
    <updated>2020-11-16T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTIvamF2YS05LWNtcy1nYy5odG1s">Java中9种常见的CMS GC问题分析与解决<i class="fa fa-external-link-alt"></i></span><br>目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用。</li><li><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8xNS9KYXZhLUNvbGxlY3RvcnMlRTUlQjglQjglRTclOTQlQTglRTclOUElODQyMCVFNCVCOCVBQSVFNiU5NiVCOSVFNiVCMyU5NS8=">Java-Collectors常用的20个方法<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xMi8yMDA3Lmh0bWw=">TDengine + EMQ X + Grafana 轻松搭建高效低成本的边缘侧工业互联网平台<i class="fa fa-external-link-alt"></i></span><br>本文将介绍基于TDengine、EMQ X搭建一个集工业数据采集、汇聚、清洗、存储分析以及可视化展示等能力于一体的轻量级边缘计算工业互联网平台。在此方案基础上，读者可以根据自身需求调整方案设计，从而搭建满足实际业务需求的工业互联网平台，加速实现工业智能化转型。</li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4MTU3NA==">微服务授权应该怎么做？<i class="fa fa-external-link-alt"></i></span><br>前后端鉴权是一个很大的话题，不同组织的鉴权方式各不相同，甚至对同一协议的业务实现也可能相去甚远。本文尝试从认证与授权两个维度来描述标题中的鉴权，大部分篇幅还是偏认证。</li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4NTMxNA==">分布式系统！如何实现用户追踪和认证？<i class="fa fa-external-link-alt"></i></span><br>讲使用 spring security 等具体技术的资料已经很多了，这篇文章不打算写框架和代码的具体实现。我们会讨论认证和授权的区别，然后会介绍一些被业界广泛采用的技术，最后会聊聊怎么为 API 构建选择合适的认证方式。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVHlsNmRTYjdtSEJ1cXFONld2RXVhdw==">一例 Go 编译器代码优化 bug 定位和修复解析<i class="fa fa-external-link-alt"></i></span><br>本文中介绍了 Go 编译器的整体编译流程脉络和一个编译优化错误导致数据越界访问的 bug，并分析了对这个 bug 的排查和修复过程，希望能够借此让大家对 Go 编译器有更多的了解，在遇到类似问题时有排查思路。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZkoyMnk3TVF2a2NOSmtpQW5Nd2NVZw==">服务注册中心 | 记一次Consul故障分析与优化<i class="fa fa-external-link-alt"></i></span><br>在微服务体系中，服务注册中心是最基础的组件，它的稳定性会直接影响整个服务体系的稳定性。本文主要介绍了爱奇艺微服务平台基于Consul的服务注册中心建设方式，与内部容器平台、API网关的集成情况，并重点记录了Consul遇到的一次故障，分析解决的过程，以及针对这次故障从架构上的优化调整措施。Consul 是近几年比较流行的服务发现工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比Consul 的方案更“一站式”，使用起来也较 为简单。他的主要应用场景为：服务发现、服务隔离、服务配置。</li></ul><a id="more"></a><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlpPcG5pa3JyV1pZREhjOW5JUmpXUQ==">干货 | 携程移动直播探索<i class="fa fa-external-link-alt"></i></span><br>直播行业大概在10年前就开始兴起了，秀场直播和游戏直播是pc时代比较成功的应用场景。现阶段，移动互联网的大规模普及，流量价格越来越便宜，移动视频直播异常火爆，随着各行各业的不断融合，直播带货超高的营业额，明星艺人、销售、秀场网红的涌入，直播行业迎来了空前的繁荣发展。从pc直播到渐渐火爆的移动直播，直播技术也在不断地更新迭代，趋于成熟。本文从直播流的选择、交互优化、快速迭代等方面介绍携程直播技术。</li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy84OTM4">【技术猩球】​七牛云内部平台架构 QStreaming——轻量级大数据ETL的开发框架<i class="fa fa-external-link-alt"></i></span><br>QStreaming is a framework that simplifies writing and executing ETLs on top of Apache Spark. It is based on a simple sql-like configuration file and runs on any Spark cluster</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvd1A4TWxRcjZRLVo1NDJZenBCQ1pFQQ==">HDFS慢节点监控及处理<i class="fa fa-external-link-alt"></i></span><br>HDFS集群随着使用时间的增长，难免会出现一些“性能退化”的节点，主要表现为磁盘读写变慢、网络传输变慢，我们统称这些节点为慢节点。当集群扩大到一定规模，比如上千个节点的集群，慢节点通常是不容易被发现的。大多数时候，慢节点都藏匿于众多健康节点中，只有在客户端频繁访问这些有问题的节点，发现读写变慢了，才会被感知到。</li></ul><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FpLzExMTI1Lw==">日均5亿字符翻译量，百毫秒内响应，携程机器翻译平台实践<i class="fa fa-external-link-alt"></i></span><br>随着国际化进程的开展，携程正加速第三次创业，各部门及业务场景对多语种的需求日益增长，依靠译员或精通多语种的客服难以支撑持续扩大的自然文本翻译流量。机器翻译技术作为近年来人工智能领域在自然语言处理任务上探索的先驱，逐渐走出学术的象牙塔，开始为普通用户提供实时便捷的翻译服务，并已取得了显著的成效。在这样的形势下，针对旅游服务场景提供更高质量低成本的机器翻译服务成为了一个重要课题。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzMubWQ=">科技爱好者周刊（第 133 期）：贵州变瑞士，有没有可能？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2OS5tZA==">Go语言爱好者周刊：第 69 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTA5Lm1k">2020.11.09 - 7GUIs: A GUI Programming Benchmark<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNi0yMDIwLjExLjE2Lm1k">老司机 iOS 周报 #136 | 2020-11-16<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ1Lmh0bWw=">R Weekly 2020-45 Publishing, Prefrontal Cortex, Parentheses<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTIvamF2YS05LWNtcy1nYy5odG1s&quot;&gt;Java中9种常见的CMS GC问题分析与解决&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8xNS9KYXZhLUNvbGxlY3RvcnMlRTUlQjglQjglRTclOTQlQTglRTclOUElODQyMCVFNCVCOCVBQSVFNiU5NiVCOSVFNiVCMyU5NS8=&quot;&gt;Java-Collectors常用的20个方法&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xMi8yMDA3Lmh0bWw=&quot;&gt;TDengine + EMQ X + Grafana 轻松搭建高效低成本的边缘侧工业互联网平台&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文将介绍基于TDengine、EMQ X搭建一个集工业数据采集、汇聚、清洗、存储分析以及可视化展示等能力于一体的轻量级边缘计算工业互联网平台。在此方案基础上，读者可以根据自身需求调整方案设计，从而搭建满足实际业务需求的工业互联网平台，加速实现工业智能化转型。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4MTU3NA==&quot;&gt;微服务授权应该怎么做？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;前后端鉴权是一个很大的话题，不同组织的鉴权方式各不相同，甚至对同一协议的业务实现也可能相去甚远。本文尝试从认证与授权两个维度来描述标题中的鉴权，大部分篇幅还是偏认证。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4NTMxNA==&quot;&gt;分布式系统！如何实现用户追踪和认证？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;讲使用 spring security 等具体技术的资料已经很多了，这篇文章不打算写框架和代码的具体实现。我们会讨论认证和授权的区别，然后会介绍一些被业界广泛采用的技术，最后会聊聊怎么为 API 构建选择合适的认证方式。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVHlsNmRTYjdtSEJ1cXFONld2RXVhdw==&quot;&gt;一例 Go 编译器代码优化 bug 定位和修复解析&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文中介绍了 Go 编译器的整体编译流程脉络和一个编译优化错误导致数据越界访问的 bug，并分析了对这个 bug 的排查和修复过程，希望能够借此让大家对 Go 编译器有更多的了解，在遇到类似问题时有排查思路。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZkoyMnk3TVF2a2NOSmtpQW5Nd2NVZw==&quot;&gt;服务注册中心 | 记一次Consul故障分析与优化&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在微服务体系中，服务注册中心是最基础的组件，它的稳定性会直接影响整个服务体系的稳定性。本文主要介绍了爱奇艺微服务平台基于Consul的服务注册中心建设方式，与内部容器平台、API网关的集成情况，并重点记录了Consul遇到的一次故障，分析解决的过程，以及针对这次故障从架构上的优化调整措施。Consul 是近几年比较流行的服务发现工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比Consul 的方案更“一站式”，使用起来也较 为简单。他的主要应用场景为：服务发现、服务隔离、服务配置。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第6期 | 2020年11月09日</title>
    <link href="http://yonghong.tech/weekly-006/"/>
    <id>http://yonghong.tech/weekly-006/</id>
    <published>2020-11-09T02:24:00.000Z</published>
    <updated>2020-11-09T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc2MzQ1Mg==">程序员都应该知道的URI，一文帮你全面了解<i class="fa fa-external-link-alt"></i></span><br>URI 是每个程序员都应该了解的概念，同时相关联的还有 URL, URN 等概念簇。了解这些概念，可以帮助我们更好地窥探万维网(WWW)的设计，同时也能帮我们在工作中有效解决跟 URI 相关概念的问题，更加理解 encode,decode 工作原理，更好地助力网络编程！</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODkxNTgyMTYyNzk4MTE2ODcx">5G时代|淘宝直播高画质低延时技术探索<i class="fa fa-external-link-alt"></i></span><br>5G将对视频分辨率和清晰度提出越来越高的要求。淘宝作为一个数亿级用户的短视频与直播平台，业务多样，两端用户分布广，设备和网络情况复杂，给多媒体内容存储和分发带来巨大挑战。在内容生产过程中把控好质量和成本，在内容分发和消费过程中确保用户体验，是当前面临的主要问题。为了解决这个问题，我们有两个优化目标，一是在画质不变的前提下降码率，二是在码率不变的前提下提升画面质量。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMlBSWF92VmhpM1N5Z3JaeWRCZkc2dw==">干货 | 携程Elasticsearch数据同步实践<i class="fa fa-external-link-alt"></i></span><br>Elasticsearch是最近几年非常热门的分布式搜索和数据分析引擎，携程内部不仅使用ES实现了大规模的日志平台，也广泛使用ES实现了各个业务场景的搜索、推荐等功能。本文聚焦在业务搜索的场景分享了我们在做数据同步方面的思考和实践，希望能对大家有所启发。</li></ul><a id="more"></a><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMDUvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">积木Sketch插件进阶开发指南<i class="fa fa-external-link-alt"></i></span><br>积木插件原本只是外卖提升UI/RD协作效率的一次尝试，最初的目标仅是UI一致性，但是现在已经作为全面提升产研效率的媒介，承载了越来越多的功能。 </li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY5Njc2NA==">优秀 ！华为是这样使用Git rebase的<i class="fa fa-external-link-alt"></i></span><br>理论上来说，只要能合理管理项目分支，这几个命令已经足以应付所有的日常开发工作。但是如果我们偶尔看一下自己的git graph，我的天呐，为什么会这么乱。鉴于分支管理的混乱（或者根本就没有进行过分支管理），我们经常遇到一些意想不到的问题，因此需要使用很多面生的git命令来解决我们的问题，比如说本文讲到的git rebase。</li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmF1dGhpbmcuY24vYmxvZy9kZXRhaWwvODc=">你真的会使用搜索引擎吗？<i class="fa fa-external-link-alt"></i></span><br>相信很多人平时打开网页，想要搜索东西的时候，都会直接选择输入关键词，于是得到一大堆种类不一的搜索结果，在茫茫页面中苦苦寻找自己需要的信息。这种不经思考的搜索方式，不仅增加了搜索信息的时间成本，还往往找不到正确的信息。那么，正确的搜索方式是什么呢？本文结合了作者多年的搜索经验和实践，包教包会，让你从只会简单搜索关键词的小白瞬间成长为掌握多种搜索技巧的高手，下面便开始学习吧</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzIubWQ=">科技爱好者周刊（第 132 期）：快能力和慢能力<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2OC5tZA==">Go语言爱好者周刊：第 68 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMTAyLm1k">2020.11.02 - If not SPAs, What?<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMS0yMDIwLjExLjA5Lm1k">老司机 iOS 周报 #135 | 2020-11-09<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQ0Lmh0bWw=">R Weekly 2020-44 {emphatic}, American political data, data science teaching<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc2MzQ1Mg==&quot;&gt;程序员都应该知道的URI，一文帮你全面了解&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;URI 是每个程序员都应该了解的概念，同时相关联的还有 URL, URN 等概念簇。了解这些概念，可以帮助我们更好地窥探万维网(WWW)的设计，同时也能帮我们在工作中有效解决跟 URI 相关概念的问题，更加理解 encode,decode 工作原理，更好地助力网络编程！&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODkxNTgyMTYyNzk4MTE2ODcx&quot;&gt;5G时代|淘宝直播高画质低延时技术探索&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;5G将对视频分辨率和清晰度提出越来越高的要求。淘宝作为一个数亿级用户的短视频与直播平台，业务多样，两端用户分布广，设备和网络情况复杂，给多媒体内容存储和分发带来巨大挑战。在内容生产过程中把控好质量和成本，在内容分发和消费过程中确保用户体验，是当前面临的主要问题。为了解决这个问题，我们有两个优化目标，一是在画质不变的前提下降码率，二是在码率不变的前提下提升画面质量。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMlBSWF92VmhpM1N5Z3JaeWRCZkc2dw==&quot;&gt;干货 | 携程Elasticsearch数据同步实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Elasticsearch是最近几年非常热门的分布式搜索和数据分析引擎，携程内部不仅使用ES实现了大规模的日志平台，也广泛使用ES实现了各个业务场景的搜索、推荐等功能。本文聚焦在业务搜索的场景分享了我们在做数据同步方面的思考和实践，希望能对大家有所启发。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第5期 | 2020年11月02日</title>
    <link href="http://yonghong.tech/weekly-005/"/>
    <id>http://yonghong.tech/weekly-005/</id>
    <published>2020-11-02T02:24:00.000Z</published>
    <updated>2020-11-02T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY2MjA0Ng==">你不知道的JMM底层原理<i class="fa fa-external-link-alt"></i></span><br>在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMzAvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">Native地图与Web融合技术的应用与实践<i class="fa fa-external-link-alt"></i></span><br>本文将WebView与Native地图组件叠加到一起，实现了用户手势事件智能分发的机制，解决了WebView与Native地图在同一页面内布局困难的问题。</li><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTAvMjYvcG9zZWlkb24v">波塞冬：伴鱼运营活动前端配置化实践<i class="fa fa-external-link-alt"></i></span><br>波塞冬，是伴鱼活动运营解决方案的总称，包含活动规则体系、h5 可视化开发平台等，名称来源于古希腊神话，波塞冬是海洋和所有水系的管理者，寓意为 palfish 发展提供超能力。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOExFclpXSjBGMFZzWjdXZ2pDYi1WZw==">干货 | 深入浅出Apple响应式框架Combine<i class="fa fa-external-link-alt"></i></span><br>Combine.framework 是Apple在2019 WWDC 上基于Swift推出的函数响应框架（Functional Reactive Programming）,支持Apple全平台的操作系统（iOS13+，macOS 10.15+等）。函数式响应框架无论在哪个平台早已流行泛滥，开源的Rx更是实现了各种语言的响应式编程框架。Apple在这个时候推出响应式框架，无疑是对自己护城河的进一步巩固。事实上SwiftUI的数据驱动就是依赖Combine。本文将深入浅出地介绍Combine的基本概念和原理，然后通过具体demo详细阐述其在实际编码中的应用。<a id="more"></a></li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzEubWQ=">科技爱好者周刊（第 131 期）：你的头脑是二值逻辑，还是三值逻辑？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2Ny5tZA==">Go语言爱好者周刊：第 67 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDI2Lm1k">2020.10.26 - The Tyranny of Metrics<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzNC0yMDIwLjExLjAyLm1k">老司机 iOS 周报 #134 | 2020-11-02<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQzLmh0bWw=">R Weekly 2020-43 Rolling averages with {slider}, mapping as art, and mapping flooding impacts.<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY2MjA0Ng==&quot;&gt;你不知道的JMM底层原理&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMzAvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==&quot;&gt;Native地图与Web融合技术的应用与实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本文将WebView与Native地图组件叠加到一起，实现了用户手势事件智能分发的机制，解决了WebView与Native地图在同一页面内布局困难的问题。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTAvMjYvcG9zZWlkb24v&quot;&gt;波塞冬：伴鱼运营活动前端配置化实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;波塞冬，是伴鱼活动运营解决方案的总称，包含活动规则体系、h5 可视化开发平台等，名称来源于古希腊神话，波塞冬是海洋和所有水系的管理者，寓意为 palfish 发展提供超能力。&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOExFclpXSjBGMFZzWjdXZ2pDYi1WZw==&quot;&gt;干货 | 深入浅出Apple响应式框架Combine&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;Combine.framework 是Apple在2019 WWDC 上基于Swift推出的函数响应框架（Functional Reactive Programming）,支持Apple全平台的操作系统（iOS13+，macOS 10.15+等）。函数式响应框架无论在哪个平台早已流行泛滥，开源的Rx更是实现了各种语言的响应式编程框架。Apple在这个时候推出响应式框架，无疑是对自己护城河的进一步巩固。事实上SwiftUI的数据驱动就是依赖Combine。本文将深入浅出地介绍Combine的基本概念和原理，然后通过具体demo详细阐述其在实际编码中的应用。</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>欧陆词典每日一句-2020年10月</title>
    <link href="http://yonghong.tech/eudic-2020-10/"/>
    <id>http://yonghong.tech/eudic-2020-10/</id>
    <published>2020-10-31T12:00:00.000Z</published>
    <updated>2020-10-31T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。</p></blockquote><hr><ul><li><p>Volunteers are teenagers and adults who choose to spend some time, unpaid, helping other people in some way. 志愿者是选择花费时间，不求酬劳以某种方式帮助他人的青少年或者是成年人。</p></li><li><p>Aim high but within reason. 要有雄心，但也要理性。</p></li></ul><a id="more"></a><ul><li><p>It’s important to prepare for your trip in advance and to take precautions while you are travelling. 提前为你的旅行做好准备，在旅行的时候警惕点，很重要。</p></li><li><p>Everything is going according to plan. 一切都照计划进行着。</p></li><li><p>The main measure of economic progress is the gross national product(GNP). 经济增长主要的衡量标准是国民生产总值（GNP）。</p></li><li><p>Dance expresses love and hate, joy and sorrow, life and death, and everything else in between. 舞蹈能表达爱与恨，快乐与忧愁，生存和死亡，以及一切的一切。</p></li><li><p>If you are a college student looking for a part-time job, the best place to start your job search is right on campus. 如果你是一名正在找兼职工作的大学生，那么开始找工作的最好地点就是在学校。</p></li></ul><hr><ul><li><p>What have been the main challenges and opportunities that you have faced? 你面临的主要挑战和机遇是什么？</p></li><li><p>I guess I should recognize my mistakes and learn the lesson they teach me and move forward. 我想我应该认识到自己的错误，从中汲取教训，然后继续前进。</p></li><li><p>My rich dad taught me a lesson I have carried all my life and that was the necessity of being charitable or giving. 富爸爸教给我一生受用的经验，即乐善好施是必要的。</p></li><li><p>Working in a team can have huge benefits. 在团队中工作可以带来巨大的好处。</p></li><li><p>Buckle up in every seat, on every trip, every time. 交通出行必系安全带。</p></li><li><p>Be sure to attend all classes and leave enough time to finish your assignments and prepare well for examinations. 一定要参加所有的课程，留下足够的时间完成你的作业，好好准备考试。</p></li><li><p>Most people know Marie Curie was the first woman to win the Nobel Prize and the first person to win it twice. 大多数人都知道玛丽·居里是第一位获得诺贝尔奖的女性，同时也是第一位两次获得诺贝尔奖的女性。</p></li></ul><hr><ul><li><p>Even after all these years, I want to get better and better. 即使经过这么多年，我还是想做到精益求精。</p></li><li><p>My heart is full of many things to say to you. 我心里装满了要向你倾诉的话。</p></li><li><p>I guess living on campus, I’ll have a chance to have a closer circle of friends since we’ll be living together. 我想，进入校园生活后，我们会住在一起，我就有机会结交一些更亲密的好友。</p></li><li><p>People who enjoy extreme sports actually seek out danger—it gives them extreme pleasure! 享受极限运动的人追求危险——这会给他们带来极度快感！</p></li><li><p>Your journey forward will not always be easy. 你的前途未必总是一帆风顺。</p></li><li><p>I really appreciate this. Thanks for your help. 我对此很感激。感谢你的帮助。</p></li><li><p>Regular physical activity helps maintain a healthy weight and can prevent some chronic diseases. 定期体育活动有助保持健康体重，避免慢性疾病产生。</p></li></ul><hr><ul><li><p>Philanthropy is a growing movement, a lot more can be done. 慈善是一项不断发展的事业，还有很多事情可以去完成。</p></li><li><p>In college, time is scarce, and consequently, very precious. 在大学里，时间很少，因此非常宝贵。</p></li><li><p>Overconcern with being perfect can damage our confidence if we never achieve it. 如果我们最终没法变得完美，对它过于追求反而会有损我们的自信心。</p></li><li><p>Allow me to introduce myself. 请允许我自我介绍一下。</p></li><li><p>I really want to push harder and progress further. 我真的希望更加努力，取得更大的进步。</p></li><li><p>It’s a long way, but I think you’ll have a good time. 路途很长，但我觉得你会度过一段美好的时光。</p></li><li><p>As he got in the habit of hard work, his grades began to soar. 随着他养成刻苦学习的习惯，他的成绩开始飙升。</p></li></ul><hr><ul><li><p>There is lots of snow around, and the ground freezes, which can make life difficult for animals. 到处都是积雪，大地被冰封，这让动物们的生活变得艰难。</p></li><li><p>Sleeping better may help fight off illness. 好的睡眠能够抵御疾病。</p></li><li><p>It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;It’s time in which we are directed by the needs and desires of others, and denied the right to make our own choices. 这个时代，我们受他人的需求和欲望支配，反而剥夺了自己做出选择的权利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Volunteers are teenagers and adults who choose to spend some time, unpaid, helping other people in some way. 志愿者是选择花费时间，不求酬劳以某种方式帮助他人的青少年或者是成年人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aim high but within reason. 要有雄心，但也要理性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学英语" scheme="http://yonghong.tech/categories/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="http://yonghong.tech/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="学英语" scheme="http://yonghong.tech/tags/%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="欧陆词典" scheme="http://yonghong.tech/tags/%E6%AC%A7%E9%99%86%E8%AF%8D%E5%85%B8/"/>
    
    <category term="每日一句" scheme="http://yonghong.tech/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>句读-2020年10月</title>
    <link href="http://yonghong.tech/judou-2020-10/"/>
    <id>http://yonghong.tech/judou-2020-10/</id>
    <published>2020-10-31T11:00:00.000Z</published>
    <updated>2020-10-31T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>答非所问，其实已经是答了。木心</p></blockquote><hr><p>浮现在天空中的月亮尽管一样，但我们看到的也许是另一个东西。村上春树 《1Q84》</p><p>其实秋天不是秋天，秋天是夏天努力地想要停止下来的那段时光。简蔓</p><a id="more"></a><p>生活比秩序重要，适度的混乱对心灵有益。玛丽莲·弗伦奇</p><p>不要说住在同一个城市，就算天天出没在同一座楼里，原来说见不着就是见不着。缘分一物，竟可诡谲至此。其实，人用不着出海，隔断千山的大海自然会跟着你。梁文道 《我执》</p><p>坏名声比好名声容易承担多了，因为后者背负起来更沉重，你必须表现得名副其实，而任何偏差都会被看成像是你犯了罪。坏名声的话，名实不符却可以当作是你在与人为善。阿尔贝·加缪</p><p>喜欢，是看某物好甚至极好，随之而来的念头是：“欲占有”。爱，则多是看某物不好或还不够好，其实是盼望它好以至非常好，随之而得的激励是：“愿付出”。史铁生</p><p>一个人无须为他的时代着急，也无须为个人着急，他只须天真的没办法，自然会在波浪上浮着，而相信：哼，我浮着最合适。老舍</p><hr><p>肉体才是人的神殿，不管里面供奉的是什么，都应该好好保持它的强韧、美丽和清洁。村上春树</p><p>人变得真正低劣时，除了高兴别人的不幸之外，已无其他乐趣可言。歌德</p><p>我想你了，可是我不能对你说，怕只怕，说了，对你也是一种折磨。艾米莉·狄金森</p><p>一个人若没有独立的人格，别人一个眼神，便可以把你关进心牢里，别让自己的灵魂，一辈子都在牢笼中渡过。《半山文集》</p><p>懒惰是索价极高的奢侈品，一旦到期清付，必定偿还不起。徐悲鸿</p><p>很喜欢那种通过一点点的努力，然后感受到自己正在慢慢进步的感觉。就像爬山一样，随着跟山顶的距离逐渐拉近，看到的风景也越来越美，内心更是越发欢愉。其实无论离山顶有多远，人总归应该多看些这种风景的。</p><p>你要搞清楚自己人生的剧本——不是你父母的续集，不是你子女的前传，更不是你朋友的外篇。对待生命你不妨大胆冒险一点，因为最终你要失去它。生命中最难的阶段不是没有人懂你，而是你不懂你自己。尼采  </p><hr><p>对谁都很温柔，就说明谁都不重要，明确到底谁才是最重要的，也是一种温柔吧。《请和废柴的我谈恋爱》</p><p>很多时候，优秀的人难以接受自己平庸，因为他们自省意识强，但能力又可能不足以改变现状。毕导</p><p>你对人情世故的每一分通透，对爱来爱去的每一分豁达，都是用失望换来的。傅首尔</p><p>人生在世，会遇到一些好事，还会遇上些坏事。好事我承受得起，坏事也承受得住。就这样坦荡荡做个寻常人也不坏。王小波</p><p>我决定不要再假装自己知道很多事情。我要成为我自己，渴望学习一切有待了解的东西。当你想显示自己是房间里最聪明的人时，就会什么东西都学不到了。芭芭拉·金索沃尔</p><p>没有人在修剪其生活之时会不割伤自己。勒内·夏尔</p><p>我最快乐的时候，是我既不思想也不向往的时候，甚至没有梦的时候。佩索阿</p><hr><p>你像风来了又走，我心满了又空。张爱玲 《半生缘》</p><p>一点点小事就可以安慰我们，因为一点点小事就可以刺痛我们。帕斯卡尔 《沉思录》</p><p>人类不快乐的唯一原因是他不知道如何安静地呆在他的房间里。帕斯卡 《思想录》</p><p>一个人如果刻意逃避他所惧怕的东西，也许会发现自己只是抄了条近路去见它。约翰·罗纳德·瑞尔·托尔金</p><p>做你自己，说出你的感受，因为那些介意的人对你不重要，而对你重要的人不会介意。苏斯博士</p><p>一个人里有两个我，一个在黑暗中醒着，一个在光明中睡着。卡里·纪伯伦 《沙与沫》</p><p>真正的英雄不是改变世界，而是改变自己生活的每一天。项飚 《把自己作为方法》</p><hr><p>答非所问，其实已经是答了。木心</p><p>交谈如果超过理解的限度可能就是一种破坏，一种炫耀。艾丽丝·门罗</p><p>周一到周五是出卖自己灵魂的日子，周六和周日是赎回自己灵魂的日子。 朱德庸</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;答非所问，其实已经是答了。木心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;浮现在天空中的月亮尽管一样，但我们看到的也许是另一个东西。村上春树 《1Q84》&lt;/p&gt;
&lt;p&gt;其实秋天不是秋天，秋天是夏天努力地想要停止下来的那段时光。简蔓&lt;/p&gt;</summary>
    
    
    
    <category term="句读" scheme="http://yonghong.tech/categories/%E5%8F%A5%E8%AF%BB/"/>
    
    
    <category term="句读" scheme="http://yonghong.tech/tags/%E5%8F%A5%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java基本数据类型以及缓存池</title>
    <link href="http://yonghong.tech/2020/10/java-ji-ben-shu-ju-lei-xing-yi-ji-huan-cun-chi/"/>
    <id>http://yonghong.tech/2020/10/java-ji-ben-shu-ju-lei-xing-yi-ji-huan-cun-chi/</id>
    <published>2020-10-28T03:00:00.000Z</published>
    <updated>2020-10-28T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Java的8种数据类型和他们的封装类，封装类数值范围，封装类的缓存池。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">byte/8</span><br><span class="line">char/16</span><br><span class="line">short/16</span><br><span class="line">int/32</span><br><span class="line">float/32</span><br><span class="line">long/64</span><br><span class="line">double/64</span><br><span class="line">boolean/~</span><br></pre></td></tr></table></figure><p>boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。</p><a id="more"></a><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱 调用了 Integer.valueOf(2)</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱 调用了 X.intValue()</span></span><br></pre></td></tr></table></figure><h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><table><thead><tr><th>类型</th><th>最大/小值</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>Integer</td><td>最大值</td><td>0x7fffffff</td><td>2 147 483 647</td></tr><tr><td>Integer</td><td>最小值</td><td>0x80000000</td><td>-2 147 483 648</td></tr><tr><td>Long</td><td>最大值</td><td>0x7fffffffffffffffL</td><td>9 223 372 036 854 775 807</td></tr><tr><td>Long</td><td>最小值</td><td>0x8000000000000000L</td><td>-9 223 372 036 854 775 808</td></tr><tr><td>Float</td><td>最大值</td><td>0x1.fffffeP+127f</td><td>3.4028235e+38f</td></tr><tr><td>Float</td><td>最小值</td><td>0x0.000002P-126f</td><td>1.4e-45f</td></tr><tr><td>Double</td><td>最大值</td><td>0x1.fffffffffffffP+1023</td><td>1.7976931348623157e+308</td></tr><tr><td>Double</td><td>最小值</td><td>0x0.0000000000001P-1022</td><td>4.9e-324</td></tr></tbody></table><p>另外 <code>java.math</code> 包中还有 <code>BigInteger</code> 和 <code>BigDecimal</code> 类型，基本上是任意精度的，极限就是你机器的上限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0x7fffffff = 2147483647</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x80000000 = -2147483648</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x7fffffffffffffffL = 9223372036854775807</span></span><br><span class="line">System.out.println(Long.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x8000000000000000L = -9223372036854775808</span></span><br><span class="line">System.out.println(Long.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1.fffffeP+127f = 3.4028235e+38f</span></span><br><span class="line">System.out.println(Float.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x0.000002P-126f = 1.4e-45f</span></span><br><span class="line">System.out.println(Float.MIN_VALUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1.fffffffffffffP+1023 = 1.7976931348623157e+308</span></span><br><span class="line">System.out.println(Double.MAX_VALUE);</span><br><span class="line"><span class="comment">// 0x0.0000000000001P-1022 = 4.9e-324</span></span><br><span class="line">System.out.println(Double.MIN_VALUE);</span><br></pre></td></tr></table></figure><h2 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h2><p>基本类型对应的缓冲池如下：</p><ul><li>boolean values true and false</li><li>all byte values</li><li>short values between -128 and 127</li><li>int values between -128 and 127</li><li>char in the range \u0000 to \u007F</li></ul><p>在使用这些基本类型对应的包装类型时，如果该数值范围在缓冲池范围内，就可以直接使用缓冲池中的对象。</p><p>在 jdk 1.8 所有的数值类缓冲池中，Integer 的缓冲池 IntegerCache 很特殊，这个缓冲池的下界是 - 128，上界默认是 127，但是这个上界是可调的，在启动 jvm 的时候，通过 -XX:AutoBoxCacheMax=<size> 来指定这个缓冲池的大小，该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ByteCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> Byte[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Byte((<span class="keyword">byte</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CharacterCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Character((<span class="keyword">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Short"><a href="#Short" class="headerlink" title="Short"></a>Short</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ShortCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Short cache[] = <span class="keyword">new</span> Short[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Short((<span class="keyword">short</span>)(i - <span class="number">128</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer[] cache;</span><br><span class="line">    <span class="keyword">static</span> Integer[] archivedCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load IntegerCache.archivedCache from archive, if possible</span></span><br><span class="line">        VM.initializeFromArchive(IntegerCache.class);</span><br><span class="line">        <span class="keyword">int</span> size = (high - low) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the archived cache if it exists and is large enough</span></span><br><span class="line">        <span class="keyword">if</span> (archivedCache == <span class="keyword">null</span> || size &gt; archivedCache.length) &#123;</span><br><span class="line">            Integer[] c = <span class="keyword">new</span> Integer[size];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c.length; k++)</span><br><span class="line">                c[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">            archivedCache = c;</span><br><span class="line">        &#125;</span><br><span class="line">        cache = archivedCache;</span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LongCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LongCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Long cache[] = <span class="keyword">new</span> Long[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Long(i - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了Java的8种数据类型和他们的封装类，封装类数值范围，封装类的缓存池。&lt;/p&gt;
&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;byte/8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long/64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double/64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean/~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://yonghong.tech/tags/Java/"/>
    
    <category term="基本数据累心" scheme="http://yonghong.tech/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B4%AF%E5%BF%83/"/>
    
    <category term="包装类" scheme="http://yonghong.tech/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
    <category term="封装类" scheme="http://yonghong.tech/tags/%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    
    <category term="缓存池" scheme="http://yonghong.tech/tags/%E7%BC%93%E5%AD%98%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第4期 | 2020年10月26日</title>
    <link href="http://yonghong.tech/weekly-004/"/>
    <id>http://yonghong.tech/weekly-004/</id>
    <published>2020-10-26T02:24:00.000Z</published>
    <updated>2020-10-26T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s">基本功 | Java即时编译器原理解析及实践<i class="fa fa-external-link-alt"></i></span><br>跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。</li></ul><a id="more"></a><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnlvdXphbi5jb20veW91LXphbi1iYW8tbGkteWUtd3UtamlhLWdvdS1zaGUtamkteXUtc2hpLWppYW4v">有赞保理业务架构设计与实践<i class="fa fa-external-link-alt"></i></span><br>为保障消费者权益，有赞提供基础消费保障服务。买家确认收货后，资金才可结算到卖家店铺余额，普遍的结算周期在7天左右。从商家的角度出发，结算账期的产生使得资金周转变慢，这为扩大生产交易规模制造了困难。于是快速回款产品应运而生，有赞通过引入保理机构，以应收账款保理转让的模式来帮助商家实现资金快速回笼。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWZZRzdUZ0ZLMHJSTjcwY3ZJb1ByUQ==">低代码在爱奇艺鹊桥数据同步平台的实践<i class="fa fa-external-link-alt"></i></span><br>本文结合爱奇艺App后端在业务数据同步方面的实践，分享基于低代码平台高效交付业务需求及避免重复开发的经验。</li><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWF4QW5XZlZxZTNtTTBiSEZWVjVHZw==">软件开发必修课：你该知道的GRASP职责分配模式<i class="fa fa-external-link-alt"></i></span><br>阿里妹导读：软件开发为什么需要职责驱动设计（RDD）？职责应该如何分配？如何结合架构模式在实际开发中实践落地？本文介绍一种通用的职责分配模式——GRASP，通过举例详解GRASP的几大原则，并分享两个实际运用的案例。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="携程技术沙龙——大数据与AI技术实践"><a href="#携程技术沙龙——大数据与AI技术实践" class="headerlink" title="携程技术沙龙——大数据与AI技术实践"></a><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENUQUx3OTFJRGd5a2V3eW9HSmsyUQ==">携程技术沙龙——大数据与AI技术实践<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENUQUx3OTFJRGd5a2V3eW9HSmsyUQ==">https://mp.weixin.qq.com/s/DCTALw91IDgykewyoGJk2Q<i class="fa fa-external-link-alt"></i></span></p><ul><li>10月27日 19:00-20:00 Trip全球化指标平台建设 协程曾荣军</li><li>11月3日 19:00-20:00 大数据离在线混合部署技术方案 腾讯高廉墀</li><li>11月10日 19:00-20:00 携程机器翻译技术 携程余谦</li><li>11月17日 19:00-20:00 智能写稿技术在58部落内容社区的应用实践 58同城李忠</li></ul><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMzAubWQ=">科技爱好者周刊（第 130 期）：低龄化的互联网<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2Ni5tZA==">Go语言爱好者周刊：第 66 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDE5Lm1k">2020.10.19 - The Developer Experience Gap<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMy0yMDIwLjEwLjI2Lm1k">老司机 iOS 周报 #133 | 2020-10-26<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQyLmh0bWw=">R Weekly 2020-42 Climate animation, NNMF in soccer, and Raspberry Pi with R<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s&quot;&gt;基本功 | Java即时编译器原理解析及实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    <category term="即时编译" scheme="http://yonghong.tech/tags/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91/"/>
    
    <category term="数据同步" scheme="http://yonghong.tech/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
    <category term="平台架构" scheme="http://yonghong.tech/tags/%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84/"/>
    
    <category term="有赞" scheme="http://yonghong.tech/tags/%E6%9C%89%E8%B5%9E/"/>
    
    <category term="RDD" scheme="http://yonghong.tech/tags/RDD/"/>
    
    <category term="架构" scheme="http://yonghong.tech/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="设计模式" scheme="http://yonghong.tech/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL核心应用开发规范</title>
    <link href="http://yonghong.tech/2020/10/mysql-he-xin-ying-yong-kai-fa-gui-fan/"/>
    <id>http://yonghong.tech/2020/10/mysql-he-xin-ying-yong-kai-fa-gui-fan/</id>
    <published>2020-10-25T09:00:00.000Z</published>
    <updated>2020-10-25T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL核心应用开发规范总结起来有三点：表越窄越好，表越小越好，请求够高效，接下来详细解释一下这三点。</p><h2 id="表越窄越好"><a href="#表越窄越好" class="headerlink" title="表越窄越好"></a>表越窄越好</h2><p>设计表字段的时候，选择的数据类型够用就行。</p><ul><li>存储账号名（长度≤30）就没必要 varchar(255)</li><li>Unix时间戳，可以使用无符号整型（INT UNSIGNED）</li><li>IPv4地址，也可以使用无符号整型（INET_AOTN()和INET_NTOA()函数）</li></ul><p>可以通过执行 show table status 来查看表的统计信息：</p><ul><li>Avg_row_length 值超过100字节</li><li>Data_free 值大于0说明表存在碎片</li></ul><a id="more"></a><h2 id="表越小越好"><a href="#表越小越好" class="headerlink" title="表越小越好"></a>表越小越好</h2><p>真正“好”的架构：</p><ul><li>让我们线上的业务表，它的数据量尽可能小</li><li>热表数据量足够小，IO操作代价更小（分库分表，冷热数据分离，窄表5000万，宽表50万）</li></ul><h2 id="请求够高效"><a href="#请求够高效" class="headerlink" title="请求够高效"></a>请求够高效</h2><p>事务要尽快的提交/回滚</p><p>修改/删除数据 ——&gt; 锁定数据行</p><p>表锁 未释放导致其他SQL或事务被阻塞</p><p>捕获长时间未提交的SQL或事务</p><ul><li>监控MySQL的线程状态</li><li>监控InnoDB的事务状态</li><li>设置时长超过5秒告警</li><li>设置锁表行数大于10告警</li><li>检查或者监控SQL注入的风险（SLEEP()函数，UNION ALL请求）</li></ul><h2 id="其他重要细节"><a href="#其他重要细节" class="headerlink" title="其他重要细节"></a>其他重要细节</h2><h3 id="schema设计原则"><a href="#schema设计原则" class="headerlink" title="schema设计原则"></a>schema设计原则</h3><p>1.尽量小的原则<br>2.禁止使用外键——增加行锁<br>3.自增INT/BIGINT主键（InnoDB引擎表如果使用char或者uuid作为主键，会导致数据存储的顺序离散随机，影响性能）<br>4.字符集和库表的设计要一致，MySQL实例，database，table，column，存储过程，event，都要保持一致<br>5.MySQL尽量高效的建议</p><ul><li>单表<ul><li>①单表的数据量尽量不要超过5000万</li><li>②单表的物理大小尽量不要超过20G</li><li>③索引的数量不要超过5个</li></ul></li><li>实例<ul><li>①总的大小不要超过500G</li><li>②总表数量不要超过5000个（包含分区）</li></ul></li></ul><p>有一个例子是t1表是utf8mb4编码（四个字节），t2是utf8编码（三个字节）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t1`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`c1`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="string">`c2`</span> <span class="built_in">varchar</span>(<span class="number">270</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`c3`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`c4`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`int_col`</span> (<span class="string">`c1`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`char_col`</span> (<span class="string">`c2`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t2`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`c1`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="string">`c2`</span> <span class="built_in">varchar</span>(<span class="number">270</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`c3`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`c4`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`int_col`</span> (<span class="string">`c1`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`char_col`</span> (<span class="string">`c2`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>当两个表做join时，select t1 后c2是4个字节的编码，带入t2后，无法使用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc select * from t1 left join t2 on t1.c2 = t2.c2 where t1.id &gt; 500;</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | NULL       | range | PRIMARY       | PRIMARY | 8       | NULL |    1 |   100.00 | Using where                                        |</span><br><span class="line">|  1 | SIMPLE      | t2    | NULL       | ALL   | NULL          | NULL    | NULL    | NULL |    1 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+----------------------------------------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>当把t2的编码也改成utf8mb4后，可以正常使用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc select * from t1 left join t2 on t1.c2 = t2.c2 where t1.id &gt; 500;                                                                                           +----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref        | rows | filtered | Extra       |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | NULL       | range | PRIMARY       | PRIMARY  | 8       | NULL       |    1 |   100.00 | Using where |</span><br><span class="line">|  1 | SIMPLE      | t2    | NULL       | ref   | char_col      | char_col | 1082    | demo.t1.c2 |    1 |   100.00 | NULL        |</span><br><span class="line">+<span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------------+------+----------+-------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="库表字段设计规范"><a href="#库表字段设计规范" class="headerlink" title="库表字段设计规范"></a>库表字段设计规范</h3><p>1.每个表建议不要超过50个字段<br>2.优先选择utf8mb4字符集<br>3.严谨在数据库中明文存储用户的一些核心数据（密码，身份证号等，自己定义加密算法）<br>4.用好INT数据类型（UNSIGNED，金额用途——扩大N倍使用bigint）<br>5.遇到大对象数据类型（BLOB、TEXT）字段，尽量拆出去，再用主键做关联<br>6.字符类型尽可能使用varchar的数据类型（同长度更新）<br>7.日期数据数据建议采用datetime数据类型（datetime类型 0000-9999年，timestamp类型 1970-2038）</p><h3 id="SQL开发的建议"><a href="#SQL开发的建议" class="headerlink" title="SQL开发的建议"></a>SQL开发的建议</h3><p>1.多表JOIN时，JOIN列的数据类型要一致<br>2.多表JOIN时，把过滤后结果集较小的表作为驱动表（或者使用 inner join 让优化器去做优化）<br>3.在查询的where条件中用上函数或表达式要用8.0版本<br>4.不要看到where条件中出现的列就直接创建索引<br>5.尽可能不要去执行select *操作<br>6.不要执行LIKE ‘%x%’<br>7.尽可能不要用 “!=” 条件<br>8.如果能确定返回结果数量的话最好加上 LIMIT N，优化器通常会再进一步优化，参考<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2xpbWl0LW9wdGltaXphdGlvbi5odG1s">LIMIT优化<i class="fa fa-external-link-alt"></i></span><br>9.优先使用UNION ALL，代替UNION<br>10.所有的SQL都要通过SQL审核系统检查，符合标准后才能上线</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL核心应用开发规范总结起来有三点：表越窄越好，表越小越好，请求够高效，接下来详细解释一下这三点。&lt;/p&gt;
&lt;h2 id=&quot;表越窄越好&quot;&gt;&lt;a href=&quot;#表越窄越好&quot; class=&quot;headerlink&quot; title=&quot;表越窄越好&quot;&gt;&lt;/a&gt;表越窄越好&lt;/h2&gt;&lt;p&gt;设计表字段的时候，选择的数据类型够用就行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储账号名（长度≤30）就没必要 varchar(255)&lt;/li&gt;
&lt;li&gt;Unix时间戳，可以使用无符号整型（INT UNSIGNED）&lt;/li&gt;
&lt;li&gt;IPv4地址，也可以使用无符号整型（INET_AOTN()和INET_NTOA()函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过执行 show table status 来查看表的统计信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avg_row_length 值超过100字节&lt;/li&gt;
&lt;li&gt;Data_free 值大于0说明表存在碎片&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://yonghong.tech/tags/MySQL/"/>
    
    <category term="开发规范" scheme="http://yonghong.tech/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>微服务基础设施搭建必做的 4 件事</title>
    <link href="http://yonghong.tech/2020/10/wei-fu-wu-ji-chu-she-shi-da-jian/"/>
    <id>http://yonghong.tech/2020/10/wei-fu-wu-ji-chu-she-shi-da-jian/</id>
    <published>2020-10-24T09:00:00.000Z</published>
    <updated>2020-10-24T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式系统中进程如何通信"><a href="#分布式系统中进程如何通信" class="headerlink" title="分布式系统中进程如何通信"></a>分布式系统中进程如何通信</h2><p>由传统的函数调用变成跨网络的进程间通信(RPC)，通信中间件需要屏蔽复杂性，需要关注以下4点</p><ul><li>公司的多语言诉求（多种语言需要要避开语言绑定的RPC框架）</li><li>性能方面 序列化协议</li><li>业务长期演进中通信框架替换成本</li><li>考虑通信框架背后的微服务组件生态是否完整（配置管理，服务发现，断路器，负载均衡）</li></ul><p>RPC通讯框架的4个实践经验：</p><ul><li>公司作战需要规范（趁早规范化、标准化）</li><li>具备服务异常保护机制（a.过载保护，节点，接口等，b.异常故障压制，弱化依赖，默认值，降级）</li><li>健壮的集群间容错策略（a.流量容错，b.调用端对端服务节点状态感知）</li><li>多样的调用方式支持多样的业务场景（异步，OneWay）</li></ul><a id="more"></a><h2 id="服务集群中节点和流量如何管理"><a href="#服务集群中节点和流量如何管理" class="headerlink" title="服务集群中节点和流量如何管理"></a>服务集群中节点和流量如何管理</h2><p>问题一：单体应用中函数调用是基于内存中函数地址寻址，服务化后调用端如何找到对端节点？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-16-48-IMG_0034-NbTskD.PNG" alt="服务注册中心原理图"></p><p>问题二：服务端扩容，调用端如何发现新节点并进行负载均衡？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0035-DBxxWH.PNG" alt="服务扩容原理图"></p><p>问题三：服务端个别节点宕机，如何自动使其失效避免调用端继续调用报错？</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0036-78o40S.PNG" alt="异常节点摘除原理图"></p><p>场景一：单节点业务异常时，需要快速禁用异常节点。<br>场景二：对于服务发布时灰度的节点，期望降低其流量比例。<br>场景三：业务在多地域部署时，期望支持同地域优先级等个性化的路由策略。</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/24-17-17-IMG_0037-9Q0Knr.PNG" alt="路由策略原理图"></p><p>技术选型</p><ul><li>经验一：系统要适当弱化对注册中心的依赖</li><li>经验二：趁早减少不必要的数据交互，规划扩容方案</li><li>经验三：有限保证可用性而非一致性（注册中心定位为AP系统而非CP系统）</li></ul><h2 id="系统复杂化后如何快速发现与定位异常"><a href="#系统复杂化后如何快速发现与定位异常" class="headerlink" title="系统复杂化后如何快速发现与定位异常"></a>系统复杂化后如何快速发现与定位异常</h2><p>分布式系统监控的三大利器：</p><ul><li>集中式的log日志系统</li><li>metrics指标系统</li><li>分布式链路追踪tracing</li></ul><p>推荐文章：Metrics, tracing, and logging</p><h2 id="微服务拆分后团队组织如何变化"><a href="#微服务拆分后团队组织如何变化" class="headerlink" title="微服务拆分后团队组织如何变化"></a>微服务拆分后团队组织如何变化</h2><p>问题：按技术能力组织团队，协作效率低、不聚集导致专业度有限</p><p>建议：</p><ul><li>按业务职能组织团队，聚集所属业务与产品</li><li>规模到一定程度，建设独立的基础技术团队</li></ul><hr><p>1024 程序员节快乐！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分布式系统中进程如何通信&quot;&gt;&lt;a href=&quot;#分布式系统中进程如何通信&quot; class=&quot;headerlink&quot; title=&quot;分布式系统中进程如何通信&quot;&gt;&lt;/a&gt;分布式系统中进程如何通信&lt;/h2&gt;&lt;p&gt;由传统的函数调用变成跨网络的进程间通信(RPC)，通信中间件需要屏蔽复杂性，需要关注以下4点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司的多语言诉求（多种语言需要要避开语言绑定的RPC框架）&lt;/li&gt;
&lt;li&gt;性能方面 序列化协议&lt;/li&gt;
&lt;li&gt;业务长期演进中通信框架替换成本&lt;/li&gt;
&lt;li&gt;考虑通信框架背后的微服务组件生态是否完整（配置管理，服务发现，断路器，负载均衡）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RPC通讯框架的4个实践经验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司作战需要规范（趁早规范化、标准化）&lt;/li&gt;
&lt;li&gt;具备服务异常保护机制（a.过载保护，节点，接口等，b.异常故障压制，弱化依赖，默认值，降级）&lt;/li&gt;
&lt;li&gt;健壮的集群间容错策略（a.流量容错，b.调用端对端服务节点状态感知）&lt;/li&gt;
&lt;li&gt;多样的调用方式支持多样的业务场景（异步，OneWay）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://yonghong.tech/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="分布式" scheme="http://yonghong.tech/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="微服务" scheme="http://yonghong.tech/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="RPC" scheme="http://yonghong.tech/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第3期 | 2020年10月19日</title>
    <link href="http://yonghong.tech/weekly-003/"/>
    <id>http://yonghong.tech/weekly-003/</id>
    <published>2020-10-19T02:24:00.000Z</published>
    <updated>2020-10-19T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9waW5nY2FwLmNvbS9jYXNlcy1jbi91c2VyLWNhc2UtY2hpbmEtbW9iaWxlLWxvdC8=">中移物联网在车联网场景的 TiDB 探索和实现<i class="fa fa-external-link-alt"></i></span><br>本次分享主要介绍车联网业务，它主要围绕车载位置终端和车载视频终端开展业务，包括停车卫士、路尚个人、路尚行业、和统一填装业务。截止 2020 年 5 月，累计接入 150 万终端，车联网用户主要是个人用户和企业用户，目前累计注册个人用户 151 万，累计注册企业用户 1471 个。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaGRUZmpsQ3l4cExUNGh6blNoNE8xQQ==">基于微服务成熟度模型的高可用优化实践<i class="fa fa-external-link-alt"></i></span><br>随着微服务的流行，每个互联网公司后台都有无数大大小小的服务，服务与服务之间又有着千丝万缕的调用关系。要保证整个微服务系统的成熟稳定，就必须保证每个微服务的成熟度。但如何来定义服务的成熟度？应该从哪些纬度来考量？各个纬度里又有哪些普遍的问题？如何来优化？本文介绍了爱奇艺技术产品团队用来衡量服务成熟度的模型，并基于此模型对多个后台服务进行评估，总结出了一些常见的低分项，并对低分项整理了相关优化方案。希望对大家有所帮助。</p></li></ul><a id="more"></a><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMTUvbXQtYWlvcHMtaG9yYWUuaHRtbA==">AIOps在美团的探索与实践——故障发现篇<i class="fa fa-external-link-alt"></i></span><br>美团技术团队在行业、业务领域知识和运维领域的知识等方面有着长期的积累，已经沉淀出不少工具和产品，实现了自动化运维，同时在AIOps方面也有一些初步的成果。我们希望通过在AIOps上持续投入、迭代和钻研，将之前积累的行业、业务和运维领域的知识应用到AIOps中，从而能让AIOps为业务研发、产品和运营团队赋能，提高整个公司的生产效率。</li></ul><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMTUvYWNtbW0tMjAyMC1hbnN3ZXItZHJpdmVuLXZpc3VhbC1zdGF0ZS1lc3RpbWF0b3IuaHRtbA==">对话任务中的“语言-视觉”信息融合研究<i class="fa fa-external-link-alt"></i></span><br>目标导向的视觉对话是“视觉-语言”交叉领域中一个较新的任务，它要求机器能通过多轮对话完成视觉相关的特定目标。该任务兼具研究意义与应用价值。日前，北京邮电大学王小捷教授团队与美团AI平台NLP中心团队合作，在目标导向的视觉对话任务上的研究论文《Answer-Driven Visual State Estimator for Goal-Oriented Visual Dialogue-commentCZ》被国际多媒体领域顶级会议ACMMM 2020录用。</li></ul><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="IBM-数据与-AI-线上论坛"><a href="#IBM-数据与-AI-线上论坛" class="headerlink" title="IBM 数据与 AI 线上论坛"></a><span class="exturl" data-url="aHR0cHM6Ly9pYm0uNmNvbm5leC5jb20vZXZlbnQvY2hpbmFjZW50ZXIvREFWRi9sb2dpbg==">IBM 数据与 AI 线上论坛<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly9pYm0uNmNvbm5leC5jb20vZXZlbnQvY2hpbmFjZW50ZXIvREFWRi9sb2dpbg==">https://ibm.6connex.com/event/chinacenter/DAVF/login<i class="fa fa-external-link-alt"></i></span></p><p>如果将AI在企业的落地与扩展过程视为一场“障碍跑”，那么AI技能的缺乏、AI的可信性、数据的复杂性即是横亘途中的三大障碍。这个夏天开始，IBM将为您诚意打造”数有价，AI无界 | IBM数据与AI线上论坛”，三大专场为您逐一击破三大障碍，加速将AI愿景落地为现实！全球视角与本地洞察紧密结合，一次注册，畅享三大主题专场，全力助您冲刺AI落地与规模化之旅！</p><p>■ 10月21日：掘金复杂数据，让数据为业务所用专场（待开放）<br>   您的数据为AI做好准备了吗?<br>   一起实现数据的轻松获取与组织，确保数据简单、可访问且为业务就绪。</p><p>10月21日， “掘金复杂数据，让数据为业务所用专场”即将开场，精彩抢鲜放送：</p><h3 id="CNCC-2020-中国计算机大会"><a href="#CNCC-2020-中国计算机大会" class="headerlink" title="CNCC 2020 中国计算机大会"></a><span class="exturl" data-url="aHR0cHM6Ly9jb25mLmNjZi5vcmcuY24v">CNCC 2020 中国计算机大会<i class="fa fa-external-link-alt"></i></span></h3><p>CNCC是由CCF主办的计算领域年度盛会，创建于2003年，是CCF旗舰会议，每年于不同城市举办，已成功举办十六届。每年金秋10月，IT专业人士相约CNCC；每届CNCC，都成为学术界、产业界群贤毕至的盛会。</p><p>CNCC是宏观论述技术趋势的大会，具有规格高、规模大、内容丰富的特点，会议形式包括大会特邀报告、大会论坛、技术论坛、特色活动及展览。为期三天的大会汇聚了图灵奖获得者、两院院士、国内外顶尖学者、知名企业家等亲临大会，展望前沿趋势，分享创新成果。CNCC得到了国际计算机界的高度关注，ACM 、IEEE CS、日本情报处理学会、韩国信息科学学会等国际计算机组织的高层人士都专程来华参加这一盛会。</p><p>CNCC不仅是交流前沿新知的讲坛，更是表彰杰出、分享成功的殿堂大会期间将揭晓CCF王选奖、CCF科学技术奖、CCF海外杰出贡献奖等重要奖项。近百名CCF优秀大学生奖获奖者也在会议期间接受表彰。同期举办的科技成果展和专业参观，为产学研搭建了交流、合作的平台。CNCC是一个开放式平台，除了大会特邀报告和专题论坛外，大会还提供场地，供参会者自发组织各种活动。</p><p>CNCC还引起了社会各界的广泛关注。新华社、CCTV、新浪网、人民网等知名媒体均在第一时间报道大会盛况。CCF也通过视频直播、微信微博、专题网站等，让更多人远程参加大会，分享最新趋势。</p><p>CCF每年资助近200名师生参加CNCC，让边远地区和经费缺乏单位的师生也有机会参加这一盛会，充分体现了CCF强烈的社会责任感。不断提升的影响力，不断刷新的参会人数，日趋丰富的精彩内容，种类繁多的参与形式，书写着CNCC探索新知、搭建平台的崇高理念，诠释着 CCF“计算技术改变人类生活”的执着追求。</p><h3 id="2020科大讯飞全球开发者大会"><a href="#2020科大讯飞全球开发者大会" class="headerlink" title="2020科大讯飞全球开发者大会"></a><span class="exturl" data-url="aHR0cHM6Ly8xMDI0LmlmbHl0ZWsuY29tLw==">2020科大讯飞全球开发者大会<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly8xMDI0LmlmbHl0ZWsuY29tLw==">https://1024.iflytek.com/<i class="fa fa-external-link-alt"></i></span></p><p><img src="https://up-img.yonghong.tech/pic/2020/10/13-17-46-%E6%88%AA%E5%B1%8F2020-10-13%20%E4%B8%8B%E5%8D%885.46.37-XtozZN.png" alt="2020科大讯飞全球开发者大会"></p><p>科大讯飞全球1024开发者节是以AI开发者为受众群体的人工智能盛会，由科大讯飞发起并主办。选择在每年的10月24日，是因为在计算机世界中，1024是2的十次方，是二进制计数的基本计量单位之一，是1KB的字节数，因此组成了程序中的最基础基因序列。从事计算机工作的开发者就像一个个1024，以最具创新、最富热情的基础模块搭建起整个万物互联世界。 秉承“开放·合作·生态·共享”的理念，科大讯飞全球1024开发者节希望用最新最全的人工智能技术和产品促进跨行业链接、多领域碰撞、新技术开发，以科技之光、生态之念，立足当下、放眼未来。</p><h3 id="2020-MongoDB-中国线上用户大会"><a href="#2020-MongoDB-中国线上用户大会" class="headerlink" title="2020 MongoDB 中国线上用户大会"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">2020 MongoDB 中国线上用户大会<i class="fa fa-external-link-alt"></i></span></h3><p>会议时间：11 月 24 日 星期二</p><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vbGl2ZS1jaGluYS16aA==">https://www.mongodb.com/live-china-zh<i class="fa fa-external-link-alt"></i></span></p><p>线上参会，全天精彩享不停！MongoDB重磅嘉宾主题演讲、头部客户使用心得分享、干货满满的多个分会场、动手实操培训，MongoDB 只为助您轻松构建可扩展、高性能、现代化应用程序。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMjkubWQ=">科技爱好者周刊（第 129 期）：创业的凸函数和凹函数<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2NS5tZA==">Go语言爱好者周刊：第 65 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDEyLm1k">2020.10.12 - The Widening Responsibility for Front-End Developers<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMi0yMDIwLjEwLjE5Lm1k">老司机 iOS 周报 #132 | 2020-10-19<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQxLmh0bWw=">R Weekly 2020-41 package development topics, contributing to rOpenSci, learnr and shiny<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9waW5nY2FwLmNvbS9jYXNlcy1jbi91c2VyLWNhc2UtY2hpbmEtbW9iaWxlLWxvdC8=&quot;&gt;中移物联网在车联网场景的 TiDB 探索和实现&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本次分享主要介绍车联网业务，它主要围绕车载位置终端和车载视频终端开展业务，包括停车卫士、路尚个人、路尚行业、和统一填装业务。截止 2020 年 5 月，累计接入 150 万终端，车联网用户主要是个人用户和企业用户，目前累计注册个人用户 151 万，累计注册企业用户 1471 个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaGRUZmpsQ3l4cExUNGh6blNoNE8xQQ==&quot;&gt;基于微服务成熟度模型的高可用优化实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;随着微服务的流行，每个互联网公司后台都有无数大大小小的服务，服务与服务之间又有着千丝万缕的调用关系。要保证整个微服务系统的成熟稳定，就必须保证每个微服务的成熟度。但如何来定义服务的成熟度？应该从哪些纬度来考量？各个纬度里又有哪些普遍的问题？如何来优化？本文介绍了爱奇艺技术产品团队用来衡量服务成熟度的模型，并基于此模型对多个后台服务进行评估，总结出了一些常见的低分项，并对低分项整理了相关优化方案。希望对大家有所帮助。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 5 发布了，可能升级失败，但请多给些尝试的机会！ (2020-10-10)</title>
    <link href="http://yonghong.tech/release/webpack-5-0/"/>
    <id>http://yonghong.tech/release/webpack-5-0/</id>
    <published>2020-10-13T13:00:00.000Z</published>
    <updated>2020-10-13T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 4 于 2018 年 2 月发布。<br>从那时起，我们在没有重大更新的情况下，推出了很多功能。<br>我们知道，人们不喜欢带有突破性的重大变化。<br>尤其是 webpack，人们通常一年只接触两次，剩下的时间就 “只管用”了。<br>但是，在不做突破性改动的情况下推出功能也是有成本的：<br>我们不能做重大的 API 或架构改进。</p><p>所以时不时就会有一个点，困难堆积起来，我们不得不做突破性的改动，才不至于把一切都搞乱。<br>这时候就需要一个新的主要版本了。<br>所以 webpack 5 包含了这些架构上的改进，以及没有这些改进就不可能实现的功能。</p><p>这个主要版本也是修改一些默认值的机会，并与此同时出现的建议和规范保持一致。</p><p>所以今天（2020-10-10）webpack 5.0.0 发布了，但这并不意味着它已经完成了，没有 bug，甚至功能完整。<br>就像 webpack 4 一样，我们通过修复问题和增加功能来继续开发。<br>在接下来的日子里，可能会有很多 bug 修复。功能会在以后出现。</p><a id="more"></a><h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><h3 id="那么发布意味着什么呢？"><a href="#那么发布意味着什么呢？" class="headerlink" title="那么发布意味着什么呢？"></a>那么发布意味着什么呢？</h3><p>这意味着我们完成了重大的变更。<br>许多重构已经完成，以提高架构的水平，并为未来的功能（和当前的功能）创建一个良好的基础。</p><h3 id="那么什么时候是升级的时候呢？"><a href="#那么什么时候是升级的时候呢？" class="headerlink" title="那么什么时候是升级的时候呢？"></a>那么什么时候是升级的时候呢？</h3><p>这要看情况。有一个很好的机会，升级失败，你需要给它第二次或第三次尝试。<br>如果你愿意的话，现在就尝试升级，并向 webpack、插件和加载器提供反馈。<br>我们很想解决这些问题。总得有人开始，而你将是第一批受益者之一。</p><h2 id="赞助情况"><a href="#赞助情况" class="headerlink" title="赞助情况"></a>赞助情况</h2><p>webpack 是完全基于<span class="exturl" data-url="aHR0cHM6Ly9vcGVuY29sbGVjdGl2ZS5jb20vd2VicGFjaw==">赞助<i class="fa fa-external-link-alt"></i></span>的。<br>它不像其他一些开源项目那样与大公司挂钩（并由其支付费用）。<br>99% 的赞助收入是根据贡献者和维护者的贡献来分配的。<br>我们相信将这些钱投资于使 webpack 变得更好。</p><p>但是由于疫情的原因，公司已经不怎么愿意赞助了。<br>在这种情况下，Webpack 也受到了影响（就像许多其他公司和人一样）。</p><p>我们从来没有能力支付给我们的贡献者我们认为他们应得的金额，但现在我们只有一半的钱，所以我们需要更严重的削减。<br>在情况好转之前，我们将只向贡献者和维护者支付前 10 天或每个月的工资。<br>其余的日子，他们可以自愿工作，由雇主支付工资，从事其他工作，或者休息一些日子。<br>这样我们就可以在前 10 天的工作中支付更多相当于投入时间的报酬。</p><p>我们最感激的是 <span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnRyaXZhZ28uY29tL29wZW5zb3VyY2U=">trivago<i class="fa fa-external-link-alt"></i></span>，他们在过去的 3 年里为 webpack 提供了大量的赞助。<br>遗憾的是，由于受到 Covid-19 的冲击，他们今年无法继续赞助了。<br>希望有其他公司站出来，跟随这些（巨头）的脚步。</p><p>感谢所有的赞助者。</p><h2 id="整体方向"><a href="#整体方向" class="headerlink" title="整体方向"></a>整体方向</h2><p>这个版本的重点在于以下几点。</p><ul><li>尝试用持久性缓存来提高构建性能。</li><li>尝试用更好的算法和默认值来改进长期缓存。</li><li>尝试用更好的 Tree Shaking 和代码生成来改善包大小。</li><li>尝试改善与网络平台的兼容性。</li><li>尝试在不引入任何破坏性变化的情况下，清理那些在实现 v4 功能时处于奇怪状态的内部结构。</li><li>试图通过现在引入突破性的变化来为未来的功能做准备，使其能够尽可能长时间地保持在 v5 版本上。</li></ul><h2 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a><strong>迁移</strong>指南</h2><p><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvbWlncmF0ZS81">在这里可查阅迁移指南<i class="fa fa-external-link-alt"></i></span></p><h2 id="重大变更-功能清除"><a href="#重大变更-功能清除" class="headerlink" title="重大变更: 功能清除"></a>重大变更: 功能清除</h2><h3 id="清理弃用的能力"><a href="#清理弃用的能力" class="headerlink" title="清理弃用的能力"></a>清理弃用的能力</h3><p>所有在 v4 中被废弃的能力都被移除。</p><p>迁移: 确保你的 webpack 4 构建没有打印废弃警告。</p><p>以下是一些被移除但在 v4 中没有废弃警告的东西：</p><ul><li>IgnorePlugin 和 BannerPlugin 现在必须只传递一个参数，这个参数可以是对象、字符串或函数。</li></ul><h3 id="废弃代码"><a href="#废弃代码" class="headerlink" title="废弃代码"></a>废弃代码</h3><p>新的弃用包括一个弃用代码，这样他们更容易被引用。</p><h3 id="语法废弃"><a href="#语法废弃" class="headerlink" title="语法废弃"></a>语法废弃</h3><p><code>require.include</code>已被废弃，使用时默认会发出警告。</p><p>可以通过 <code>Rule.parser.requireInclude</code> 将行为改为允许、废弃或禁用。</p><h3 id="不再为-Node-js-模块-自动引用-Polyfills"><a href="#不再为-Node-js-模块-自动引用-Polyfills" class="headerlink" title="不再为 Node.js 模块 自动引用 Polyfills"></a>不再为 Node.js 模块 自动引用 Polyfills</h3><p>在早期，webpack 的目的是为了让大多数的 Node.js 模块运行在浏览器中，但如今模块的格局已经发生了变化，现在许多模块主要是为前端而编写。webpack &lt;= 4 的版本中提供了许多 Node.js 核心模块的 polyfills，一旦某个模块引用了任何一个核心模块（如 <code>cypto</code> 模块），webpack 就会自动引用这些 polyfills。</p><p>尽管这会使得使用为 Node.js 编写模块变得容易，但它在构建时给 bundle 附加了庞大的 polyfills。在大部分情况下，这些 polyfills 并非必须。</p><p>从 webpack 5 开始不再自动填充这些 polyfills，而会专注于前端模块兼容。我们的目标是提高 web 平台的兼容性。</p><p>迁移：</p><ul><li>尽量使用前端兼容的模块。</li><li>可以手动为 Node.js 核心模块添加 polyfill。错误提示会告诉你如何实现。</li><li>Package 作者：在 <code>package.json</code> 中添加 <code>browser</code> 字段，使 package 与前端兼容。为浏览器提供其他的实现/dependencies。</li></ul><h2 id="重大变更：长期缓存"><a href="#重大变更：长期缓存" class="headerlink" title="重大变更：长期缓存"></a>重大变更：长期缓存</h2><h3 id="确定的-Chunk、模块-ID-和导出名称"><a href="#确定的-Chunk、模块-ID-和导出名称" class="headerlink" title="确定的 Chunk、模块 ID 和导出名称"></a>确定的 Chunk、模块 ID 和导出名称</h3><p>新增了长期缓存的算法。这些算法在生产模式下是默认启用的。</p><p><code>chunkIds: &quot;deterministic&quot;</code><br><code>moduleIds: &quot;deterministic&quot;</code><br><code>mangleExports: &quot;deterministic&quot;</code></p><p>该算法以确定性的方式为模块和分块分配短的（3 或 5 位）数字 ID，<br>这是包大小和长期缓存之间的一种权衡。</p><p><code>moduleIds/chunkIds/mangleExports: false</code> 禁用默认行为，你可以通过插件提供一个自定义算法。请注意，在 webpack 4 中，<code>moduleIds/chunkIds: false</code> 如果没有自定义插件，则可以正常运行，而在 webpack 5 中，你必须提供一个自定义插件。</p><p><strong>迁移</strong>：最好使用 <code>chunkIds</code>、<code>moduleIds</code> 和 <code>mangleExports</code> 的默认值。你也可以选择使用旧的默认值<code>chunkIds: &quot;size&quot;，moduleIds: &quot;size&quot;, mangleExports: &quot;size&quot;</code>，这将会生成更小的包，但为了缓存，会更频繁地将其失效。</p><p>注意：在 webpack 4 中，散列的模块 id 会导致 gzip 性能降低。这与模块顺序的改变有关，已经被修正。</p><p>注意：在 webpack 5 中，<code>deterministic</code> Ids 在生产模式下是默认启用的。</p><h3 id="真正的内容哈希"><a href="#真正的内容哈希" class="headerlink" title="真正的内容哈希"></a>真正的内容哈希</h3><p>当使用 <code>[contenthash]</code> 时，Webpack 5 将使用真正的文件内容哈希值。之前它 “只” 使用内部结构的哈希值。<br>当只有注释被修改或变量被重命名时，这对长期缓存会有积极影响。这些变化在压缩后是不可见的。</p><h2 id="重大变更：开发支持"><a href="#重大变更：开发支持" class="headerlink" title="重大变更：开发支持"></a>重大变更：开发支持</h2><h3 id="命名代码块-ID"><a href="#命名代码块-ID" class="headerlink" title="命名代码块 ID"></a>命名代码块 ID</h3><p>在开发模式下，默认启用的新命名代码块 ID 算法为模块（和文件名）提供了人类可读的名称。<br>模块 ID 由其路径决定，相对于 <code>context</code>。<br>代码块 ID 由代码块的内容决定。</p><p>所以你不再需要使用<code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code>来调试。<br>但如果你想控制生产环境的文件名，还是有意义的。</p><p>可以在生产环境中使用 <code>chunkIds: &quot;named&quot;</code> 在生产环境中使用，但要确保不要不小心暴露模块名的敏感信息。</p><p>迁移：如果你不喜欢在开发中改变文件名，你可以通过 <code>chunkIds: &quot;natural&quot;</code> 来使用旧的数字模式。</p><h3 id="模块联邦"><a href="#模块联邦" class="headerlink" title="模块联邦"></a>模块联邦</h3><p>Webpack 5 增加了一个新的功能 “模块联邦”，它允许多个 webpack 构建一起工作。<br>从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。<br>从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。</p><p>更多细节请参见<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvbW9kdWxlLWZlZGVyYXRpb24=">本单独指南<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="重大变更：支持崭新的-Web-平台特性"><a href="#重大变更：支持崭新的-Web-平台特性" class="headerlink" title="重大变更：支持崭新的 Web 平台特性"></a>重大变更：支持崭新的 Web 平台特性</h2><h3 id="JSON-模块"><a href="#JSON-模块" class="headerlink" title="JSON 模块"></a>JSON 模块</h3><p>JSON 模块现在与提案保持一致，并在使用非默认导出时发出警告。<br>当从严格的 ECMAScript 模块导入时，JSON 模块不再有命名的导出。</p><p>迁移: 使用默认导出。</p><p>即使使用默认导出，未使用的属性也会被 <code>optimization.usedExports</code> 优化丢弃，属性会被 <code>optimization.mangleExports</code> 优化打乱。</p><p>可以在 <code>Rule.parser.parse</code> 中指定一个自定义的 JSON 解析器来导入类似 JSON 的文件（例如针对 toml、yaml、json5 等）。</p><h3 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a>import.meta</h3><ul><li><code>import.meta.webpackHot</code> 是 <code>module.hot</code> 的别名，在严格的 ESM 中也可以使用。</li><li><code>import.meta.webpack</code> 是 webpack 的主要版本号。</li><li><code>import.meta.url</code> 是当前文件的 <code>file:</code> url(类似于<code>__filename</code>，但作为文件 url)。</li></ul><h3 id="资源模块"><a href="#资源模块" class="headerlink" title="资源模块"></a>资源模块</h3><p>Webpack 5 现在已经对表示资源的模块提供了内置支持。<br>这些模块可以向输出文件夹发送一个文件，或者向 javascript 包注入一个 DataURI。<br>无论哪种方式，它们都会给出一个 URL 来工作。</p><p>它们可以通过多种方式被使用：</p><ul><li><code>import url from &quot;./image.png&quot;</code> 和 在<code>module.rule</code> 中设置 <code>type: &quot;asset&quot;</code> 当匹配这样的导入时。(老方法)</li><li><code>new URL(&quot;./image.png&quot;, import.meta.url)</code> (新方式)</li></ul><p>选择 “新的方式 “语法是为了允许在没有打包工具的情况下运行代码。这种语法也可以在浏览器中的原生 ECMAScript 模块中使用。</p><h3 id="原生-Worker-支持"><a href="#原生-Worker-支持" class="headerlink" title="原生 Worker 支持"></a>原生 Worker 支持</h3><p>当把资源的 <code>new URL</code> 和 <code>new Worker</code>/<code>new SharedWorker</code>/<code>navigator.serviceWorker.register</code> 结合起来时，webpack 会自动为 web worker 创建一个新的入口点（entrypoint）。</p><p><code>new Worker(new URL(&quot;./worker.js&quot;, import.meta.url))</code></p><p>选择这种语法也是为了允许在没有打包工具的情况下运行代码。这种语法在浏览器的原生 ECMAScript 模块中也可以使用。</p><h3 id="URIs"><a href="#URIs" class="headerlink" title="URIs"></a>URIs</h3><p>Webpack 5 支持在请求中处理协议。</p><ul><li>支持<code>data:</code>。支持 Base64 或原始编码。Mimetype 可以在<code>module.rule</code>中被映射到加载器和模块类型。例如：<code>import x from &quot;data:text/javascript,export default 42&quot;</code>。</li><li>支持<code>file:</code>。</li><li>支持<code>http(s):</code>，但需要通过<code>new webpack.experiments.s schemesHttp(s)UriPlugin()</code>选择加入。<ul><li>默认情况下，当目标为 “web “时，这些 URI 会导致对外部资源的请求（它们是外部资源）。</li></ul></li></ul><p>支持请求中的片段。例如：<code>./file.js#fragment</code>。</p><h3 id="异步模块"><a href="#异步模块" class="headerlink" title="异步模块"></a>异步模块</h3><p>Webpack 5 支持所谓的 “异步模块”。<br>这些模块并不是同步解析的，而是基于异步和 Promise 的。</p><p>通过 “import “导入它们会被自动处理，不需要额外的语法，而且几乎看不出区别。</p><p>通过<code>require()</code>导入它们会返回一个解析到导出的 Promise。</p><p>在 webpack 中，有多种方式来拥有异步模块。</p><ul><li>异步的外部资源(async externals)</li><li>新规范中的 WebAssembly 模块</li><li>使用顶层 Await 的 ECMAScript 模块。</li></ul><h3 id="外部资源"><a href="#外部资源" class="headerlink" title="外部资源"></a>外部资源</h3><p>Webpack 5 增加了更多的外部类型来覆盖更多的应用：</p><p><code>promise</code>: 一个评估为 Promise 的表达式。外部模块是一个异步模块，解析值作为模块导出使用。</p><p><code>import</code>。原生的 <code>import()</code> 用于加载指定的请求，外部模块是一个异步模块，解析值作为模块导出。外部模块是一个异步模块。</p><p><code>module</code>: 尚未实现，但计划通过 <code>import x from &quot;...&quot;</code> 加载模块。</p><p><code>script</code>: 通过 <code>&lt;script&gt;</code> 标签加载一个 url，并从一个全局变量（以及它的可选属性）中获取输出。外部模块是一个异步模块。</p><h2 id="重大变更：支持全新的-Node-js-生态特性"><a href="#重大变更：支持全新的-Node-js-生态特性" class="headerlink" title="重大变更：支持全新的 Node.js 生态特性"></a>重大变更：支持全新的 Node.js 生态特性</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>现在支持 package.json 中的 <code>exports</code> 和 <code>imports</code> 字段。</p><p>原生支持 Yarn PnP。</p><p>更多细节请参见<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvZ3VpZGVzL3BhY2thZ2UtZXhwb3J0cy8=">package exports<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="重大变更：开发体验"><a href="#重大变更：开发体验" class="headerlink" title="重大变更：开发体验"></a>重大变更：开发体验</h2><h3 id="经过优化的构建目标-target"><a href="#经过优化的构建目标-target" class="headerlink" title="经过优化的构建目标(target)"></a>经过优化的构建目标(target)</h3><p>Webpack 5 允许传递一个目标列表，并且支持目标的版本。</p><p>例如 <code>target: &quot;node14&quot;``target: [&quot;web&quot;, &quot;es2020&quot;]</code>。</p><p>这是一个简单的方法，为 webpack 提供它需要确定的所有信息：</p><ul><li>代码块加载机制，以及</li><li>支持的语法，如箭头函数</li></ul><h3 id="Stats"><a href="#Stats" class="headerlink" title="Stats"></a>Stats</h3><p>改进了统计测试格式的可读性和冗余性。改进了默认值，使其不那么冗长，也适合大型构建。</p><ul><li>现在默认情况下，代码块关系是隐藏的，可以用 <code>stats.chunkRelations</code> 来切换。</li><li>Stats 现在可以区分 <code>files</code> 和 <code>auxiliaryFiles</code>。</li><li>Stats 现在默认隐藏模块和代码块的 id。这可以通过 <code>stats.ids</code> 来切换。</li><li>现在所有模块的列表是按照到入口点的距离排序的。这可以通过 <code>stats.modulesSort</code> 来改变。</li><li>代码块模块的列表现在按模块名称排序。这可以通过 <code>stats.chunkModulesSort</code> 来改变。</li><li>嵌套模块的列表现在是按拓扑结构排序的。这可以通过 <code>stats.nestedModulesSort</code> 来改变。</li><li>现在，代码块和资源会显示代码块 id 提示。</li><li>资产和模块将以树状而不是列表/表格的形式显示。</li><li>一般信息现在会在最后的摘要中显示。它显示了 webpack 版本，配置名称和警告/错误计数。</li><li>哈希值现在默认是隐藏的。这可以通过 <code>stats.hash</code> 来改变。</li><li>默认情况下不再显示构建的时间戳，这可以通过 <code>stats.builtAt</code> 开启。它会在摘要中显示时间戳。</li><li>默认情况下，不再显示子编译。它们可以用 <code>stats.children</code> 来显示。</li></ul><h3 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h3><p>对 <code>ProgressPlugin</code> 做了一些改进，它被 CLI 在参数 <code>--progress</code> 开启时使用，但也可以作为插件手动使用。</p><p>以前它只计算已处理的模块。现在它可以计算 “入口”、”依赖” 和 “模块”。<br>现在所有的模块都默认显示了。</p><p>以前它只显示当前处理的模块。这造成了很多 stderr 输出，在一些控制台上产生了性能问题。<br>现在这个功能被默认关闭（<code>activeModules</code> 选项）。这也减少了控制台的垃圾信息量。<br>现在，在构建模块的过程中，向 stderr 写入的时间被控制在 500ms 以内。</p><p>剖析模式也得到了升级，将显示嵌套进度消息的时间。<br>这使得它更容易弄清楚，当插件导致了性能问题。</p><p>新增加的 <code>percentBy</code> -选项告知 <code>ProgressPlugin</code> 如何计算进度百分比。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProgressPlugin(&#123; <span class="attr">percentBy</span>: <span class="string">&#x27;entries&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>为了使进度百分比更准确，<code>ProgressPlugin</code> 会缓存最后已知的总模块数，并在下一次构建时重新使用这个值。第一次构建将预热缓存，但后续构建将使用并更新这个值。</p><h3 id="自动添加唯一命名"><a href="#自动添加唯一命名" class="headerlink" title="自动添加唯一命名"></a>自动添加唯一命名</h3><p>在 webpack 4 中，多个 webpack 运行时可能会在同一个 HTML 页面上发生冲突，因为它们使用同一个全局变量进行代码块加载。为了解决这个问题，需要为 <code>output.jsonpFunction</code> 配置提供一个自定义的名称。</p><p>Webpack 5 确实会从 <code>package.json</code> <code>name</code> 中自动推断出一个唯一的构建名称，并将其作为 <code>output.uniqueName</code> 的默认值。</p><p>这个值用于使所有潜在的冲突的全局变量成为唯一。</p><p>迁移: 由于 <code>package.json</code> 中有唯一的名称，可将 <code>output.jsonpFunction</code> 删除。</p><h3 id="自动添加公共路径"><a href="#自动添加公共路径" class="headerlink" title="自动添加公共路径"></a>自动添加公共路径</h3><p>Webpack 5 会在可能的情况下自动确定 <code>output.publicPath</code>。</p><h3 id="Typescript-类型"><a href="#Typescript-类型" class="headerlink" title="Typescript 类型"></a>Typescript 类型</h3><p>Webpack 5 从源码中生成 typescript 类型，并通过 npm 包暴露它们。</p><p>迁移：删除<code>@types/webpack</code>。当名称不同时更新引用。</p><h2 id="重大变更-构建优化"><a href="#重大变更-构建优化" class="headerlink" title="重大变更: 构建优化"></a>重大变更: 构建优化</h2><h3 id="嵌套的-tree-shaking"><a href="#嵌套的-tree-shaking" class="headerlink" title="嵌套的 tree-shaking"></a>嵌套的 tree-shaking</h3><p>webpack 现在能够跟踪对导出的嵌套属性的访问。这可以改善重新导出命名空间对象时的 Tree Shaking（清除未使用的导出和混淆导出）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner&#x27;</span>;</span><br><span class="line"><span class="comment">// 或 import * as inner from &#x27;./inner&#x27;; export &#123; inner &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure><p>在这个例子中，可以在生产模式下删除导出的<code>b</code>。</p><h3 id="内部模块-tree-shaking"><a href="#内部模块-tree-shaking" class="headerlink" title="内部模块 tree-shaking"></a>内部模块 tree-shaking</h3><p>webpack 4 没有分析模块的导出和引用之间的依赖关系。webpack 5 有一个新的选项 <code>optimization.innerGraph</code>，在生产模式下是默认启用的，它可以对模块中的标志进行分析，找出导出和引用之间的依赖关系。</p><p>在这样的模块中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">&#x27;./something&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部依赖图算法会找出 <code>something</code> 只有在使用 <code>test</code> 导出时才会使用。这允许将更多的出口标记为未使用，并从代码包中省略更多的代码。</p><p>当设置<code>&quot;sideEffects&quot;: false</code>时，可以省略更多的模块。在这个例子中，当 <code>test</code> 导出未被使用时，<code>./something</code> 将被省略。</p><p>要获得未使用的导出信息，需要使用 <code>optimization.unusedExports</code>。要删除无副作用的模块，需要使用<code>optimization.sideEffects</code>。</p><p>可以分析以下标记。</p><ul><li>函数声明</li><li>类声明</li><li><code>默认导出export default</code> 或定义变量以下的：<ul><li>函数表达式</li><li>类表达式</li><li>顺序表达式</li><li><code>/*#__PURE__*/</code> 表达式</li><li>局部变量</li><li>引入的捆绑(bindings)</li></ul></li></ul><p>反馈：如果你发现这个分析中缺少什么，请报告一个问题，我们会考虑增加它。</p><p>使用 <code>eval()</code> 将为一个模块放弃这个优化，因为经过 eval 的代码可以引用范围内的任何标记。</p><p>这种优化也被称为深度范围分析。</p><h3 id="CommonJs-Tree-Shaking"><a href="#CommonJs-Tree-Shaking" class="headerlink" title="CommonJs Tree Shaking"></a>CommonJs Tree Shaking</h3><p>webpack 曾经不进行对 CommonJs 导出和 <code>require()</code> 调用时的导出使用分析。</p><p>webpack 5 增加了对一些 CommonJs 构造的支持，允许消除未使用的 CommonJs 导出，并从 <code>require()</code> 调用中跟踪引用的导出名称。</p><p>支持以下构造：</p><ul><li><code>exports|this|module.exports.xxx = ...</code></li><li><code>exports|this|module.exports = require(&quot;...&quot;)</code> (reexport)</li><li><code>exports|this|module.exports.xxx = require(&quot;...&quot;).xxx</code> (reexport)</li><li><code>Object.defineProperty(exports|this|module.exports, &quot;xxx&quot;, ...)</code></li><li><code>require(&quot;abc&quot;).xxx</code></li><li><code>require(&quot;abc&quot;).xxx()</code></li><li>从 ESM 导入</li><li><code>require()</code> 一个 ESM 模块</li><li>被标记的导出类型 (对非严格 ESM 导入做特殊处理):<ul><li><code>Object.defineProperty(exports|this|module.exports, &quot;__esModule&quot;, &#123; value: true|!0 &#125;)</code></li><li><code>exports|this|module.exports.__esModule = true|!0</code></li></ul></li><li>未来计划支持更多的构造</li></ul><p>当检测到不可分析的代码时，webpack 会放弃，并且完全不跟踪这些模块的导出信息（出于性能考虑）。</p><h3 id="副作用分析"><a href="#副作用分析" class="headerlink" title="副作用分析"></a>副作用分析</h3><p>在 package.json 中的 <code>&quot;sideEffects&quot;</code> 标志允许手动将模块标记为无副作用，这就允许在不使用时放弃它们。</p><p>webpack 5 也可以根据对源代码的静态分析，自动将模块标记为无副作用。</p><h3 id="每个运行时的优化"><a href="#每个运行时的优化" class="headerlink" title="每个运行时的优化"></a>每个运行时的优化</h3><p>Webpack 5 现在能够（默认情况下也是如此）分析和优化每个运行时的模块（一个运行时通常等于一个入口点）。<br>这允许只在真正需要的地方导出这些入口点。<br>入口点之间不会相互影响 (只要每个入口点使用一个运行时)</p><h3 id="模块合并"><a href="#模块合并" class="headerlink" title="模块合并"></a>模块合并</h3><p>模块合并也可以在每个运行时工作，允许每个运行时进行不同的合并</p><p>模块合并已经成为一等公民，现在任何模块和依赖都可以实现它。<br>在初始时 webpack 5 已经添加了对 ExternalModules 和 json 模块的支持，更多的模块可能很快就会发布。</p><h3 id="通用-Tree-Shaking-改进"><a href="#通用-Tree-Shaking-改进" class="headerlink" title="通用 Tree Shaking 改进"></a>通用 Tree Shaking 改进</h3><p><code>export *</code> 已经得到改进，可以跟踪更多的信息，并且不再将<code>默认</code>导出标记为使用。</p><p><code>export *</code> 现在会在 webpack 确定有冲突的导出时显示警告。</p><p><code>import()</code> 允许通过 <code>/* webpackExports: [&quot;abc&quot;, &quot;default&quot;] */</code> 该魔法注释手动 tree shake 模块。</p><h3 id="开发与生产的一致性问题"><a href="#开发与生产的一致性问题" class="headerlink" title="开发与生产的一致性问题"></a>开发与生产的一致性问题</h3><p>我们试图通过改善两种模式的相似性，在开发模式的构建性能和避免仅在生产模式的产生的问题之间找到一个很好的平衡点。</p><p>Webpack 5 默认在两种模式下都启用了 “sideEffects “优化。在 webpack 4 中，由于 package.json 中的<code>&quot;sideEffects&quot;</code>标记不正确，这种优化导致了一些只在生产模式下出现的错误。在开发过程中启用这个优化可以更快更容易地发现这些问题。</p><p>在很多情况下，开发和生产都是在不同的操作系统上进行的，文件系统的大小写敏感度不同，所以 webpack 5 增加了一些奇怪的大小写的警告/错误。</p><h3 id="改进代码生成"><a href="#改进代码生成" class="headerlink" title="改进代码生成"></a>改进代码生成</h3><p>当 ASI 发生时，webpack 会检测到，当没有分号插入时，会生成更短的代码。<code>Object(...)</code>-&gt;<code>(0, ...)</code>。</p><p>webpack 将多个导出的 getters 合并为一个运行时函数调用。<code>r.d(x, &quot;a&quot;, () =&gt; a); r.d(x, &quot;b&quot;, () =&gt; b);</code> -&gt; <code>r.d(x, &#123;a: () =&gt; a, b: () =&gt; b&#125;);</code>。</p><p>现在在 <code>output.environment</code> 中有额外的选项。<br>它们允许指定哪些 ECMAScript 特性可以用于 webpack 生成的运行时代码。</p><p>通常人们不会直接指定这个选项，而是会使用 <code>target</code> 选项。</p><p>webpack 4 之前只生成 ES5 的代码。<br>webpack 5 则现在既可以生成 ES5 又可以生成 ES6/ES2015 代码。</p><p>只支持现代浏览器，将使用箭头函数生成更短的代码，使用 <code>const</code> 声明与 TDZ 为 <code>export default</code> 生成更符合规范的代码。</p><h3 id="改进-target-配置"><a href="#改进-target-配置" class="headerlink" title="改进 target 配置"></a>改进 <code>target</code> 配置</h3><p>在 webpack 4 中，”target “是在 <code>&quot;web&quot;</code> 和 <code>&quot;node&quot;</code> 之间的一个粗略的选择（还有一些其他的）。<br>Webpack 5 给你更多的选择。</p><p><code>target</code>选项现在比以前影响了更多关于生成代码的事情。</p><ul><li>代码块加载方法</li><li>代码块的格式</li><li>wasm 加载方法</li><li>代码块与 wasm 在 workers 中加载方法</li><li>被使用的全局对象</li><li>publicPath 是否应该被自动确定</li><li>生成的代码中使用的 ECMAScript 特性/语法</li><li><code>externals</code> 是否默认被启用</li><li>一些 Node.js 兼容层的行为(<code>global</code>, <code>__filename</code>, <code>__dirname</code>)</li><li>模块解析(<code>browser</code> 字段、<code>exports</code> 和 <code>imports</code> 条件)</li><li>一些加载器可能会基于此改变行为</li></ul><p>对于其中的一些情况，在 <code>&quot;web&quot;</code> 和 <code>&quot;node&quot;</code> 之间的选择过于粗略，我们需要更多的信息。<br>因此，我们允许指定最低版本，例如 <code>&quot;node10.13&quot;</code>，并推断出更多关于目标环境的属性。</p><p>现在也允许用一个数组组合多个目标，webpack 将确定所有目标的最小属性。使用数组也很有用，当使用像 <code>&quot;web&quot;</code> 或 <code>&quot;node&quot;</code> 这样没有提供完整信息的目标时（没有版本号）。例如，<code>[&quot;web&quot;, &quot;es2020&quot;]</code> 结合了这两个部分目标。</p><p>有一个目标 <code>&quot;browserslist&quot;</code>，它将使用 browserslist 类库的数据来确定环境的属性。<br>当项目中存在可用的 browserslist 配置时，这个目标也会被默认使用。当没有可用的配置时，默认使用 <code>&quot;web&quot;</code> 目标。</p><p>有些组合和功能还没有实现，会导致错误。它们是为未来的功能做准备。例如：</p><ul><li><code>[&quot;web&quot;, &quot;node&quot;]</code> 将导致一个通用的代码块加载方法，而这个方法还没有实现。</li><li><code>[&quot;web&quot;, &quot;node&quot;]</code> + <code>output.module: true</code>将导致一个模块代码块加载方法，该方法尚未实现。</li><li><code>&quot;web&quot;</code>会导致<code>http(s):</code>的导入被视为<code>模块</code>外部资源，而这些外部还没有实现(变通方法：<code>externalsPresets.&#123; web: false, webAsync: true &#125;</code>，将使用<code>import()</code>代替)。</li></ul><h3 id="代码块拆分与模块大小"><a href="#代码块拆分与模块大小" class="headerlink" title="代码块拆分与模块大小"></a>代码块拆分与模块大小</h3><p>现在模块的尺寸比单一的数字更好的表达方式。现在有不同类型的大小。</p><p>SplitChunksPlugin 现在知道如何处理这些不同的大小，并将它们用于 <code>minSize</code> 和 <code>maxSize</code>。<br>默认情况下，只有 <code>javascript</code> 大小被处理，但你现在可以传递多个值来管理它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      minSize: &#123;</span><br><span class="line">        javascript: <span class="number">30000</span>,</span><br><span class="line">        webassembly: <span class="number">50000</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你仍然可以使用一个数字来表示大小。在这种情况下，webpack 会自动使用默认的大小类型。</p><p><code>mini-css-extract-plugin</code> 使用 <code>css/mini-extra</code> 作为大小类型，并将此大小类型自动添加到默认类型中。</p><h2 id="重大变更：性能优化"><a href="#重大变更：性能优化" class="headerlink" title="重大变更：性能优化"></a>重大变更：性能优化</h2><h3 id="持久缓存"><a href="#持久缓存" class="headerlink" title="持久缓存"></a>持久缓存</h3><p>现在有一个文件系统缓存。它是可选的，可以通过以下配置启用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  cache: &#123;</span><br><span class="line">    <span class="comment">// 1. 将缓存类型设置为文件系统</span></span><br><span class="line">    type: <span class="string">&#x27;filesystem&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    buildDependencies: &#123;</span><br><span class="line">      <span class="comment">// 2. 将你的 config 添加为 buildDependency，以便在改变 config 时获得缓存无效</span></span><br><span class="line">      config: [__filename],</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 如果你有其他的东西被构建依赖，你可以在这里添加它们</span></span><br><span class="line">      <span class="comment">// 注意，webpack、加载器和所有从你的配置中引用的模块都会被自动添加</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重要说明：</p><p>默认情况下，webpack 假定 webpack 所在的 <code>node_modules</code> 目录只被包管理器修改。对 <code>node_modules</code> 来说，哈希值和时间戳会被跳过。<br>出于性能考虑，只使用包名和版本。<br>只要不指定<code>resolve.symlinks: false</code>，Symlinks(即<code>npm/yarn link</code>)就没有问题(无论如何都要避免)。<br>不要直接编辑 <code>node_modules</code> 中的文件，除非你用 <code>snapshot.managedPaths: []</code>以剔除该优化。<br>当使用 Yarn PnP 时，webpack 假设 yarn 缓存是不可改变的（通常是这样）。<br>你可以使用 <code>snapshot.immutablePaths: []</code> 来退出这个优化。</p><p>缓存将默认存储在 <code>node_modules/.cache/webpack</code>（当使用 node_modules 时）或 <code>.yarn/.cache/webpack</code>（当使用 Yarn PnP 时）中。<br>当所有的插件都正确处理缓存时，你可能永远都不需要手动删除它。</p><p>许多内部插件也会使用持久性缓存。例如 <code>SourceMapDevToolPlugin</code> (缓存 SourceMap 的生成)或 <code>ProgressPlugin</code> (缓存模块数量)</p><p>持久性缓存将根据使用情况自动创建多个缓存文件，以优化对缓存的读写访问。</p><p>默认情况下，时间戳将用于开发模式的快照，而文件哈希将用于生产模式。<br>文件哈希也允许在 CI 中使用持久性缓存。</p><h3 id="编译器闲置和关闭"><a href="#编译器闲置和关闭" class="headerlink" title="编译器闲置和关闭"></a>编译器闲置和关闭</h3><p>编译器现在需要在使用后关闭。编译器现在会进入和离开空闲状态，并且有这些状态的钩子。插件可能会使用这些钩子来做不重要的工作。(即将持久缓存缓慢地将缓存存储到磁盘上)。在编译器关闭时–所有剩余的工作应该尽可能快地完成。一个回调标志着关闭完成。</p><p>插件和它们各自的作者应该预料到，有些用户可能会忘记关闭编译器。所以，所有的工作最终也应该在空闲状态下完成。当工作正在进行时，应该防止进程退出。</p><p><code>webpack()</code> 用法在被传递回调时自动调用<code>close</code>。</p><p>迁移：在使用 Node.js API 时，一定要在完成工作后调用 <code>Compiler.close</code>。</p><h3 id="文件生成"><a href="#文件生成" class="headerlink" title="文件生成"></a>文件生成</h3><p>webpack 过去总是在第一次构建时发出所有的输出文件，但在增量（观察）构建时跳过了写入未更改的文件。<br>假设在 webpack 运行时，没有任何其他东西改变输出文件。</p><p>增加了持久性缓存后，即使在重启 webpack 进程时，也应该会有类似监听的体验，但如果认为即使在 webpack 不运行时也没有其他东西改变输出目录，那这个假设就太强了。</p><p>所以 webpack 现在会检查输出目录中现有的文件，并将其内容与内存中的输出文件进行比较。只有当文件被改变时，它才会写入文件。<br>这只在第一次构建时进行。任何增量构建都会在运行中的 webpack 进程中生成新的资产时写入文件。</p><p>我们假设 webpack 和插件只有在内容被改变时才会生成新的资产。应该使用缓存来确保在输入相同时不会生成新的资产。<br>不遵循这个建议会降低性能。</p><p>被标记为 <code>[不可变]</code> 的文件（包括内容哈希），当已经存在一个同名文件时，将永远不会被写入。<br>我们假设当文件内容发生变化时，内容哈希会发生变化。<br>这在一般情况下是正确的，但在 webpack 或插件开发过程中可能并不总是如此。</p><h2 id="重大变更：长期未解决的问题"><a href="#重大变更：长期未解决的问题" class="headerlink" title="重大变更：长期未解决的问题"></a>重大变更：长期未解决的问题</h2><h3 id="单一文件目标的代码分割"><a href="#单一文件目标的代码分割" class="headerlink" title="单一文件目标的代码分割"></a>单一文件目标的代码分割</h3><p>只允许启动单个文件的目标（如 node、WebWorker、electron main）现在支持运行时自动加载引导所需的依赖代码片段。</p><p>这允许对这些目标使用 <code>chunks: &quot;all&quot;</code> 和 <code>optimization.runtimeChunk</code>。</p><p>请注意，如果目标的代码块加载是异步的，这使得初始评估也是异步的。当使用 <code>output.library</code> 时，这可能是一个问题，因为现在导出的值是一个 Promise。</p><h3 id="更新了解析器"><a href="#更新了解析器" class="headerlink" title="更新了解析器"></a>更新了解析器</h3><p><code>enhanced-resolve</code> 更新到了 v5，有以下改进：</p><ul><li>追踪更多的依赖关系，比如丢失的文件。</li><li>别名可能有多种选择</li><li>现在可以别名为 <code>false</code> 了。</li><li>支持 <code>exports</code> 和 <code>imports</code> 字段等功能。</li><li>性能提高</li></ul><h3 id="没有-JS-的代码块"><a href="#没有-JS-的代码块" class="headerlink" title="没有 JS 的代码块"></a>没有 JS 的代码块</h3><p>不包含 JS 代码的块，将不再生成 JS 文件。<br>这就允许有只包含 CSS 的代码块。</p><h2 id="重大变更：未来计划"><a href="#重大变更：未来计划" class="headerlink" title="重大变更：未来计划"></a>重大变更：未来计划</h2><h3 id="实验特性"><a href="#实验特性" class="headerlink" title="实验特性"></a>实验特性</h3><p>并不是所有的功能都是一开始就稳定的。在 webpack 4 中，我们添加了实验性功能，并在变更日志中注明它们是实验性的，但从配置中并不总是能清楚地看到这些功能是实验性的。</p><p>在 webpack 5 中，有一个新的 <code>experiments</code> 配置选项，允许启用实验性功能。这使得哪些功能被启用/使用变得很清楚。</p><p>虽然 webpack 遵循语义版本化，但它会对实验性功能进行例外处理。实验性功能可能会在 webpack 的次要版本中包含破坏性的变化。当这种情况发生时，我们会在变更日志中添加一个明确的注释。这将使我们能够更快地迭代实验性功能，同时也使我们能够在主要版本上为稳定的功能停留更长时间。</p><p>以下的实验功能将随 webpack 5 一起发布。</p><ul><li>旧的 WebAssembly 支持，就像 webpack 4 一样 (<code>experiments.syncWebAssembly</code>)</li><li>根据<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dlYkFzc2VtYmx5L2VzbS1pbnRlZ3JhdGlvbg==">更新的规范<i class="fa fa-external-link-alt"></i></span>(<code>experiments.asyncWebAssembly</code>)，新增 WebAssembly 支持。<ul><li>这使得一个 WebAssembly 模块成为一个异步模块。</li></ul></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdG9wLWxldmVsLWF3YWl0">顶层的 Await<i class="fa fa-external-link-alt"></i></span>第三阶段提案(<code>experiments.topLevelAwait</code>)<ul><li>在顶层使用 <code>await</code> 使该模块成为一个异步模块。</li></ul></li><li>以模块的形式生成代码包 (<code>experiments.outputModule</code>)<ul><li>这就从代码包中移除了包装器 IIFE，执行严格模式，通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 进行懒惰加载，并在模块模式下最小化压缩。</li></ul></li></ul><p>请注意，这也意味着 WebAssembly 的支持现在被默认禁用。</p><h3 id="最小-Node-js-版本"><a href="#最小-Node-js-版本" class="headerlink" title="最小 Node.js 版本"></a>最小 Node.js 版本</h3><p>最低支持的 Node.js 版本从 6 增加到 10.13.0(LTS)。</p><p>迁移：升级到最新的 Node.js 版本。</p><h2 id="配置变更"><a href="#配置变更" class="headerlink" title="配置变更"></a>配置变更</h2><h3 id="结构的变化"><a href="#结构的变化" class="headerlink" title="结构的变化"></a>结构的变化</h3><ul><li><code>entry: &#123;&#125;</code> 现在可以赋值一个空对象（允许使用插件来修改入口）。</li><li><code>target</code> 支持数组，版本及 browserslist</li><li>移除了 <code>cache: Object</code>：不能再设置内存缓存对象</li><li>添加了 <code>cache.type</code>：现在可以在 <code>&quot;memory&quot;</code> 和 <code>&quot;filesystem&quot;</code> 间进行选择</li><li>在 <code>cache.type = &quot;filesystem&quot;</code> 时，增加了新配置项：<ul><li><code>cache.cacheDirectory</code></li><li><code>cache.name</code></li><li><code>cache.version</code></li><li><code>cache.store</code></li><li><code>cache.hashAlgorithm</code></li><li><code>cache.idleTimeout</code></li><li><code>cache.idleTimeoutForIntialStore</code></li><li><code>cache.buildDependencies</code></li></ul></li><li>添加了 <code>snapshot.resolveBuildDependencies</code></li><li>添加了 <code>snapshot.resolve</code></li><li>添加了 <code>snapshot.module</code></li><li>添加了 <code>snapshot.managedPaths</code></li><li>添加了 <code>snapshot.immutablePaths</code></li><li>添加了 <code>resolve.cache</code>：此选项可禁用/启用 safe 解析缓存</li><li>移除了 <code>resolve.concord</code></li><li><code>resolve.alias</code> 值可以为数组或 <code>false</code></li><li>添加了 <code>resolve.restrictions</code>：允许限制可能存在的结果</li><li>添加了 <code>resolve.fallback</code>：允许为处理不了的别名请求设置降级</li><li>添加了 <code>resolve.preferRelative</code>：允许处理模块请求</li><li>移除了针对于 Node.js 原生模块的自动 polyfills<ul><li>移除了 <code>node.Buffer</code></li><li>移除了 <code>node.console</code></li><li>移除了 <code>node.process</code></li><li>移除了 <code>node.*</code>（Node.js 原生模块）</li><li>迁移：<code>resolve.alias</code> 和 <code>ProvidePlugin</code>。错误会给出提示。（可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svbm9kZS1saWJzLWJyb3dzZXI=">node-libs-browser<i class="fa fa-external-link-alt"></i></span>，了解 v4 中 polyfill 和 mock 的方式）</li></ul></li><li><code>output.filename</code> 可以设置为函数</li><li>添加了 <code>output.assetModuleFilename</code></li><li><code>output.jsonpScriptType</code> 更名为 <code>output.scriptType</code></li><li><code>devtool</code> 更加严格<ul><li>格式化：<code>false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></li></ul></li><li>添加了 <code>optimization.chunkIds: &quot;deterministic&quot;</code></li><li>添加了 <code>optimization.moduleIds: &quot;deterministic&quot;</code></li><li><code>optimization.moduleIds: &quot;hashed&quot;</code> 已弃用</li><li>移除了 <code>optimization.moduleIds: &quot;total-size&quot;</code></li><li>废弃了模块的 flag 并移除了 chunk id<ul><li>移除了 <code>optimization.hashedModuleIds</code></li><li>移除了 <code>optimization.namedChunks</code> (<code>NamedChunksPlugin</code> too)</li><li>移除了 <code>optimization.namedModules</code> (<code>NamedModulesPlugin</code> too)</li><li>移除了 <code>optimization.occurrenceOrder</code></li><li>迁移：使用 <code>chunkIds</code> 和 <code>moduleIds</code></li></ul></li><li><code>optimization.splitChunks</code> <code>test</code> 不再匹配 chunk 名<ul><li>迁移：使用 test 函数<br><code>(module, &#123; chunkGraph &#125;) =&gt; chunkGraph.getModuleChunks(module).some(chunk =&gt; chunk.name === &quot;name&quot;)</code></li></ul></li><li>添加了 <code>optimization.splitChunks</code> <code>minRemainingSize</code></li><li><code>optimization.splitChunks</code> 的 <code>filename</code> 可以设置为函数</li><li><code>optimization.splitChunks</code> 的大小现在可以设置为每个源类型大小的对象<ul><li><code>minSize</code></li><li><code>minRemainingSize</code></li><li><code>maxSize</code></li><li><code>maxAsyncSize</code></li><li><code>maxInitialSize</code></li></ul></li><li><code>optimization.splitChunks</code> 中的 <code>maxAsyncSize</code> 和 <code>maxInitialSize</code> 添加了 <code>maxSize</code>：允许为初始和异步 chunk 指定不同的 maxSize</li><li>移除了 <code>optimization.splitChunks</code> 的 <code>name: true</code>：不再支持自动命名<ul><li>迁移：使用默认值。<code>chunkIds: &quot;named&quot;</code> 会为你的文件取一个有用的名字，以便于调试</li></ul></li><li>添加了 <code>optimization.splitChunks.cacheGroups[].idHint</code>：会给出提示，如果选择命名的 chunk id</li><li>移除了 <code>optimization.splitChunks</code> 的 <code>automaticNamePrefix</code><ul><li>迁移：使用 <code>idHint</code> 代替</li></ul></li><li><code>optimization.splitChunks</code> 的 <code>filename</code> 不再局限于初始 chunk</li><li>添加了 <code>optimization.splitChunks</code> 的 <code>usedExports</code>，以便在比较模块时引入使用过的 export</li><li>添加了 <code>optimization.splitChunks.defaultSizeTypes</code>：当使用数字表示 size 时，可以指定 size 的类型</li><li>添加了 <code>optimization.mangleExports</code></li><li><code>optimization.minimizer</code> <code>&quot;...&quot;</code> 可以用于引入默认值</li><li><code>optimization.usedExports</code> <code>&quot;global&quot;</code> 增加了一个值，以允许在每个运行时中禁用分析，而在全局范围内进行分享（性能更好）</li><li><code>optimization.noEmitOnErrors</code> 更名为 <code>optimization.emitOnErrors</code>，逻辑颠倒</li><li>添加了 <code>optimization.realContentHash</code></li><li>移除了 <code>output.devtoolLineToLine</code><ul><li>迁移：没有替代项</li></ul></li><li>现已允许 <code>output.chunkFilename: Function</code></li><li><code>output.hotUpdateChunkFilename: Function</code> 已被禁止：反正也没什么用。</li><li><code>output.hotUpdateMainFilename: Function</code> 已被禁止：反正也没什么用。</li><li><code>output.importFunctionName: string</code> 指定用于替换 <code>import()</code> 的名称，以允许在不支持的环境中进行 polyfilling</li><li>添加了 <code>output.charset</code>：将其设置为 false，会省略 script 标签上的 <code>charset</code> 属性</li><li><code>output.hotUpdateFunction</code> 更名为 <code>output.hotUpdateGlobal</code></li><li><code>output.jsonpFunction</code> 更名为 <code>output.chunkLoadingGlobal</code></li><li><code>output.chunkCallbackFunction</code> 更名为 <code>output.chunkLoadingGlobal</code></li><li>添加了 <code>output.chunkLoading</code></li><li>添加了 <code>output.enabledChunkLoadingTypes</code></li><li>添加了 <code>output.chunkFormat</code></li><li><code>module.rules</code> 中的 <code>resolve</code> 和 <code>parser</code> 将以不同的方式进行合并（对象会进行深度合并，数组可能会使用 <code>&quot;...&quot;</code> 的形式来引用之前的值）</li><li>添加了 <code>module.rules</code> <code>parser.worker</code>：允许为支持的 worker 添加配置</li><li><code>module.rules</code> 中的 <code>query</code> 和 <code>loaders</code> 被移除</li><li>向 <code>module.rules</code> 中的 <code>options</code> 传递字符串的形式被废弃<ul><li>迁移：使用传递选项对象的方式代替，当不支持这种方式时，请在对应的 loader 中开启一个 issues</li></ul></li><li>添加了 <code>module.rules</code> <code>mimetype</code>：允许匹配 DataURI 的 mimetype</li><li>添加了 <code>module.rules</code> <code>descriptionData</code>：允许匹配来自 package.json 中的数据</li><li><code>module.defaultRules</code> <code>&quot;...&quot;</code> 可以用于引用默认值</li><li>添加了 <code>stats.chunkRootModules</code>：用于显示根模块的 chunk</li><li>添加了 <code>stats.orphanModules</code>：用于显示为 emit 的模块</li><li>添加了 <code>stats.runtime</code>：用于显示 runtime 模块</li><li>添加了 <code>stats.chunkRelations</code>：用于显示 parent/children/sibling 的 chunk</li><li>添加了 <code>stats.errorStack</code>：用于显示追踪 webpack 内部的堆栈错误</li><li>添加了 <code>stats.preset</code>：选择 preset</li><li>添加了 <code>stats.relatedAssets</code>：用于显示与其他 asset 相关的 asset（如，SourceMaps）</li><li><code>stats.warningsFilter</code> 已被弃用，请改用 <code>ignoreWarnings</code></li><li><code>BannerPlugin.banner</code> 签名已变更<ul><li>移除了 <code>data.basename</code></li><li>移除了 <code>data.query</code></li><li>迁移：从 <code>filename</code> 中获取</li></ul></li><li>移除了 <code>SourceMapDevToolPlugin</code> 的 <code>lineToLine</code><ul><li>迁移：无可替代项</li></ul></li><li><code>[hash]</code> 作为完整的编译 hash 值，现已被弃用<ul><li>迁移：使用 <code>[fullhash]</code> 代替，或最好选用其他 hash 选项</li></ul></li><li><code>[modulehash]</code> 已被弃用<ul><li>迁移：使用 <code>[hash]</code> 代替</li></ul></li><li><code>[moduleid]</code> 已被弃用<ul><li>迁移：使用 <code>[id]</code> 代替</li></ul></li><li>移除了 <code>[filebase]</code><ul><li>迁移：使用 <code>[base]</code> 代替</li></ul></li><li>基于文件模板的新 placeholders（例如 SourceMapDevToolPlugin）<ul><li><code>[name]</code></li><li><code>[base]</code></li><li><code>[path]</code></li><li><code>[ext]</code></li></ul></li><li>当给 <code>externals</code> 传递一个函数时，现在有一个不同的签名 <code>(&#123; context, request &#125;, callback)</code><ul><li>迁移：改变函数签名</li></ul></li><li>添加了 <code>externalsPresets</code></li><li>添加了 <code>experiments</code>（见上述实验部分）</li><li>添加了 <code>watchOptions.followSymlinks</code></li><li><code>watchOptions.ignored</code> 可以使用正则匹配</li><li>暴露了 <code>webpack.util.serialization</code></li></ul><h3 id="默认值变更"><a href="#默认值变更" class="headerlink" title="默认值变更"></a>默认值变更</h3><ul><li>当 browserslist 配置可用时，<code>target</code> 默认为 <code>&quot;browserslist&quot;</code></li><li><code>module.unsafeCache</code> 现默认只对 <code>node_modules</code> 启用</li><li><code>optimization.moduleIds</code> 在生产环境下默认为 <code>deterministic</code>，而不再是 <code>size</code></li><li><code>optimization.chunkIds</code> 在生产环境下默认为 <code>deterministic</code>，而不再是 <code>total-size</code></li><li><code>optimization.nodeEnv</code> 在 <code>none</code> 模式下，默认为 <code>false</code></li><li><code>optimization.splitChunks.minSize</code> 在生产环境下默认为 <code>20k</code></li><li><code>optimization.splitChunks.enforceSizeThreshold</code> 在生产环境下默认为 <code>50k</code></li><li><code>optimization.splitChunks</code> 中的 <code>minRemainingSize</code> 在生产环境下默认为 <code>minSize</code><ul><li>这将导致在剩余部分过小的情况下，创建更少的 chunk</li></ul></li><li><code>optimization.splitChunks</code> 中的 <code>maxAsyncRequests</code> 和 <code>maxInitialRequests</code> 默认值增加到了 30</li><li><code>optimization.splitChunks.cacheGroups.vendors</code> 更名为 <code>optimization.splitChunks.cacheGroups.defaultVendors</code></li><li><code>optimization.splitChunks.cacheGroups.defaultVendors.reuseExistingChunk</code> 默认为 <code>true</code></li><li><code>optimization.minimizer</code> 的 target 默认在 terser 选项中使用 <code>compress.passes: 2</code></li><li>当使用 <code>cache</code> 时， <code>resolve(Loader).cache</code> 默认为 <code>true</code></li><li><code>resolve(Loader).cacheWithContext</code> 默认为 <code>false</code></li><li><code>resolveLoader.extensions</code> 移除了 <code>.json</code></li><li><code>node.global</code> 中的 <code>node.__filename</code> 和 <code>node.__dirname</code> 默认为 <code>false</code></li><li><code>stats.errorStack</code> 默认为 <code>false</code></li></ul><h2 id="加载器相关变更"><a href="#加载器相关变更" class="headerlink" title="加载器相关变更"></a>加载器相关变更</h2><h3 id="this-getOptions"><a href="#this-getOptions" class="headerlink" title="this.getOptions"></a><code>this.getOptions</code></h3><p>这个新的 API 应该可以简化加载器中选项的使用。<br>它允许传递 JSON 模式进行验证。<br>详情请见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay9wdWxsLzEwMDE3">PR<i class="fa fa-external-link-alt"></i></span></p><h3 id="this-exec"><a href="#this-exec" class="headerlink" title="this.exec"></a><code>this.exec</code></h3><p>这一点已从加载器上下文中删除</p><p>迁移：这可以在加载器本身实现。</p><h3 id="this-getResolve"><a href="#this-getResolve" class="headerlink" title="this.getResolve"></a><code>this.getResolve</code></h3><p>loader API 中的 <code>getResolve(options)</code> 将以另一种方式合并选项，参见<code>module.rule``resolve</code>。</p><p>由于 webpack 5 在不同的发布依赖关系之间存在差异，所以传递一个 <code>dependencyType</code> 作为选项可能是有意义的（例如<code>&quot;esm&quot;</code>，<code>&quot;commonjs&quot;</code>，或者其他）。</p><h2 id="重大内部变更"><a href="#重大内部变更" class="headerlink" title="重大内部变更"></a>重大内部变更</h2><p>?&gt; 这一部分可能需要更多的完善。</p><p>以下改动只与插件作者有关：</p><h3 id="新的插件运行顺序"><a href="#新的插件运行顺序" class="headerlink" title="新的插件运行顺序"></a>新的插件运行顺序</h3><p>现在 webpack 5 中的插件在应用配置默认值 <strong>之前</strong> 就会被应用。<br>这使得插件可以应用自己的默认值，或者作为配置预设。</p><p>但这也是一个突破性的变化，因为插件在应用时不能依赖配置值的设置。</p><p>迁移：只在插件钩子中访问配置。或者最好完全避免访问配置，并通过构造函数获取选项。</p><h3 id="运行时模块"><a href="#运行时模块" class="headerlink" title="运行时模块"></a>运行时模块</h3><p>大部分的运行时代码被移到了所谓的”运行时模块”中。这些特殊模块负责添加运行时代码。它们可以被添加到任何块中，但目前总是被添加到运行时块中。”运行时需求”控制哪些运行时模块（或核心运行时部件）被添加到代码包中。这确保了只有使用的运行时代码才会被添加到代码包中。未来，运行时模块也可以添加到按需加载的块中，以便在需要时加载运行时代码。</p><p>在大多数情况下，核心运行代码时允许内联入口模块，而不是用 <code>__webpack_require__</code> 来调用它。如果代码包中没有其他模块，则根本不需要使用 <code>__webpack_require__</code>。这与模块合并很好地结合在一起，即多个模块被合并成一个模块。</p><p>在最好的情况下，根本不需要运行时代码。</p><p>迁移：如果你在插件中注入运行时代码到 webpack 运行时，可以考虑使用 RuntimeModules 来代替。instead.</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>我们添加了一个序列化机制，以允许在 webpack 中对复杂对象进行序列化。它有一个可选的语义，所以那些应该被序列化的类需要被明确地标记出来（并且实现它们的序列化）。大多数模块、所有的依赖关系和一些错误都已经这样做了。</p><p>迁移：当使用自定义模块或依赖关系时，建议将它们实现成可序列化的，以便从持久化缓存中获益。</p><h3 id="用于缓存的插件"><a href="#用于缓存的插件" class="headerlink" title="用于缓存的插件"></a>用于缓存的插件</h3><p>增加了一个带有插件接口的 <code>Cache</code> 类。该类可用于写入和读取缓存。根据配置的不同，不同的插件可以为缓存添加功能。<code>MemoryCachePlugin</code> 增加了内存缓存功能。<code>FileCachePlugin</code> 增加了持久性（文件系统）缓存。</p><p><code>FileCachePlugin</code> 使用序列化机制将缓存项目持久化到磁盘上或从磁盘上恢复。</p><h3 id="冻结钩子对象"><a href="#冻结钩子对象" class="headerlink" title="冻结钩子对象"></a>冻结钩子对象</h3><p>有 <code>hooks</code> 的类会冻结其 <code>hooks</code> 对象，所以通过这种方式添加自定义钩子已经不可能了。</p><p>迁移：推荐的添加自定义钩子的方式是使用 WeakMap 和一个静态的 <code>getXXXHooks(XXX)</code>(即<code>getCompilationHook(compilation)</code>)方法。内部类使用与自定义钩子相同的机制。</p><h3 id="Tapable-插件升级"><a href="#Tapable-插件升级" class="headerlink" title="Tapable 插件升级"></a>Tapable 插件升级</h3><p>webpack 3 插件的 compat 层已经被移除。它在 webpack 4 中已经被取消了。</p><p>一些较少使用的 tapable API 被删除或废弃。</p><p>迁移：使用新的 tapable API。</p><h3 id="Stage-钩子"><a href="#Stage-钩子" class="headerlink" title="Stage 钩子"></a>Stage 钩子</h3><p>在封装代码包过程的几个步骤中，不同阶段有多个钩子，即 <code>optimizeDependenciesBasic</code>, <code>optimizeDependencies</code> 和 <code>optimizeDependenciesAdvanced</code>。这些已经被删除，改为一个单一的钩子，它可以与 <code>stage</code> 选项一起使用。参见 <code>OptimizationStages</code>了解可能的 <code>stage</code> 选项值。</p><p>MIGRATION: 侵入剩余的钩子。你可以添加一个 <code>stage</code> 选项。</p><h3 id="Main-Chunk-ModuleTemplate-废弃"><a href="#Main-Chunk-ModuleTemplate-废弃" class="headerlink" title="Main/Chunk/ModuleTemplate 废弃"></a>Main/Chunk/ModuleTemplate 废弃</h3><p>打包模板已经重构。MainTemplate/ChunkTemplate/ModuleTemplate 被废弃，现在 JavascriptModulesPlugin 负责 JS 模板。</p><p>在那次重构之前，JS 输出由 Main/ChunkTemplate 处理，而另一个输出（即 WASM、CSS）则由插件处理。这样看起来 JS 是一等公民，而其它输出是二等。重构改变了这一点，所有的输出都由他们的插件处理。</p><p>依然可以侵入部分模板。钩子现在在 JavascriptModulesPlugin 中，而不是 Main/ChunkTemplate 中。(是的，插件也可以有钩子，我称之为附加钩子。)</p><p>有一个兼容层，所以 Main/Chunk/ModuleTemplate 仍然存在，但只是将 tap 调用委托给新的钩子位置。</p><p>迁移：按照 deprecation 消息中的建议。主要是指向不同位置的钩子。</p><h3 id="入口文件描述符"><a href="#入口文件描述符" class="headerlink" title="入口文件描述符"></a>入口文件描述符</h3><p>如果传递一个对象作为入口文件，其值可能是一个字符串、字符串数组或描述符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    catalog: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./catalog.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>描述符语法可用于向入口文件传递附加选项。</p><h4 id="入口文件输出文件名"><a href="#入口文件输出文件名" class="headerlink" title="入口文件输出文件名"></a>入口文件输出文件名</h4><p>默认情况下，入口文件代码块的输出文件名是从<code>output.filename</code>中提取的，<br>但你可以为特定入口文件指定一个自定义的输出文件名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    about: &#123; <span class="attr">import</span>: <span class="string">&#x27;./about.js&#x27;</span>, <span class="attr">filename</span>: <span class="string">&#x27;pages/[name][ext]&#x27;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="入口文件依赖"><a href="#入口文件依赖" class="headerlink" title="入口文件依赖"></a>入口文件依赖</h4><p>默认情况下，每个入口文件代码块都存储了它所使用的所有模块。使用 <code>dependOn</code>-选项，<br>你可以将模块从一个入口文件代码块共享到另一个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#123; <span class="attr">import</span>: <span class="string">&#x27;./app.js&#x27;</span>, <span class="attr">dependOn</span>: <span class="string">&#x27;react-vendors&#x27;</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;react-vendors&#x27;</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, <span class="string">&#x27;prop-types&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>app 代码块 将不包含 <code>react-vendors</code> 所拥有的模块。</p><h4 id="入口文件类库"><a href="#入口文件类库" class="headerlink" title="入口文件类库"></a>入口文件类库</h4><p>入口文件描述符允许为每个入口文件传递不同的 <code>library</code> 选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    commonjs: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./lib.js&#x27;</span>,</span><br><span class="line">      library: &#123;</span><br><span class="line">        type: <span class="string">&#x27;commonjs-module&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    amd: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./lib.js&#x27;</span>,</span><br><span class="line">      library: &#123;</span><br><span class="line">        type: <span class="string">&#x27;amd&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="入口文件运行时"><a href="#入口文件运行时" class="headerlink" title="入口文件运行时"></a>入口文件运行时</h4><p>入口文件描述符允许为每个入口文件指定一个 <code>运行时代码</code>。<br>当指定时，将创建一个以该名称命名的代码块，其中仅包含该条目的运行时代码。<br>当多个条目指定相同的<code>运行时代码</code>时，该块将包含所有这些入口文件的共同运行时代码。<br>这意味着它们可以在同一个 HTML 页面中一起使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">      runtime: <span class="string">&#x27;app-runtime&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="入口文件代码块加载"><a href="#入口文件代码块加载" class="headerlink" title="入口文件代码块加载"></a>入口文件代码块加载</h4><p>入口文件描述符允许为每个入口文件指定一个 <code>chunkLoading</code>。<br>这个入口文件的运行时代码将使用这个来加载代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./app.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    worker: &#123;</span><br><span class="line">      <span class="keyword">import</span>: <span class="string">&#x27;./worker.js&#x27;</span>,</span><br><span class="line">      chunkLoading: <span class="string">&#x27;importScripts&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="排序与-ID"><a href="#排序与-ID" class="headerlink" title="排序与 ID"></a>排序与 ID</h3><p>webpack 曾经在编译阶段以特定的方式对模块和代码块进行排序，以递增的方式分配 ID。现在不再是这样了。顺序将不再用于 ID 的生成，取而代之的是，ID 生成的完全控制在插件中。</p><p>优化模块和代码块顺序的钩子已经被移除。</p><p>迁移：在编译阶段，你不能再依赖模块和代码块的顺序了。</p><h3 id="从数组到集合-Set"><a href="#从数组到集合-Set" class="headerlink" title="从数组到集合(Set)"></a>从数组到集合(Set)</h3><ul><li>Compilation.modules 现在是一个集合</li><li>Compilation.chunks 现在是一个集合</li><li>Chunk.files 现在是一个集合</li></ul><p>存在一个适配层但会打印废弃的警告。</p><p>迁移: 使用集合方法代替数组方法。</p><h3 id="Compilation-fileSystemInfo"><a href="#Compilation-fileSystemInfo" class="headerlink" title="Compilation.fileSystemInfo"></a>Compilation.fileSystemInfo</h3><p>这个新 class 可以用来以缓存的方式访问文件系统的信息。目前，它允许访问文件和目录的时间戳。如果可能的话，关于时间戳的信息会从监听那里传输过了，否则将由文件系统访问决定。</p><p>后续，会增加访问文件内容 hash 值的功能，模块可以用文件内容代替文件 hash 来检查有效性。</p><p>迁移：使用 <code>compilation.fileSystemInfo</code> API，替代 <code>file/contextTimestamps</code>。</p><p>现在可以对目录进行时间戳管理，允许对 ContextModules 进行序列化。</p><p>增加了 <code>Compiler.modifiedFiles</code>（类似于 <code>Compiler.removedFiles</code>），以便更容易引用更改后的文件。</p><h3 id="Filesystems"><a href="#Filesystems" class="headerlink" title="Filesystems"></a>Filesystems</h3><p>新增了一个类似于 <code>compiler.inputFileSystem</code> 和 <code>compiler.outputFileSystem</code> 的新 API <code>compiler.intermediateFileSystem</code>，用于所有不被认为是输入或输出的 fs 操作，如写入 records，缓存或输出 profiling。</p><p>文件系统现在有 <code>fs</code> 接口，不再需要 <code>join</code> 或 <code>mkdirp</code> 等额外方式。但如果它们包含 <code>join</code> 或 <code>dirname</code> 等类似方法，也会被使用。</p><h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h3><p>HMR 运行时已被重构为运行时模块。<code>HotUpdateChunkTemplate</code> 已被合并入 <code>ChunkTemplate</code> 中。ChunkTemplates 和 plugins 也应处理 <code>HotUpdateChunk</code> 了。</p><p>HMR 运行时的 javascript 部分已从核心 HMR 运行时钟分离了出来。其他模块类型现在也可以使用它们自己的方式处理 HMR。在未来，这将使得 HMR 处理诸如 mini-css-extract-plugin 或 WASM 模块。</p><p>迁移：此为新功能，无需迁移。</p><p><code>import.meta.webpackHot</code> 公开了与 <code>module.hot</code> 相同的 API。当然可以在 ESM 模块（.mjs，package.json 中的 type: “module”）中使用，这些模块不能访问 <code>module</code>。</p><h3 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h3><p>webpack 曾经通过函数调用函数的形式来进行模块处理，还有一个 <code>semaphore</code> 选项限制并行性。<code>Compilation.semaphore</code> 已被移除，现在可以使用异步队列处理，每个步骤都有独立的队列：</p><ul><li><code>Compilation.factorizeQueue</code>：为一组 dependencies 调用模块工厂。</li><li><code>Compilation.addModuleQueue</code>：将模块添加到编译队列中（可以使用缓存恢复模块）</li><li><code>Compilation.buildQueue</code>：必要时构建模块（可将模块存储到缓存中）</li><li><code>Compilation.rebuildQueue</code>：如需手动触发，则会重新构建模块</li><li><code>Compilation.processDependenciesQueue</code>：处理模块的 dependencies。</li></ul><p>这些队列会有一些 hook 来监听并拦截工作的进程。</p><p>未来，多个编译器会同时工作，可以通过拦截这些队列来进行编译工作的编排。</p><p>迁移：此为新功能，无需迁移。</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>webpack 内部引入了一些日志记录的方法。<br><code>stats.logging</code> 和 <code>infrastructureLogging</code> 选项可用于启用这些信息。</p><h3 id="模块和-chunk-图"><a href="#模块和-chunk-图" class="headerlink" title="模块和 chunk 图"></a>模块和 chunk 图</h3><p>webpack 曾经在依赖关系中存储了已解析的模块，并在 chunk 中存储引入的模块。但现已发生变化。所有关于模块在模块图中如何连接的信息，现在都存储在 ModulGraph 的 class 中。所有关于模块与 chunk 如何连接的信息现在都已存储在 ChunkGraph 的 class 中。依赖于 chunk 图的信息也存储在相关的 class 中。</p><p>这意味着以下关于模块的信息已被移动：</p><ul><li>Module connections -&gt; ModuleGraph</li><li>Module issuer -&gt; ModuleGraph</li><li>Module optimization bailout -&gt; ModuleGraph (TODO: check if it should ChunkGraph instead)</li><li>Module usedExports -&gt; ModuleGraph</li><li>Module providedExports -&gt; ModuleGraph</li><li>Module pre order index -&gt; ModuleGraph</li><li>Module post order index -&gt; ModuleGraph</li><li>Module depth -&gt; ModuleGraph</li><li>Module profile -&gt; ModuleGraph</li><li>Module id -&gt; ChunkGraph</li><li>Module hash -&gt; ChunkGraph</li><li>Module runtime requirements -&gt; ChunkGraph</li><li>Module is in chunk -&gt; ChunkGraph</li><li>Module is entry in chunk -&gt; ChunkGraph</li><li>Module is runtime module in chunk -&gt; ChunkGraph</li><li>Chunk runtime requirements -&gt; ChunkGraph</li></ul><p>当从缓存中恢复模块时，webpack 会将模块从图中断开。现在已无需这么做。一个模块不存储图形的任何信息，技术上可以在多个图形中使用。这会使得缓存变得更加容易。</p><p>这部分变化中大多数都有一个 compat-layer，当使用时，它会打印一个弃用警告。</p><p>迁移：在 ModuleGraph 和 ChunkGraph 上使用新的 API。</p><h3 id="Init-Fragments"><a href="#Init-Fragments" class="headerlink" title="Init Fragments"></a>Init Fragments</h3><p><code>DependenciesBlockVariables</code> 已被移除，改为 <code>InitFragments</code>。<code>DependencyTemplates</code> 现在可以添加 <code>InitFragments</code>，以将代码注入模块源的起始位置。<code>InitFragments</code> 允许删除重复数据。</p><p>迁移：使用 <code>InitFragments</code> 代替，而无需在源文件的负索引出插入。</p><h3 id="模块-Source-Types"><a href="#模块-Source-Types" class="headerlink" title="模块 Source Types"></a>模块 Source Types</h3><p>Modules 现在必须通过 <code>Module.getSourceTypes()</code> 来定义它们支持的源码类型。根据这一点，不同的插件会用这些类型调用 <code>source()</code>。对于源类型为 <code>javascript</code> 的 <code>JavascriptModulesPlugin</code> 会将源代码嵌入到 bundle 中。源类型 <code>webassembly</code> 的 <code>WebAssemblyModulesPlugin</code> 会 emit 一个 wasm 文件。同时，也支持自定义源类型，例如，mini-css-extract-plugin 会使用源类型为 <code>stylesheet</code> 将源码嵌入到 css 文件中。</p><p>模块类型与源类型间没有关系。即使模块类型为 <code>json</code>，也可以使用源类型为 <code>javascript</code> 和模块类型为 <code>webassembly/experimental</code> 的 <code>javascript</code> 和 <code>webassembly</code>。</p><p>迁移：自定义模块需要实现这些新的接口方法。</p><h3 id="Stats-的插件"><a href="#Stats-的插件" class="headerlink" title="Stats 的插件"></a>Stats 的插件</h3><p>Stats 的 <code>preset</code>，<code>default</code>，<code>json</code> 和 <code>toString</code> 现已由插件系统内置。将当前的 Stats 转换为插件。</p><p>迁移：你现在可以自定义它，而无需替换整个 Stats 功能。额外的信息现在可以添加到 stats json 中，而不是单独编写文件。</p><h3 id="全新的监听"><a href="#全新的监听" class="headerlink" title="全新的监听"></a>全新的监听</h3><p>webpack 所使用的监听已重构。它之前使用的是 <code>chokidar</code> 和原生依赖 <code>fsevents</code>（仅在 OSX 上）。现在它在只基于原生的 Node.js 中的 <code>fs</code>。这意味着在 webpack 中已经没有原生依赖了。</p><p>它还能在监听时捕捉更多关于文件系统的信息。目前，它还可以捕获 mtimes 和监视事件时间，以及丢失文件的信息。为此，<code>WatchFileSystem</code> API 做了一点小改动。在修改的同时，我们还将 Arrays 转换为 Sets，Objects 转换为 Maps。</p><h3 id="SizeOnlySource-after-emit"><a href="#SizeOnlySource-after-emit" class="headerlink" title="SizeOnlySource after emit"></a>SizeOnlySource after emit</h3><p>webpack 现在使用 <code>SizeOnlySource</code> 替换 <code>Compilation.assets</code> 中的 Sources，以减少内存占用。</p><h3 id="Emitting-assets-multiple-times"><a href="#Emitting-assets-multiple-times" class="headerlink" title="Emitting assets multiple times"></a>Emitting assets multiple times</h3><p>原来的 <code>Multiple assets emit different content to the same filename</code> 警告，现在成为错误。</p><h3 id="ExportsInfo"><a href="#ExportsInfo" class="headerlink" title="ExportsInfo"></a>ExportsInfo</h3><p>重构了模块导出信息的存储方式。ModuleGraph 现在为每个 <code>Module</code> 提供了一个 <code>ExportsInfo</code>，它用于存储每个 export 的信息。如果模块仅以副作用的方式使用，它还存储了关于未知 export 的信息，</p><p>对于每个 export，都会存储以下信息：</p><ul><li>是否使用 export? 是否使用并不确定。（详见 <code>optimization.usedExports</code>）</li><li>是否提供 export? 是否提供并不确定。（详见 <code>optimization.providedExports</code>）</li><li>能否重命名 export 名? 是否重命名，也不确定</li><li>如果 export 已重新命名，则为新名称。（详见 <code>optimization.mangleExports</code>）</li><li>嵌套的 ExportsInfo，如果 export 是一个含有附加信息的对象，那么它本身就是一个对象<ul><li>用于重新导出命名空间对象：<code>import * as X from &quot;...&quot;; export &#123; X &#125;;</code></li><li>用于表示 JSON 模块中的结构</li></ul></li></ul><h3 id="代码生成阶段"><a href="#代码生成阶段" class="headerlink" title="代码生成阶段"></a>代码生成阶段</h3><p>编译的代码生成功能作为单独的编译阶段。它不再隐藏在 <code>Module.source()</code> 和 <code>Module.getRuntimeRequirements()</code> 中运行了。</p><p>这应该会使得流程更加简洁。它还运行报告该阶段的进度。并使得代码生成在剖析时更加清晰可见。</p><p>迁移：<code>Module.source()</code> 和 <code>Module.getRuntimeRequirements()</code> 已弃用。使用 <code>Module.codeGeneration()</code> 代替。</p><h3 id="依赖关系参考"><a href="#依赖关系参考" class="headerlink" title="依赖关系参考"></a>依赖关系参考</h3><p>webpack 曾经有一个单一的方法和类型来表示依赖关系的引用（<code>Compilation.getDependencyReference</code> 会返回一个 <code>DependencyReference</code>）<br>该类型用于引入关于该引用的所有信息，如 被引用的模块，已经引入了哪些 export，如果是弱引用，还需要订阅一些相关信息。</p><p>把所有这些信息构建在一起，拿到参考的成本就很高，而且很频繁（每次有人需要一个信息）。</p><p>在 webpack5 中，这部分代码库被重构了，方法进行了拆分。</p><ul><li>引用的模块可以从 ModuleGraphConnection 中读取</li><li>引入的导出名，可以通过 <code>Dependency.getReferencedExports()</code> 获取</li><li><code>Dependency</code> 的 class 上会有一个 <code>weak</code> 的 flag</li><li>排序只与 <code>HarmonyImportDependencies</code> 相关，可以通过 <code>sourceOrder</code> 属性获取</li></ul><h3 id="Presentational-Dependencies"><a href="#Presentational-Dependencies" class="headerlink" title="Presentational Dependencies"></a>Presentational Dependencies</h3><p>这是 <code>NormalModules</code> 的一种新 Dependencies 类型：Presentational Dependencies</p><p>这些 dependencies 只在代码生成阶段使用，但在模块图构建过程中未使用。<br>所以它们永远不能引用模块或影响导出/导入。</p><p>这些依赖关系的处理成本较低，webpack 会尽可能地使用它们</p><h3 id="弃用-loaders"><a href="#弃用-loaders" class="headerlink" title="弃用 loaders"></a>弃用 loaders</h3><ul><li><p><a href="https://github.com/webpack-contrib/null-loader"><code>null-loader</code></a></p><p>已被弃用。使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      xyz$: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者使用绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      [path.resolve(__dirname, <span class="string">&#x27;....&#x27;</span>)]: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="微小改动"><a href="#微小改动" class="headerlink" title="微小改动"></a>微小改动</h2><ul><li><code>Compiler.name</code>：当生成带有绝对路径的编译器名称时，请确保名称使用 <code>|</code> 或 <code>!</code> 分隔。<ul><li>使用空格作为分隔符的做法现已不再适用。（路径可以保护空格）</li><li>温馨提示：在 Stats 中输出时 <code>|</code> 会被替换为空格。</li></ul></li><li><code>SystemPlugin</code> 现已被默认禁用。<ul><li>迁移：应避免使用它，因为此规范已被删除。你可以使用 <code>Rule.parser.system: true</code> 来重新启用它。</li></ul></li><li><code>ModuleConcatenationPlugin</code>：<code>DependencyVariables</code> 已被移除，将不再阻止连接。<ul><li>这意味着它现在可以在 <code>module</code>，<code>global</code>，<code>process</code> 或 ProvidePlugin 的情况下进行连接。</li></ul></li><li>移除了 <code>Stats.presetToOptions</code><ul><li>迁移：使用 <code>compilation.createStatsOptions</code> 代替</li></ul></li><li>移除了 <code>SingleEntryPlugin</code> 和 <code>SingleEntryDependency</code><ul><li>迁移：使用 <code>EntryPlugin</code> 和 <code>EntryDependency</code> 代替</li></ul></li><li>chunk 现在可以有多个入口</li><li>移除了 <code>ExtendedAPIPlugin</code><ul><li>迁移：不再需要此插件，在必要时，你可以使用 <code>__webpack_hash__</code> 和 <code>__webpack_chunkname__</code> 注入运行时代码。</li></ul></li><li><code>ProgressPlugin</code> 不再为 <code>reportProgress</code> 使用 tapable 上下文。<ul><li>迁移：使用 <code>ProgressPlugin.getReporter(compiler)</code> 代替</li></ul></li><li>现已对 <code>.mjs</code> 文件重新启用 <code>ProvidePlugin</code></li><li><code>Stats</code> json 中的 <code>errors</code> 和 <code>warnings</code> 不再是字符串类型，而是包含必要信息的对象，这些信息会被分割为熟悉。<ul><li>迁移：查阅具体属性信息，如 <code>message</code> 字段</li></ul></li><li>移除了 <code>Compilation.hooks.normalModuleLoader</code><ul><li>迁移：使用 <code>NormalModule.getCompilationHooks(compilation).loader</code> 代替</li></ul></li><li>将 <code>NormalModuleFactory</code> 中的 hook 从 waterfall 改为 bailing，修改并对 waterfall 函数的 hook 进行了重命名操作。</li><li>移除了 <code>compilationParams.compilationDependencies</code><ul><li>插件可以在编译中使用 <code>compilation.file/context/missingDependencies</code> 添加依赖关系</li><li>Compat 层将 <code>compilationDependencies.add</code> 委托给 <code>fileDependencies.add</code>。</li></ul></li><li><code>stats.assetsByChunkName[x]</code> 始终为一个数组</li><li>增加了 <code>__webpack_get_script_filename__</code> 函数用于获取 script 文件的文件名。</li><li>在 package.json 中 <code>&quot;sideEffects&quot;</code> 将使用 <code>glob-to-regex</code> 来代替 <code>micromatch</code> 处理。<ul><li>这可能会改变边缘案例的语义。</li></ul></li><li>从 <code>IgnorePlugin</code> 中移除了 <code>checkContext</code></li><li>全新的 <code>__webpack_exports_info__</code> API 允许导出使用自省。</li><li>SourceMapDevToolPlugin 现已适用于非 chunk 资源。</li><li>当引用的 env 变量缺失且没有降级数据时，EnvironmentPlugin 目前会展示一个错。</li><li>从 schema 中移除 <code>serve</code> 熟悉。</li></ul><h2 id="其他微小改动"><a href="#其他微小改动" class="headerlink" title="其他微小改动"></a>其他微小改动</h2><ul><li>移除 build 目录，用运行时代替 build</li><li>移除不适用的特性<ul><li>BannerPlugin 目前只支持一个参数，这个参数可以是对象，字符串或函数</li></ul></li><li>移除 <code>CachePlugin</code></li><li><code>Chunk.entryModule</code> 已弃用，使用 ChunkGraph 代替</li><li><code>Chunk.hasEntryModule</code> 已弃用</li><li><code>Chunk.addModule</code> 已弃用</li><li><code>Chunk.removeModule</code> 已弃用</li><li><code>Chunk.getNumberOfModules</code> 已弃用</li><li><code>Chunk.modulesIterable</code> 已弃用</li><li><code>Chunk.compareTo</code> 已弃用</li><li><code>Chunk.containsModule</code> 已弃用</li><li><code>Chunk.getModules</code> 已弃用</li><li><code>Chunk.remove</code> 已弃用</li><li><code>Chunk.moveModule</code> 已弃用</li><li><code>Chunk.integrate</code> 已弃用</li><li><code>Chunk.canBeIntegrated</code> 已弃用</li><li><code>Chunk.isEmpty</code> 已弃用</li><li><code>Chunk.modulesSize</code> 已弃用</li><li><code>Chunk.size</code> 已弃用</li><li><code>Chunk.integratedSize</code> 已弃用</li><li><code>Chunk.getChunkModuleMaps</code> 已弃用</li><li><code>Chunk.hasModuleInGraph</code> 已弃用</li><li><code>Chunk.updateHash</code> 签名已变更</li><li><code>Chunk.getChildIdsByOrders</code> 签名已变更（TODO: 考虑移至 <code>ChunkGraph</code>）</li><li><code>Chunk.getChildIdsByOrdersMap</code> 签名已变更（TODO: 考虑移至 <code>ChunkGraph</code>）</li><li>移除了 <code>Chunk.getChunkModuleMaps</code></li><li>移除了 <code>Chunk.setModules</code></li><li>移除了废弃的 Chunk 方法</li><li>添加了 <code>ChunkGraph</code></li><li>移除了 <code>ChunkGroup.setParents</code></li><li>移除了 <code>ChunkGroup.containsModule</code></li><li><code>ChunkGroup.remove</code> 不再断开该 Group 与 block 的连接</li><li><code>ChunkGroup.compareTo</code> 签名已变更</li><li><code>ChunkGroup.getChildrenByOrders</code> 签名已变更</li><li><code>ChunkGroup</code> 的 index 和 index 改名为 pre/post order index<ul><li>废弃了 old getter</li></ul></li><li><code>ChunkTemplate.hooks.modules</code> 签名已变更</li><li><code>ChunkTemplate.hooks.render</code> 签名已变更</li><li><code>ChunkTemplate.updateHashForChunk</code> 签名已变更</li><li>移除了 <code>Compilation.hooks.optimizeChunkOrder</code></li><li>移除了 <code>Compilation.hooks.optimizeModuleOrder</code></li><li>移除了 <code>Compilation.hooks.advancedOptimizeModuleOrder</code></li><li>移除了 <code>Compilation.hooks.optimizeDependenciesBasic</code></li><li>移除了 <code>Compilation.hooks.optimizeDependenciesAdvanced</code></li><li>移除了 <code>Compilation.hooks.optimizeModulesBasic</code></li><li>移除了 <code>Compilation.hooks.optimizeModulesAdvanced</code></li><li>移除了 <code>Compilation.hooks.optimizeChunksBasic</code></li><li>移除了 <code>Compilation.hooks.optimizeChunksAdvanced</code></li><li>移除了 <code>Compilation.hooks.optimizeChunkModulesBasic</code></li><li>移除了 <code>Compilation.hooks.optimizeChunkModulesAdvanced</code></li><li>移除了 <code>Compilation.hooks.optimizeExtractedChunksBasic</code></li><li>移除了 <code>Compilation.hooks.optimizeExtractedChunks</code></li><li>移除了 <code>Compilation.hooks.optimizeExtractedChunksAdvanced</code></li><li>移除了 <code>Compilation.hooks.afterOptimizeExtractedChunks</code></li><li>添加了 <code>Compilation.hooks.stillValidModule</code></li><li>添加了 <code>Compilation.hooks.statsPreset</code></li><li>添加了 <code>Compilation.hooks.statsNormalize</code></li><li>添加了 <code>Compilation.hooks.statsFactory</code></li><li>添加了 <code>Compilation.hooks.statsPrinter</code></li><li><code>Compilation.fileDependencies</code>，<code>Compilation.contextDependencies</code> 以及 <code>Compilation.missingDependencies</code> 现在变为了 LazySets</li><li>移除了 <code>Compilation.entries</code><ul><li>迁移：使用 <code>Compilation.entryDependencies</code> 代替</li></ul></li><li>移除了 <code>Compilation._preparedEntrypoints</code></li><li><code>dependencyTemplates</code> 现已改为 <code>DependencyTemplates</code> 的 class 类型，而不再是原始的 <code>Map</code></li><li>移除了 <code>Compilation.fileTimestamps</code> 和 <code>contextTimestamps</code><ul><li>迁移：使用 <code>Compilation.fileSystemInfo</code> 代替</li></ul></li><li>移除了 <code>Compilation.waitForBuildingFinished</code><ul><li>迁移：使用新队列</li></ul></li><li>移除了 <code>Compilation.addModuleDependencies</code></li><li>移除了 <code>Compilation.prefetch</code></li><li><code>Compilation.hooks.beforeHash</code> 会在创建模块 hash 值后被调用。<ul><li>迁移：使用 <code>Compiliation.hooks.beforeModuleHash</code> 代替</li></ul></li><li>移除了 <code>Compilation.applyModuleIds</code></li><li>移除了 <code>Compilation.applyChunkIds</code></li><li>添加了 <code>Compiler.root</code>，用于指向根编译器<ul><li>可用于缓存 WeakMaps 中的数据，而非静态作用域内的数据</li></ul></li><li>添加了 <code>Compiler.hooks.afterDone</code></li><li><code>Source.emitted</code> 不再由编译器设置<ul><li>迁移：使用 <code>Compilation.emittedAssets</code> 代替</li></ul></li><li>添加了 <code>Compiler/Compilation.compilerPath</code>：此为编译器在编译器树中唯一名称。（在根编译器范围内唯一）</li><li><code>Module.needRebuild</code> 已弃用<ul><li>迁移：使用 <code>Module.needBuild</code> 代替</li></ul></li><li><code>Dependency.getReference</code> 签名已变更</li><li><code>Dependency.getExports</code> 签名已变更</li><li><code>Dependency.getWarnings</code> 签名已变更</li><li><code>Dependency.getErrors</code> 签名已变更</li><li><code>Dependency.updateHash</code> 签名已变更</li><li>移除了 <code>Dependency.module</code></li><li>添加了 <code>DependencyTemplate</code> 的基类</li><li>移除了 <code>MultiEntryDependency</code></li><li>添加了 <code>EntryDependency</code></li><li>移除了 <code>EntryModuleNotFoundError</code></li><li>移除了 <code>SingleEntryPlugin</code></li><li>添加了 <code>EntryPlugin</code></li><li>添加了 <code>Generator.getTypes</code></li><li>添加了 <code>Generator.getSize</code></li><li><code>Generator.generate</code> 签名已变更</li><li>添加了 <code>HotModuleReplacementPlugin.getParserHooks</code></li><li><code>Parser</code> 被移至 <code>JavascriptParser</code> 中</li><li><code>ParserHelpers</code> 被移至 <code>JavascriptParserHelpers</code> 中</li><li>移除了 <code>MainTemplate.hooks.moduleObj</code></li><li>移除了 <code>MainTemplate.hooks.currentHash</code></li><li>移除了 <code>MainTemplate.hooks.addModule</code></li><li>移除了 <code>MainTemplate.hooks.requireEnsure</code></li><li>移除了 <code>MainTemplate.hooks.globalHashPaths</code></li><li>移除了 <code>MainTemplate.hooks.globalHash</code></li><li>移除了 <code>MainTemplate.hooks.hotBootstrap</code></li><li><code>MainTemplate.hooks</code> 部分签名已变更</li><li><code>Module.hash</code> 已弃用</li><li><code>Module.renderedHash</code> 已弃用</li><li>移除了 <code>Module.reasons</code></li><li><code>Module.id</code> 已弃用</li><li><code>Module.index</code> 已弃用</li><li><code>Module.index2</code> 已弃用</li><li><code>Module.depth</code> 已弃用</li><li><code>Module.issuer</code> 已弃用</li><li>移除了 <code>Module.profile</code></li><li>移除了 <code>Module.prefetched</code></li><li>移除了 <code>Module.built</code></li><li>移除了 <code>Module.used</code><ul><li>迁移：使用 <code>Module.getUsedExports</code> 代替</li></ul></li><li>Module.usedExports 已弃用<ul><li>MIGRATION: 使用 <code>Module.getUsedExports</code> 代替</li></ul></li><li><code>Module.optimizationBailout</code> 已弃用</li><li>移除了 <code>Module.exportsArgument</code></li><li><code>Module.optional</code> 已弃用</li><li>移除了 <code>Module.disconnect</code></li><li>移除了 <code>Module.unseal</code></li><li>移除了 <code>Module.setChunks</code></li><li><code>Module.addChunk</code> 已弃用</li><li><code>Module.removeChunk</code> 已弃用</li><li><code>Module.isInChunk</code> 已弃用</li><li><code>Module.isEntryModule</code> 已弃用</li><li><code>Module.getChunks</code> 已弃用</li><li><code>Module.getNumberOfChunks</code> 已弃用</li><li><code>Module.chunksIterable</code> 已弃用</li><li>移除了 <code>Module.hasEqualsChunks</code></li><li><code>Module.useSourceMap</code> 被移至 <code>NormalModule</code></li><li>移除了 <code>Module.addReason</code></li><li>移除了 <code>Module.removeReason</code></li><li>移除了 <code>Module.rewriteChunkInReasons</code></li><li>移除了 <code>Module.isUsed</code><ul><li>迁移：使用 <code>isModuleUsed</code>，<code>isExportUsed</code> 和 <code>getUsedName</code> 代替</li></ul></li><li><code>Module.updateHash</code> 签名已变更</li><li>移除了 <code>Module.sortItems</code></li><li>移除了 <code>Module.unbuild</code><ul><li>迁移：使用 <code>invalidateBuild</code> 代替</li></ul></li><li>添加了 <code>Module.getSourceTypes</code></li><li>添加了 <code>Module.getRuntimeRequirements</code></li><li><code>Module.size</code> 签名已变更</li><li><code>ModuleFilenameHelpers.createFilename</code> 签名已变更</li><li><code>ModuleProfile</code> 的 class 添加了许多数据</li><li>移除了 <code>ModuleReason</code></li><li><code>ModuleTemplate.hooks</code> 签名已变更</li><li><code>ModuleTemplate.render</code> 签名已变更</li><li>移除了 <code>Compiler.dependencies</code><ul><li>迁移：使用 <code>MultiCompiler.setDependencies</code> 代替</li></ul></li><li>移除了 <code>MultiModule</code></li><li>移除了 <code>MultiModuleFactory</code></li><li><code>NormalModuleFactory.fileDependencies</code>，<code>NormalModuleFactory.contextDependencies</code> 和 <code>NormalModuleFactory.missingDependencies</code> 现已使用 LazySets</li><li><code>RuntimeTemplate</code> 方法现已使用 <code>runtimeRequirements</code> 的参数</li><li>移除了 <code>serve</code> 属性</li><li>移除了 <code>Stats.jsonToString</code></li><li>移除了 <code>Stats.filterWarnings</code></li><li>移除了 <code>Stats.getChildOptions</code></li><li>移除了 <code>Stats</code> 的 helper 方法</li><li><code>Stats.toJson</code> 签名已变更（参数二被移除）</li><li>移除了 <code>ExternalModule.external</code></li><li>移除了 <code>HarmonyInitDependency</code></li><li><code>Dependency.getInitFragments</code> 已弃用<ul><li>迁移：使用 <code>apply</code> <code>initFragements</code> 代替</li></ul></li><li>DependencyReference 现将函数传递给模块，而非模块。</li><li>移除了 <code>HarmonyImportSpecifierDependency.redirectedId</code><ul><li>迁移：使用 <code>setId</code> 代替</li></ul></li><li>acorn 5 -&gt; 7</li><li>测试<ul><li>HotTestCases 现可为多个目标运行，包括 <code>async-node</code> <code>node</code> <code>web</code> <code>webworker</code></li><li>TestCases 现在可以用 <code>store: &quot;instant&quot;</code> 和 <code>store: &quot;pack&quot;</code> 来运行系统缓存。</li><li>TestCases 现在也可以为指定的模块 id 运行。</li></ul></li><li>工具添加了 import 的排序功能（在 CI 检查）</li><li>当 chunk 的名称与 id 等价时，运行时的 chunk 名称映射不再包含入口</li><li>将 <code>resolvedModuleId</code> <code>resolvedModuleIdentifier</code> 和 <code>resolvedModule</code> 添加到 Stats 的 reason 中，在完成作用域提升等优化之前，这些 reason 指向模块</li><li>在 Stats toString 的输出中展示 <code>resolvedModule</code></li><li>loader-runner 已升级：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svbG9hZGVyLXJ1bm5lci9yZWxlYXNlcy90YWcvdjMuMC4w">https://github.com/webpack/loader-runner/releases/tag/v3.0.0<i class="fa fa-external-link-alt"></i></span></li><li><code>Compilation</code> 中的 <code>file/context/missingDependencies</code> 因性能问题不再排序<ul><li>不要依赖排序</li></ul></li><li>webpack-sources 已升级：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1zb3VyY2VzL3JlbGVhc2VzL3RhZy92Mi4wLjAtYmV0YS4w">https://github.com/webpack/webpack-sources/releases/tag/v2.0.0-beta.0<i class="fa fa-external-link-alt"></i></span></li><li>删除了对 webpack-command 的支持</li><li>使用 schema-utils@2 进行模式校验</li><li><code>Compiler.assetEmitted</code> 改进了参数二，增加了更多信息</li><li>BannerPlugin 省略了尾部的空白字符</li><li>从 <code>LimitChunkCountPlugin</code> 中移除了 <code>minChunkSize</code> 选项</li><li>将与 javascript 相关的文件重组到子目录中<ul><li><code>webpack.JavascriptModulesPlugin</code> -&gt; <code>webpack.javascript.JavascriptModulesPlugin</code></li></ul></li><li>添加了 <code>Logger.getChildLogger</code></li><li>将 DllPlugin 中 entryOnly 选项的默认值变更为 true</li><li>移除了特殊请求的简化逻辑，使用单一的相对路径作为可读模块的名称</li><li>允许 webpack:// 将 SourceMaps 中的 url 改为相对于 webpack 根目录的路径</li><li>添加了 API 用于生成和处理针对 webpack 配置的 CLI 参数</li><li>当使用 System.js 作为 libraryTarget 时，在 System 中添加 <code>__system_context__</code> 作为上下文</li><li>为 DefinePlugin 添加 bigint 的支持</li><li>对基本环节添加 bigint 的支持，例如 maths</li><li>移除在创建 hash 后修改编译 hash 的功能</li><li>移除了 <code>HotModuleReplacementPlugin</code> 的 multiStep 模式</li><li>当使用嵌套的对象或数组时，<code>emitAsset</code> 中的 <code>assetInfo</code> 将被合并</li><li>当基于 <code>filename</code> 生成路径时，<code>[query]</code> 是一个有效占位符，如 asset</li><li>添加了 <code>Compilation.deleteAsset</code>，用于正确删除 asset 和非公用的相关资源</li><li>将 <code>require(&quot;webpack-sources&quot;)</code> 暴露为 <code>require(&quot;webpack&quot;).sources</code></li><li>terser 5</li><li>当 Webpack 作为句首时，Webpack 的 W 应该大写</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 4 于 2018 年 2 月发布。&lt;br&gt;从那时起，我们在没有重大更新的情况下，推出了很多功能。&lt;br&gt;我们知道，人们不喜欢带有突破性的重大变化。&lt;br&gt;尤其是 webpack，人们通常一年只接触两次，剩下的时间就 “只管用”了。&lt;br&gt;但是，在不做突破性改动的情况下推出功能也是有成本的：&lt;br&gt;我们不能做重大的 API 或架构改进。&lt;/p&gt;
&lt;p&gt;所以时不时就会有一个点，困难堆积起来，我们不得不做突破性的改动，才不至于把一切都搞乱。&lt;br&gt;这时候就需要一个新的主要版本了。&lt;br&gt;所以 webpack 5 包含了这些架构上的改进，以及没有这些改进就不可能实现的功能。&lt;/p&gt;
&lt;p&gt;这个主要版本也是修改一些默认值的机会，并与此同时出现的建议和规范保持一致。&lt;/p&gt;
&lt;p&gt;所以今天（2020-10-10）webpack 5.0.0 发布了，但这并不意味着它已经完成了，没有 bug，甚至功能完整。&lt;br&gt;就像 webpack 4 一样，我们通过修复问题和增加功能来继续开发。&lt;br&gt;在接下来的日子里，可能会有很多 bug 修复。功能会在以后出现。&lt;/p&gt;</summary>
    
    
    
    <category term="release" scheme="http://yonghong.tech/categories/release/"/>
    
    
    <category term="release" scheme="http://yonghong.tech/tags/release/"/>
    
    <category term="Webpack" scheme="http://yonghong.tech/tags/Webpack/"/>
    
    <category term="Frontend" scheme="http://yonghong.tech/tags/Frontend/"/>
    
    <category term="前端" scheme="http://yonghong.tech/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>技术爱好者周刊 第2期 | 2020年10月12日</title>
    <link href="http://yonghong.tech/weekly-002/"/>
    <id>http://yonghong.tech/weekly-002/</id>
    <published>2020-10-12T02:24:00.000Z</published>
    <updated>2020-10-12T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>技术爱好者周刊，每周一发布，欢迎提<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=">issue<i class="fa fa-external-link-alt"></i></span>贡献内容。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9waW5nY2FwLmNvbS9ibG9nLWNuL21hc3MtZGF0YS1iYXRjaC1wcm9jZXNzaW5nLXRlY2hub2xvZ3ktYmFzZWQtb24tdGlzcGFyay8=">基于 TiSpark 的海量数据批量处理技术<i class="fa fa-external-link-alt"></i></span><br>熟悉 TiSpark 的人都知道，TiSpark 是 Spark 的一个插件，它其实就是给予了 Spark 能够去访问 TiDB 底层分布式存储引擎 TiKV 或者 TiFlash 的能力。之前我们一直在解决读的问题，写问题并没有付出太多的时间去解决。今天就给大家揭秘，我们是怎样使用 TiSpark 去实现海量数据批处理，然后写入到 TiDB 里面去的。</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDkvMzAvd2FpbWFpLW1vYmlsZS1hcmNoaXRlY3R1cmUtZXZvbHV0aW9uLmh0bWw=">外卖客户端容器化架构的演进<i class="fa fa-external-link-alt"></i></span><br>好的架构要不断演变，进而去适应业务的发展。美团在移动端上的架构，也经历了组件化、平台化、RN混合化，到现在开始向容器化变迁。容器化架构充分地利用了现在的跨端技术，将动态化的能力最大化地赋予了业务。作为美团最为重要的业务之一，美团外卖移动端的架构演进是怎样的呢？本文将为你揭开背后的思考、技术细节以及实践。</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9saW51eHRveS5vcmcvYXJjaGl2ZXMvdmVyYWNyeXB0LWNvbmZpZ3VyYXRpb24tdGlwcy1mb3ItZHVhbGJvb3Qtc3lzdGVtLmh0bWw=">双引导系统下的 VeraCrypt 配置<i class="fa fa-external-link-alt"></i></span><br>对于笔记本电脑这种时常会携带外出的电子设备，基本的安全考量是必不可少的，而应用全盘加密（Full Disk Encryption）便是其中一个避免个人资料泄漏的重要措施。本文将简述如何在 Win Linux 双引导系统下使用 VeraCrypt 的配置技巧。</li></ul><a id="more"></a><h2 id="近期会议"><a href="#近期会议" class="headerlink" title="近期会议"></a>近期会议</h2><h3 id="2020-F5金融科技趋势线上研讨会"><a href="#2020-F5金融科技趋势线上研讨会" class="headerlink" title="2020 F5金融科技趋势线上研讨会"></a><span class="exturl" data-url="aHR0cDovL3d3dy5mNWNoaW5hbmV0d29ya3MuY29tL3BhcnRuZXIvd2VjaGF0L2RhdGFjZW50ZXIvaW52aXRlL2FjdGl2aXR5RGV0YWlscy5hc3A/bWVldGluZ2lkPTc2JnRyYWNraW5nY29kZT1mNWNvbW11bml0eQ==">2020 F5金融科技趋势线上研讨会<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cDovL3d3dy5mNWNoaW5hbmV0d29ya3MuY29tL3BhcnRuZXIvd2VjaGF0L2RhdGFjZW50ZXIvaW52aXRlL2FjdGl2aXR5RGV0YWlscy5hc3A/bWVldGluZ2lkPTc2JnRyYWNraW5nY29kZT1mNWNvbW11bml0eQ==">2020 F5金融科技趋势线上研讨会<i class="fa fa-external-link-alt"></i></span></p><p>F5作为应用交付领域的领导者，在过去的几年中每年都会举办一次针对金融科技领域的线下研讨会，反响热烈。由于疫情原因，今年的研讨会将以线上的形式开展，我们将继续保持高品质的内容输出，为广大金融从业者奉献一场专为金融行业烹制的饕餮盛宴。</p><p>本次研讨会将围绕助力金融行业数字化转型，银行4.0（开放式银行），大数据价值挖掘与安全，现代应用的敏捷发布与管理，分布式架构的最佳实践等热门话题展开分享和讨论。 届时，国有大行，全国股份制银行，各城商行，证券，基金，保险等数百名金融机构从业人员； F5合作伙伴腾讯云、天空卫士和DellEMC一线技术大咖； 以及来自金融科技界的专家们均会在云中相聚，共同在线分享金融科技创新成果及他们的最佳业务实践。</p><p>  会议主题：2020 F5金融科技趋势线上研讨会</p><p>  会议时间：10月16 - 10月17日（周五-周六）下午 1:30 - 6:00</p><p>  会议形式：线上研讨会</p><h3 id="IBM-数据与-AI-线上论坛"><a href="#IBM-数据与-AI-线上论坛" class="headerlink" title="IBM 数据与 AI 线上论坛"></a><span class="exturl" data-url="aHR0cHM6Ly9pYm0uNmNvbm5leC5jb20vZXZlbnQvY2hpbmFjZW50ZXIvREFWRi9sb2dpbg==">IBM 数据与 AI 线上论坛<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly9pYm0uNmNvbm5leC5jb20vZXZlbnQvY2hpbmFjZW50ZXIvREFWRi9sb2dpbg==">https://ibm.6connex.com/event/chinacenter/DAVF/login<i class="fa fa-external-link-alt"></i></span></p><p>如果将AI在企业的落地与扩展过程视为一场“障碍跑”，那么AI技能的缺乏、AI的可信性、数据的复杂性即是横亘途中的三大障碍。这个夏天开始，IBM将为您诚意打造”数有价，AI无界 | IBM数据与AI线上论坛”，三大专场为您逐一击破三大障碍，加速将AI愿景落地为现实！全球视角与本地洞察紧密结合，一次注册，畅享三大主题专场，全力助您冲刺AI落地与规模化之旅！</p><p>■ 7月15日：冲破人才瓶颈，AI赋能数字化技能专场 （内容回看已开放）<br>   您是否拥有让AI真正为企业所用的正确技能与人才？<br>   一起释放AI自动化的力量，弥补AI技能差距，降低AI技能门槛。</p><p>■ 8月26日：打开AI黑盒，构建可信企业级AI专场（内容回看已开放）<br>   您充分信任您取得的AI成果吗?<br>   一起探索如何构建和扩展可信任、可解释的企业级AI应用。</p><p>■ 10月21日：掘金复杂数据，让数据为业务所用专场（待开放）<br>   您的数据为AI做好准备了吗?<br>   一起实现数据的轻松获取与组织，确保数据简单、可访问且为业务就绪。</p><p>10月21日， “掘金复杂数据，让数据为业务所用专场”即将开场，精彩抢鲜放送：</p><p>精华内容 抢鲜剧透<br>· 接轨市场最前沿洞察<br>-现代化的企业数据架构如何降低您的运营与基础设施成本？<br>-企业数据治理的六大趋势您了解吗？<br>-可扩展及面向开源的高级统计分析、机器学习算法、文本分析如何助您锁定新商机？<br>-高性能计算及深度学习如何支持您将 AI 应用更快、更准、更安全地投入到业务应用中。<br>· 直通先行者成功经验<br>-讲述本土成功案例，复盘各行业先行者的成功轨迹<br>-更多全球成功案例供您按需点播，了解大洋彼岸的真实场景与实际应用<br>· 重塑您的数据与 AI 实践<br>-借力行业领先的 IBM 解决方案，了解IBM 明星产品如何助力数据与 AI 之旅</p><p>双重现场 双倍畅谈<br>· 第一现场，本地精彩案例分享及 IBM 全球数据与 AI 论坛精粹回看，全球专家与您共叙AI掘金经验<br>· 第二现场，带您亲临直播现场 —— IBM 中国数字销售中心，趣聊AI台前幕后事儿</p><h3 id="2020科大讯飞全球开发者大会"><a href="#2020科大讯飞全球开发者大会" class="headerlink" title="2020科大讯飞全球开发者大会"></a><span class="exturl" data-url="aHR0cHM6Ly8xMDI0LmlmbHl0ZWsuY29tLw==">2020科大讯飞全球开发者大会<i class="fa fa-external-link-alt"></i></span></h3><p>报名链接：<span class="exturl" data-url="aHR0cHM6Ly8xMDI0LmlmbHl0ZWsuY29tLw==">https://1024.iflytek.com/<i class="fa fa-external-link-alt"></i></span></p><p><img src="https://up-img.yonghong.tech/pic/2020/10/13-17-46-%E6%88%AA%E5%B1%8F2020-10-13%20%E4%B8%8B%E5%8D%885.46.37-XtozZN.png" alt="2020科大讯飞全球开发者大会"></p><p>科大讯飞全球1024开发者节是以AI开发者为受众群体的人工智能盛会，由科大讯飞发起并主办。选择在每年的10月24日，是因为在计算机世界中，1024是2的十次方，是二进制计数的基本计量单位之一，是1KB的字节数，因此组成了程序中的最基础基因序列。从事计算机工作的开发者就像一个个1024，以最具创新、最富热情的基础模块搭建起整个万物互联世界。 秉承“开放·合作·生态·共享”的理念，科大讯飞全球1024开发者节希望用最新最全的人工智能技术和产品促进跨行业链接、多领域碰撞、新技术开发，以科技之光、生态之念，立足当下、放眼未来。</p><h2 id="其他周报"><a href="#其他周报" class="headerlink" title="其他周报"></a>其他周报</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1YW55Zi93ZWVrbHkvYmxvYi9tYXN0ZXIvZG9jcy9pc3N1ZS0xMjgubWQ=">科技爱好者周刊（第 128 期）：这个社会是否正在变成”赛博朋克”？<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbGFyaXMxMTE5L2dvbGFuZ3dlZWtseS9ibG9iL21hc3Rlci9kb2NzL2lzc3VlLTA2NC5tZA==">Go语言爱好者周刊：第 64 期<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbmFueS93ZWVrbHkvYmxvYi9tYXN0ZXIvc29mdHdhcmUvMjAyMC8xMDA1Lm1k">2020.10.05 - I was wrong. CRDTs are the future<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1N3aWZ0T2xkRHJpdmVyL2lPUy1XZWVrbHkvYmxvYi9tYXN0ZXIvUmVwb3J0cy8yMDIwLyUyMzEzMS0yMDIwLjEwLjEyLm1k">老司机 iOS 周报 #131 | 2020-10-12<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9yd2Vla2x5Lm9yZy8yMDIwLTQwLmh0bWw=">R Weekly 2020-40 learnr tutorials, visual markdown editing, stat_layers<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;技术爱好者周刊，每周一发布，欢迎提&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dhbmd5b25naG9uZy95b25naG9uZy1tZS9pc3N1ZXM=&quot;&gt;issue&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;贡献内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9waW5nY2FwLmNvbS9ibG9nLWNuL21hc3MtZGF0YS1iYXRjaC1wcm9jZXNzaW5nLXRlY2hub2xvZ3ktYmFzZWQtb24tdGlzcGFyay8=&quot;&gt;基于 TiSpark 的海量数据批量处理技术&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;熟悉 TiSpark 的人都知道，TiSpark 是 Spark 的一个插件，它其实就是给予了 Spark 能够去访问 TiDB 底层分布式存储引擎 TiKV 或者 TiFlash 的能力。之前我们一直在解决读的问题，写问题并没有付出太多的时间去解决。今天就给大家揭秘，我们是怎样使用 TiSpark 去实现海量数据批处理，然后写入到 TiDB 里面去的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDkvMzAvd2FpbWFpLW1vYmlsZS1hcmNoaXRlY3R1cmUtZXZvbHV0aW9uLmh0bWw=&quot;&gt;外卖客户端容器化架构的演进&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;好的架构要不断演变，进而去适应业务的发展。美团在移动端上的架构，也经历了组件化、平台化、RN混合化，到现在开始向容器化变迁。容器化架构充分地利用了现在的跨端技术，将动态化的能力最大化地赋予了业务。作为美团最为重要的业务之一，美团外卖移动端的架构演进是怎样的呢？本文将为你揭开背后的思考、技术细节以及实践。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9saW51eHRveS5vcmcvYXJjaGl2ZXMvdmVyYWNyeXB0LWNvbmZpZ3VyYXRpb24tdGlwcy1mb3ItZHVhbGJvb3Qtc3lzdGVtLmh0bWw=&quot;&gt;双引导系统下的 VeraCrypt 配置&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;对于笔记本电脑这种时常会携带外出的电子设备，基本的安全考量是必不可少的，而应用全盘加密（Full Disk Encryption）便是其中一个避免个人资料泄漏的重要措施。本文将简述如何在 Win Linux 双引导系统下使用 VeraCrypt 的配置技巧。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/categories/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
    
    <category term="技术爱好者周刊" scheme="http://yonghong.tech/tags/%E6%8A%80%E6%9C%AF%E7%88%B1%E5%A5%BD%E8%80%85%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>ARPU 是什么？ ARPPU 是什么？累计 ARPU 是什么？</title>
    <link href="http://yonghong.tech/wiki/arpu-and-arppu/"/>
    <id>http://yonghong.tech/wiki/arpu-and-arppu/</id>
    <published>2020-10-11T02:00:00.000Z</published>
    <updated>2020-10-11T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ARPU-每用户平均收入或平均每用户收入"><a href="#ARPU-每用户平均收入或平均每用户收入" class="headerlink" title="ARPU 每用户平均收入或平均每用户收入"></a>ARPU 每用户平均收入或平均每用户收入</h2><p>ARPU: the Average Revenue Per User </p><blockquote><p><strong>ARPU = 应用收益 / 应用活跃用户</strong></p></blockquote><p>ARPU 这个指标计算的是某时间段内平均每个活跃用户为应用创造的收入。</p><p>ARPU 的计算中，所有的用户都被纳入了计算范围——无论是付费用户或非付费用户。ARPU 是评估应用变现有效性的指标：ARPU 越高，就代表用户在这段时间内为应用带来的变现收入就越多。 </p><p>ARPU可用于评估应用中的变动是否能有效提升变现收益：如果ARPU提升，证明应用的变动有利于提升应用变现收益；如果ARPU不升反降，应用开发者可能就需要确认一下变动的有效性了。</p><h2 id="ARPPU-每付费用户平均收益"><a href="#ARPPU-每付费用户平均收益" class="headerlink" title="ARPPU 每付费用户平均收益"></a>ARPPU 每付费用户平均收益</h2><p>ARPPU: the Average Revenue Per Paying User</p><blockquote><p><strong>ARPPU = 应用收益 / 应用付费用户</strong></p></blockquote><p>由于分母上数值较小（付费用户&lt;全体活跃用户），对于同一时间的同一应用而言，ARPPU的数值会明显高于ARPU。</p><p>ARPPU 这个指标考核的是某时间段内平均每个付费用户为应用创造的收入。在用户数量上，ARPPU只考虑某一时间段内的付费用户，而非该时间段内所有的活跃用户。</p><a id="more"></a><p>ARPPU能够反映付费用户为你的应用带来了多少收益，显示出一个忠诚付费用户实际上愿意支付的金额。同时，这个指标也可以显示用户对一些付费项目的反应。</p><p>应用提高收费价格，ARPPU会有一定的提升。但这并不意味着盈利也随之增长，因为涨价往往会让一些无法接受新价格的用户停止付费，导致付费用户规模下降。</p><p>因此，ARPU与ARPPU两者的关系其实可以这样表达：</p><blockquote><p><strong>ARPU = ARPPU * 付费用户比例</strong></p></blockquote><p>我们依然用一个例子来理解一下：</p><p>假如你的应用有 10,000 个活跃用户，其中 30 个是付费用户，你的月收入是 30,000 美金。</p><p>那么，ARPU = $30,000 / 10,000 = $3</p><p>也就是说，一个活跃用户平均一个月能给你带来$3的收益。</p><p>同时，ARPPU = $30,000 / 30 = $1,000</p><p>也就是说，一个付费用户平均在一个月能给你带来 $1,000 的收益。</p><p>在这种情况下，付费用户规模为 30 / 10,000 = 0.3%</p><p>ARPU($3) = ARPPU($1,000) * 付费用户规模(0.3%)</p><h2 id="累计-ARPU"><a href="#累计-ARPU" class="headerlink" title="累计 ARPU"></a>累计 ARPU</h2><p>在实际应用中，还有一个十分有用的指标：累计ARPU。</p><p>如果说ARPU计算的是一个时间段内全部用户产生的应用收益，累计ARPU则聚焦在一定时间段内的某组用户群体对应用产生的收益。</p><p>累计ARPU通常以一段时间为计算单位，比如说1天、7天、14天、30天等等。举个例子，ARPU可以用于计算10月1日下载应用的100名用户在30天内平均每人为应用带来了多少收益。</p><p>因此，累积ARPU是一个不断增长的数值，因为计算的用户对象数值不变，但是产生的收益却在一直增长。如果应用表现良好，流量购买就发挥效果，累积ARPU的值迟早都会超过CPI（cost per install，单次安装成本）。这就意味着，你买的量开始给你盈利了，ROI从此超过100%。</p><p>当时间范围延长，累积ARPU无限接近一个极限值，这就是我们常说的LTV指数了。</p><p><img src="https://up-img.yonghong.tech/pic/2020/10/11-10-32-JsbDho-9YHAaC.png" alt="累计 ARPU"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ARPU: the Average Revenue Per User 有时候也是 the Average Revenue Per Unit</p><p>ARPA: the Average Revenue Per Account</p><p>ARPC: the Average Revenue Per Customer</p><p>LTV: Life Time Value 用户的终身价值或用户生命周期价值</p><p>CAC: Customer Acquisition Cost 用户获取成本</p><p>ROI: Return on Investment 投资回报</p><p>ROAS: Return on Advertising Spend 广告投资回报</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ARPU-每用户平均收入或平均每用户收入&quot;&gt;&lt;a href=&quot;#ARPU-每用户平均收入或平均每用户收入&quot; class=&quot;headerlink&quot; title=&quot;ARPU 每用户平均收入或平均每用户收入&quot;&gt;&lt;/a&gt;ARPU 每用户平均收入或平均每用户收入&lt;/h2&gt;&lt;p&gt;ARPU: the Average Revenue Per User &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ARPU = 应用收益 / 应用活跃用户&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ARPU 这个指标计算的是某时间段内平均每个活跃用户为应用创造的收入。&lt;/p&gt;
&lt;p&gt;ARPU 的计算中，所有的用户都被纳入了计算范围——无论是付费用户或非付费用户。ARPU 是评估应用变现有效性的指标：ARPU 越高，就代表用户在这段时间内为应用带来的变现收入就越多。 &lt;/p&gt;
&lt;p&gt;ARPU可用于评估应用中的变动是否能有效提升变现收益：如果ARPU提升，证明应用的变动有利于提升应用变现收益；如果ARPU不升反降，应用开发者可能就需要确认一下变动的有效性了。&lt;/p&gt;
&lt;h2 id=&quot;ARPPU-每付费用户平均收益&quot;&gt;&lt;a href=&quot;#ARPPU-每付费用户平均收益&quot; class=&quot;headerlink&quot; title=&quot;ARPPU 每付费用户平均收益&quot;&gt;&lt;/a&gt;ARPPU 每付费用户平均收益&lt;/h2&gt;&lt;p&gt;ARPPU: the Average Revenue Per Paying User&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ARPPU = 应用收益 / 应用付费用户&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于分母上数值较小（付费用户&amp;lt;全体活跃用户），对于同一时间的同一应用而言，ARPPU的数值会明显高于ARPU。&lt;/p&gt;
&lt;p&gt;ARPPU 这个指标考核的是某时间段内平均每个付费用户为应用创造的收入。在用户数量上，ARPPU只考虑某一时间段内的付费用户，而非该时间段内所有的活跃用户。&lt;/p&gt;</summary>
    
    
    
    <category term="wiki" scheme="http://yonghong.tech/categories/wiki/"/>
    
    
    <category term="wiki" scheme="http://yonghong.tech/tags/wiki/"/>
    
    <category term="ARPU" scheme="http://yonghong.tech/tags/ARPU/"/>
    
    <category term="ARPPU" scheme="http://yonghong.tech/tags/ARPPU/"/>
    
    <category term="ARPA" scheme="http://yonghong.tech/tags/ARPA/"/>
    
    <category term="ARPC" scheme="http://yonghong.tech/tags/ARPC/"/>
    
    <category term="ROI" scheme="http://yonghong.tech/tags/ROI/"/>
    
    <category term="每用户平均收入" scheme="http://yonghong.tech/tags/%E6%AF%8F%E7%94%A8%E6%88%B7%E5%B9%B3%E5%9D%87%E6%94%B6%E5%85%A5/"/>
    
    <category term="平均每用户收入" scheme="http://yonghong.tech/tags/%E5%B9%B3%E5%9D%87%E6%AF%8F%E7%94%A8%E6%88%B7%E6%94%B6%E5%85%A5/"/>
    
    <category term="每帐户平均收入" scheme="http://yonghong.tech/tags/%E6%AF%8F%E5%B8%90%E6%88%B7%E5%B9%B3%E5%9D%87%E6%94%B6%E5%85%A5/"/>
    
    <category term="每客户平均收入" scheme="http://yonghong.tech/tags/%E6%AF%8F%E5%AE%A2%E6%88%B7%E5%B9%B3%E5%9D%87%E6%94%B6%E5%85%A5/"/>
    
    <category term="每个付费用户的平均收入" scheme="http://yonghong.tech/tags/%E6%AF%8F%E4%B8%AA%E4%BB%98%E8%B4%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%B9%B3%E5%9D%87%E6%94%B6%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>软件推荐 | 更好用的图床(文件)上传客户端 uPic</title>
    <link href="http://yonghong.tech/recommend/upic/"/>
    <id>http://yonghong.tech/recommend/upic/</id>
    <published>2020-10-10T09:00:00.000Z</published>
    <updated>2020-10-10T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlZTFrL3VQaWM=">uPic(upload Picture)<i class="fa fa-external-link-alt"></i></span> 是一款 macOS 端的图床(文件)上传客户端。</p><p>💡 特点：：无论是本地文件、或者屏幕截图都可自动上传，菜单栏显示实时上传进度。上传完成后文件链接自动复制到剪切板，让你无论是在写博客、灌水聊天都能快速插入图片。 连接格式可以是普通 URL、HTML 或者 Markdown，仍由你掌控。</p><p><strong>🔋 支持图床：</strong> <span class="exturl" data-url="aHR0cHM6Ly9zbS5tcy8=">smms<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly93d3cudXB5dW4uY29tL3Byb2R1Y3RzL2ZpbGUtc3RvcmFnZQ==">又拍云 USS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cucWluaXUuY29tL3Byb2R1Y3RzL2tvZG8=">七牛云 KODO<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L29zcy8=">阿里云 OSS<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2Nvcw==">腾讯云 COS<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5iYWlkdS5jb20vcHJvZHVjdC9ib3MuaHRtbA==">百度云 BOS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20v">微博<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucw==">Github<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vcHJvZmlsZS9wZXJzb25hbF9hY2Nlc3NfdG9rZW5z">Gitee<i class="fa fa-external-link-alt"></i></span>、 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9jbi9zMy8=">Amazon S3<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9pbWd1ci5jb20v">Imgur<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnN2ZW5kLmNjL3VwaWMvdHV0b3JpYWxzL2N1c3RvbQ==">自定义上传接口<i class="fa fa-external-link-alt"></i></span>、…</p><a id="more"></a><h2 id="🚀-如何安装"><a href="#🚀-如何安装" class="headerlink" title="🚀 如何安装"></a>🚀 如何安装</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><h4 id="1-Homebrew-推荐"><a href="#1-Homebrew-推荐" class="headerlink" title="1.Homebrew(推荐):"></a>1.Homebrew(推荐):</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span>upic</span><br></pre></td></tr></table></figure><h4 id="2-手动"><a href="#2-手动" class="headerlink" title="2.手动"></a>2.手动</h4><p>从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlZTFrL3VQaWMvcmVsZWFzZXM=">Github release<i class="fa fa-external-link-alt"></i></span> 下载。</p><p><strong>如果在国内访问 Github 下载困难的，可以从<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZ2VlMWsvdVBpYy9yZWxlYXNlcw==">Gitee release<i class="fa fa-external-link-alt"></i></span>下载。</strong></p><h3 id="检查-Finder-扩展权限"><a href="#检查-Finder-扩展权限" class="headerlink" title="检查 Finder 扩展权限"></a>检查 Finder 扩展权限</h3><ul><li><p>1.打开 uPic</p></li><li><p>2.打开<code>系统偏好设置</code> - <code>扩展</code> - <code>访达扩展</code> 确保 <code>uPicFinderExtension</code>是勾选状态</p></li></ul><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f66696e6465722d657874656e73696f6e2e706e67-DYYKob.png" width="650px" style="margin: 0 auto;"/><h2 id="🕹-使用方式"><a href="#🕹-使用方式" class="headerlink" title="🕹 使用方式"></a>🕹 使用方式</h2><table><thead><tr><th>功能</th><th>描述</th><th>预览</th></tr></thead><tbody><tr><td><strong>🖥 选择文件上传</strong></td><td>从<code>Finder</code>选择文件上传。<code>可设置全局快捷键</code></td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f73656c65637446696c652e676966-VqFefp.gif" alt="img"></td></tr><tr><td><strong>⌨️ 复制文件上传</strong></td><td>上传已拷贝到剪切板的文件。<code>可设置全局快捷键</code></td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f7061737465626f6172642e676966-hBiI5s.gif" alt="img"></td></tr><tr><td><strong>📸 截图上传</strong></td><td>直接拉框截图上传。<code>可设置全局快捷键</code></td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f73637265656e73686f742e676966-91Kj7l.gif" alt="img"></td></tr><tr><td><strong>🖱 拖拽本地文件上传</strong></td><td>拖拽文件到状态栏上传</td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f6472616746696c652e676966-5Dzzbw.gif" alt="img"></td></tr><tr><td><strong>🖱 拖拽浏览器图片上传</strong></td><td>从浏览器拖拽图片到状态栏上传</td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f6472616746726f6d42726f777365722e676966-QYEBH7.gif" alt="img"></td></tr><tr><td><strong>📂 Finder 中右键上传</strong></td><td>右击文件上传</td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f636f6e746578746d656e752e676966-7Nmsoo.gif" alt="img"></td></tr><tr><td><strong>⌨️ 命令行上传</strong></td><td>通过执行命令调用 uPic 上传文件</td><td><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f636c692e676966-uqE7yy.gif" alt="img"></td></tr></tbody></table><h2 id="🧰-更多功能"><a href="#🧰-更多功能" class="headerlink" title="🧰 更多功能"></a>🧰 更多功能</h2><h3 id="1-全局快捷键"><a href="#1-全局快捷键" class="headerlink" title="1.全局快捷键"></a>1.全局快捷键</h3><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f73686f7274637574732e706e67-eWTput.png" width="450px" style="margin: 0 auto;"/><h3 id="2-上传历史"><a href="#2-上传历史" class="headerlink" title="2. 上传历史"></a>2. 上传历史</h3><img src="https://up-img.yonghong.tech/pic/2020/10/10-17-07-68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f676565316b2f6f7373406d61737465722f73637265656e73686f742f755069632d636e2f686973746f72792e706e67-Ad5U62.png" width="650px" style="margin: 0 auto;"/>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2dlZTFrL3VQaWM=&quot;&gt;uPic(upload Picture)&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 是一款 macOS 端的图床(文件)上传客户端。&lt;/p&gt;
&lt;p&gt;💡 特点：：无论是本地文件、或者屏幕截图都可自动上传，菜单栏显示实时上传进度。上传完成后文件链接自动复制到剪切板，让你无论是在写博客、灌水聊天都能快速插入图片。 连接格式可以是普通 URL、HTML 或者 Markdown，仍由你掌控。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🔋 支持图床：&lt;/strong&gt; &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zbS5tcy8=&quot;&gt;smms&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cudXB5dW4uY29tL3Byb2R1Y3RzL2ZpbGUtc3RvcmFnZQ==&quot;&gt;又拍云 USS&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cucWluaXUuY29tL3Byb2R1Y3RzL2tvZG8=&quot;&gt;七牛云 KODO&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L29zcy8=&quot;&gt;阿里云 OSS&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2Nvcw==&quot;&gt;腾讯云 COS&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9jbG91ZC5iYWlkdS5jb20vcHJvZHVjdC9ib3MuaHRtbA==&quot;&gt;百度云 BOS&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93ZWliby5jb20v&quot;&gt;微博&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucw==&quot;&gt;Github&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRlZS5jb20vcHJvZmlsZS9wZXJzb25hbF9hY2Nlc3NfdG9rZW5z&quot;&gt;Gitee&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9jbi9zMy8=&quot;&gt;Amazon S3&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9pbWd1ci5jb20v&quot;&gt;Imgur&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLnN2ZW5kLmNjL3VwaWMvdHV0b3JpYWxzL2N1c3RvbQ==&quot;&gt;自定义上传接口&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;、…&lt;/p&gt;</summary>
    
    
    
    <category term="软件推荐" scheme="http://yonghong.tech/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="推荐" scheme="http://yonghong.tech/tags/%E6%8E%A8%E8%8D%90/"/>
    
    <category term="软件推荐" scheme="http://yonghong.tech/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    <category term="uPic" scheme="http://yonghong.tech/tags/uPic/"/>
    
    <category term="图床" scheme="http://yonghong.tech/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>网站推荐 | 基于CC0协议的免版权图库 Hippopx</title>
    <link href="http://yonghong.tech/recommend/hippopx/"/>
    <id>http://yonghong.tech/recommend/hippopx/</id>
    <published>2020-10-09T14:24:00.000Z</published>
    <updated>2020-10-09T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaGlwcG9weC5jb20v">Hippopx<i class="fa fa-external-link-alt"></i></span> 是一个基于 CC0 协议的免版权图库。Hippopx 提供的图像可免费用于个人和商业项目。网站提供了多种语言，包括中文。该网站上的每一张图片都打上了相关内容的标签，图片的命名也和内容相关。</p><h2 id="网站截图"><a href="#网站截图" class="headerlink" title="网站截图"></a>网站截图</h2><p><img src="https://up-img.yonghong.tech/pic/2020/10/09-22-44-%E6%88%AA%E5%B1%8F2020-10-09%20%E4%B8%8B%E5%8D%8810.37.12-lothe7.png" alt="Hippopx首页"></p><a id="more"></a><p><img src="https://up-img.yonghong.tech/pic/2020/10/09-22-45-%E6%88%AA%E5%B1%8F2020-10-09%20%E4%B8%8B%E5%8D%8810.38.09-dK13jp.png" alt="Hippopx热门图片"></p><h2 id="什么是CC0？"><a href="#什么是CC0？" class="headerlink" title="什么是CC0？"></a>什么是CC0？</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL3B1YmxpY2RvbWFpbi96ZXJvLzEuMC9kZWVkLnpo">https://creativecommons.org/publicdomain/zero/1.0/deed.zh<i class="fa fa-external-link-alt"></i></span></p><p><strong>CC0 1.0 通用 (CC0 1.0) 公共领域贡献</strong> 意味着 <strong>无著作权</strong></p><p>在作品上适用该文本的人已经将作品 贡献 至公共领域，在法律允许的范围，放弃所有他在全世界范围内基于著作权法对作品享有的权利，包括所有相关权利和邻接权利。</p><p>您可以复制、修改、发行和表演本作品，甚至可用于商业性目的，都无需要求同意。请看以下其他信息。</p><p>CC0不影响任何人可能拥有的专利权或商标权，也不影响其他人可能拥有的对本作品本身的权利，或者决定本作品如何使用的权利，比如形象权或隐私权。</p><p>除非另有明确声明，本文件项下的作品关联人，在可适用法律所允许的最大限度内，不对本作品提供担保，不承担因本作品使用产生的责任。</p><p>当使用或引用本作品时，您不得暗示 作者或声明人为您的行为背书。</p><h2 id="条款"><a href="#条款" class="headerlink" title="条款"></a>条款</h2><p>Hippopx 提供的图像可免费用于个人和商业项目，本页列出了商业项目的定义和使用条件。请阅读全文，从 Hippopx 下载图像，您需要同意下面规定的所有条款和条件。</p><h2 id="什么是商业用途？"><a href="#什么是商业用途？" class="headerlink" title="什么是商业用途？"></a>什么是商业用途？</h2><p>来自本网站的图像可用于几乎任何商业设计项目，这包括大多数形式的数字或印刷创意：网页设计，应用程序设计，WordPress主题，PSD和HTML模板等。博客和社交媒体团队也可以自由地使用我们的图片。</p><h2 id="您是否需要提供图片来源？"><a href="#您是否需要提供图片来源？" class="headerlink" title="您是否需要提供图片来源？"></a>您是否需要提供图片来源？</h2><p>不必须，但它是提供图片来源是推荐的，特别是对于商业 WordPress 主题和网络模板。如果您无法提供图片来源，请通过社交媒体和博客与同事和朋友分享此网站。这个网站分享的越多，我们可以与您分享的图片也更多。</p><h2 id="商业形象使用注意事项"><a href="#商业形象使用注意事项" class="headerlink" title="商业形象使用注意事项"></a>商业形象使用注意事项</h2><h3 id="品牌知名度"><a href="#品牌知名度" class="headerlink" title="品牌知名度"></a>品牌知名度</h3><p>我们的一些图片包含来自知名品牌和已注册商标的公司的产品。这些商标需要得到尊重和承认。</p><h3 id="型号版本"><a href="#型号版本" class="headerlink" title="型号版本"></a>型号版本</h3><p>Hippopx 提供真实世界的摄影。这意味着，我们提供的任何包含人员的图像可能未通过模型发布，因此这些图像可能不适合某些类型的商业用途。</p><h3 id="产权"><a href="#产权" class="headerlink" title="产权"></a>产权</h3><p>某些图像可能包含拥有图像和产权的私营公司拥有的私人建筑。这些图像可能不适合某些类型的商业用途，因为您需要获得有关公司的许可才能合法发布图像。</p><h2 id="禁止使用"><a href="#禁止使用" class="headerlink" title="禁止使用"></a>禁止使用</h2><p>您不得将我们的图像用于色情、非法或其他不道德目的，或以可能给被描绘的人起坏名声的方式使用，或暗示可识别的人、品牌或组织认可产品和服务。您不能在免费库存照片网站或应用程序上使用这些图像或重新分发这些图片，您不能出售和/或重新分发这些图像，暗示您是摄影师;你不能出售和/或重新分发这些图像作为股票摄影</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>Hippopx 对因不正确或不当使用从本网站下载的任何图像而导致的任何版权侵犯不负任何责任。Hippopx 的所有用户下载和使用我们的映像的风险由他们自己承担，并完全负责后续的图像使用和应用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuaGlwcG9weC5jb20v&quot;&gt;Hippopx&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 是一个基于 CC0 协议的免版权图库。Hippopx 提供的图像可免费用于个人和商业项目。网站提供了多种语言，包括中文。该网站上的每一张图片都打上了相关内容的标签，图片的命名也和内容相关。&lt;/p&gt;
&lt;h2 id=&quot;网站截图&quot;&gt;&lt;a href=&quot;#网站截图&quot; class=&quot;headerlink&quot; title=&quot;网站截图&quot;&gt;&lt;/a&gt;网站截图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://up-img.yonghong.tech/pic/2020/10/09-22-44-%E6%88%AA%E5%B1%8F2020-10-09%20%E4%B8%8B%E5%8D%8810.37.12-lothe7.png&quot; alt=&quot;Hippopx首页&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网站推荐" scheme="http://yonghong.tech/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站推荐" scheme="http://yonghong.tech/tags/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    <category term="推荐" scheme="http://yonghong.tech/tags/%E6%8E%A8%E8%8D%90/"/>
    
    <category term="Hippopx" scheme="http://yonghong.tech/tags/Hippopx/"/>
    
    <category term="无版权图库" scheme="http://yonghong.tech/tags/%E6%97%A0%E7%89%88%E6%9D%83%E5%9B%BE%E5%BA%93/"/>
    
    <category term="图库" scheme="http://yonghong.tech/tags/%E5%9B%BE%E5%BA%93/"/>
    
  </entry>
  
</feed>
