<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honng</title>
  
  <subtitle>Stay Hungry. Stay Foolish.</subtitle>
  <link href="http://yonghong.tech/atom.xml" rel="self"/>
  
  <link href="http://yonghong.tech/"/>
  <updated>2021-12-12T02:24:00.000Z</updated>
  <id>http://yonghong.tech/</id>
  
  <author>
    <name>Honng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好文分享 第4期</title>
    <link href="http://yonghong.tech/bookmarks/0004/"/>
    <id>http://yonghong.tech/bookmarks/0004/</id>
    <published>2021-12-12T02:24:00.000Z</published>
    <updated>2021-12-12T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==">数据人的“大考”：AnalyticDB如何强力支撑双11？<i class="fa fa-external-link-alt"></i></span><br>每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。</li></ul><span id="more"></span><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMlBSWF92VmhpM1N5Z3JaeWRCZkc2dw==">干货 | 携程Elasticsearch数据同步实践<i class="fa fa-external-link-alt"></i></span><br>Elasticsearch是最近几年非常热门的分布式搜索和数据分析引擎，携程内部不仅使用ES实现了大规模的日志平台，也广泛使用ES实现了各个业务场景的搜索、推荐等功能。本文聚焦在业务搜索的场景分享了我们在做数据同步方面的思考和实践，希望能对大家有所启发。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRlR1aml0d2tNbDVMUmRiV0N4T0VHQQ==">京东到家MySQL容器化，为何首选Docker而非K8S？<i class="fa fa-external-link-alt"></i></span><br>本文根据詹乡泉老师在〖deeplus直播第250期〗线上分享演讲内容整理而成。（文末有获取本期PPT&amp;回放的方式，不要错过），分享视频：<span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9za1psTGhxRFVkYw==">https://youtu.be/skZlLhqDUdc<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFqaWFuL3AvMTEyMjM5OTIuaHRtbA==">Elasticsearch 技术分析（九）：全文搜索引擎Elasticsearch，这篇文章给讲透了！<i class="fa fa-external-link-alt"></i></span><br>本篇主要是基于之前的博文的一个总结，希望通过这篇文章能让读者大致了解Elasticsearch是做什么的以及它的使用和基本原理。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOC9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMS8=">ClickHouse集群搭建（一）<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8yOS9DbGlja0hvdXNlJUU5JTlCJTg2JUU3JUJFJUE0JUU2JTkwJUFEJUU1JUJCJUJBMi8=">ClickHouse集群搭建（二）<i class="fa fa-external-link-alt"></i></span><br>ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9saW51eHRveS5vcmcvYXJjaGl2ZXMvdmVyYWNyeXB0LWNvbmZpZ3VyYXRpb24tdGlwcy1mb3ItZHVhbGJvb3Qtc3lzdGVtLmh0bWw=">双引导系统下的 VeraCrypt 配置<i class="fa fa-external-link-alt"></i></span><br>对于笔记本电脑这种时常会携带外出的电子设备，基本的安全考量是必不可少的，而应用全盘加密（Full Disk Encryption）便是其中一个避免个人资料泄漏的重要措施。本文将简述如何在 Win Linux 双引导系统下使用 VeraCrypt 的配置技巧。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMTUvbXQtYWlvcHMtaG9yYWUuaHRtbA==">AIOps在美团的探索与实践——故障发现篇<i class="fa fa-external-link-alt"></i></span><br>美团技术团队在行业、业务领域知识和运维领域的知识等方面有着长期的积累，已经沉淀出不少工具和产品，实现了自动化运维，同时在AIOps方面也有一些初步的成果。我们希望通过在AIOps上持续投入、迭代和钻研，将之前积累的行业、业务和运维领域的知识应用到AIOps中，从而能让AIOps为业务研发、产品和运营团队赋能，提高整个公司的生产效率。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNWU5Y21xdnZhSWhOczhDTlZKdU5vZw==">基于chaosblade的故障注入平台实践<i class="fa fa-external-link-alt"></i></span><br>当今社会互联网应用越来越广泛，用户量日益剧增。在人们对互联网服务的依赖性增大的同时，也对服务的可用性和体验感有了更高的要求。那么如何保障服务在运营过程中能一直给用户提供稳定的、不间断的、可靠可信的服务呢？例如一个金融产品，如果出现过一次问题，那可能带来巨大的损失。大家都知道金融产品的系统架构和服务逻辑是相当复杂的，至此大家都会第一时间联想到测试工程师，他们会通过单元测试、集成测试、性能测试等来验证服务的稳定性。但尽管如此，也是远远不够的，因为错误可以在任何时间以任何形式发生，尤其是对分布式系统。所以这里就需要引入混沌工程（Chaos Engineering）。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMTUvYWNtbW0tMjAyMC1hbnN3ZXItZHJpdmVuLXZpc3VhbC1zdGF0ZS1lc3RpbWF0b3IuaHRtbA==">对话任务中的“语言-视觉”信息融合研究<i class="fa fa-external-link-alt"></i></span><br>目标导向的视觉对话是“视觉-语言”交叉领域中一个较新的任务，它要求机器能通过多轮对话完成视觉相关的特定目标。该任务兼具研究意义与应用价值。日前，北京邮电大学王小捷教授团队与美团AI平台NLP中心团队合作，在目标导向的视觉对话任务上的研究论文《Answer-Driven Visual State Estimator for Goal-Oriented Visual Dialogue-commentCZ》被国际多媒体领域顶级会议ACMMM 2020录用。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjcvc2VsZi1kcml2aW5nLWluLXNpbXVsYXRpb24tc3lzdGVtLmh0bWw=">美团无人车引擎在仿真中的实践<i class="fa fa-external-link-alt"></i></span><br>过去几年，自动驾驶技术有了飞速发展。国内也出现了许多自动驾驶创业企业，这些公司以百度开源项目Apollo为起点，大都可以直接进行公开道路测试，公开道路测试也成为促进技术进步的主要方法。基础问题得以解决之后，行业面临的更多是长尾问题，依靠路测驱动自动驾驶能力建设的方式变得不再高效，离线仿真的地位日益凸显。行业头部企业在仿真的投入十分巨大，Waymo公司2019年公布的仿真里程是100亿英里，是路测里程的1000倍。相应地，美团无人车团队在仿真上的投入也在逐渐增大。在仿真平台的建设中，团队发现公开道路测试和仿真测试看似相似，实际上差异巨大：在车载环境下，为了确保系统的稳定运行，通常要保证一定资源处于空闲状态；仿真环境则不同，如何高效利用资源，如何实现压榨资源的同时确保仿真结果与路测结果一致成为了关键目标。在应对这些挑战的过程中，美团提出了无人车引擎的概念，将车载与离线环境的差异隔离起来：功能模块无需任何更改便可以满足两种场景的需要。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRGtDR3Vzem5IOEY4cDM5b1JMdU5CUQ==">TensorFlow Serving 模型更新毛刺的完全优化实践<i class="fa fa-external-link-alt"></i></span><br>在点击率CTR（Click Through Rate）预估算法的推荐场景中使用 Tensorflow Serving热更新较大模型时会出现短暂的延时毛刺，导致业务侧超时，降低算法效果，为了解决这个问题，爱奇艺深度学习平台团队经过多个阶段的优化实践，最后对 TF Serving 和 Tensorflow 的源码进行深入优化，将模型热更新时的毛刺现象解决，本文将分享Tensorflow Serving的优化细节，希望对大家有帮助。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvYW1lOVhMMjE4RksxRHVfYnkzX0w1QQ==">日志异常检测初步实践与探索<i class="fa fa-external-link-alt"></i></span><br>日志的主要目的是记录系统（包括服务和业务等）状态和重要的事件帮助定位系统的问题。日志对于理解系统状态和定位性能问题至关重要。因此，日志是在线监控和异常检测的一个重要信息源。在很多业务和服务的故障自愈过程中，日志异常检测与根因分析是必不可少的一环。但是之前我们通常都使用人工的方式来定位问题，主要包括人工检测与分析和人工学习错误日志提取正则表达式来进行故障定位这两种方式。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvY2lrbS0yMDIwLW5scC5odG1s">CIKM 2020 | 一文详解美团6篇精选论文<i class="fa fa-external-link-alt"></i></span><br>AI平台/搜索与NLP部/NLP中心/知识图谱组共有六篇论文（其中4篇长文，2篇短文）被国际会议CIKM2020接收，这些论文是知识图谱组在多模态知识图谱、MT-BERT、Graph Embedding和图谱可解释性等方向上的技术沉淀和应用。</p></li></ul><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvd1A4TWxRcjZRLVo1NDJZenBCQ1pFQQ==">HDFS慢节点监控及处理<i class="fa fa-external-link-alt"></i></span><br>HDFS集群随着使用时间的增长，难免会出现一些“性能退化”的节点，主要表现为磁盘读写变慢、网络传输变慢，我们统称这些节点为慢节点。当集群扩大到一定规模，比如上千个节点的集群，慢节点通常是不容易被发现的。大多数时候，慢节点都藏匿于众多健康节点中，只有在客户端频繁访问这些有问题的节点，发现读写变慢了，才会被感知到。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9waW5nY2FwLmNvbS9ibG9nLWNuL21hc3MtZGF0YS1iYXRjaC1wcm9jZXNzaW5nLXRlY2hub2xvZ3ktYmFzZWQtb24tdGlzcGFyay8=">基于 TiSpark 的海量数据批量处理技术<i class="fa fa-external-link-alt"></i></span><br>熟悉 TiSpark 的人都知道，TiSpark 是 Spark 的一个插件，它其实就是给予了 Spark 能够去访问 TiDB 底层分布式存储引擎 TiKV 或者 TiFlash 的能力。之前我们一直在解决读的问题，写问题并没有付出太多的时间去解决。今天就给大家揭秘，我们是怎样使用 TiSpark 去实现海量数据批处理，然后写入到 TiDB 里面去的。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xNy8yMDI4Lmh0bWw=">双汇大数据方案选型：从棘手的InfluxDB+Redis到毫秒级查询的TDengine<i class="fa fa-external-link-alt"></i></span><br>双汇发展多个分厂的能源管控大数据系统主要采用两种技术栈：InfluxDB/Redis和Kafka/Redis/HBase/Flink，对于中小型研发团队来讲，无论是系统搭建，还是实施运维都非常棘手。经过对InfluxDB/Redis和TDengine大数据平台的功能和性能对比测试，最终将TDengine作为实施方案。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTIvMDgvYXBhY2hlX2Fycm93X3N1bW1hcnkv">Apache Arrow：一种适合异构大数据系统的内存列存数据格式标准<i class="fa fa-external-link-alt"></i></span><br>本文介绍一种内存列存数据格式：Apache Arrow，它有一个非常大的愿景：提供内存数据分析 (in-memory analytics) 的开发平台，让数据在异构大数据系统间移动、处理地更快。同时，比较特别的是这个项目的启动形式与其他项目也不相同，Arrow 项目的草台班子由 5 个 Apache Members、6 个 PMC Chairs 和一些其它项目的 PMC 及 committer 构成，他们直接找到 ASF 董事会，征得同意后直接以顶级 Apache 项目身份启动。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTkvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==">Apache Kylin的实践与优化<i class="fa fa-external-link-alt"></i></span><br>Apache Kylin是一个基于Hadoop大数据平台打造的开源OLAP引擎，它采用了多维立方体预计算技术，利用空间换时间的方法，将查询速度提升至亚秒级别，极大地提高了数据分析的效率，并带来了便捷、灵活的查询功能。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZnluZG9ic2l3NEU1eV9sWGtyVEJ4dw==&quot;&gt;数据人的“大考”：AnalyticDB如何强力支撑双11？&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;每年的双11都是云原生数据仓库AnalyticDB MySQL版（原分析型数据库MySQL版）的一块试金石。今年AnalyticDB除了在阿里数字经济体内进入更多核心交易链路，全力支撑双11以外，AnalyticDB全面拥抱云原生，构建极致弹性，大幅降低成本，释放技术红利，重磅发布了诸多全新企业级特性，让用户及时拥有极高性价比的云原生数据仓库。本文深度解析云原生数据仓库AnalyticDB面临的挑战和最新关键技术，分享双11护航背后的技术实践与经验。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="好文分享" scheme="http://yonghong.tech/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="好文分享" scheme="http://yonghong.tech/tags/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>好文分享 第3期</title>
    <link href="http://yonghong.tech/bookmarks/0003/"/>
    <id>http://yonghong.tech/bookmarks/0003/</id>
    <published>2021-12-11T02:24:00.000Z</published>
    <updated>2021-12-11T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><span class="exturl" data-url="aHR0cHM6Ly9waW5nY2FwLmNvbS9jYXNlcy1jbi91c2VyLWNhc2UtY2hpbmEtbW9iaWxlLWxvdC8=">中移物联网在车联网场景的 TiDB 探索和实现<i class="fa fa-external-link-alt"></i></span><br>本次分享主要介绍车联网业务，它主要围绕车载位置终端和车载视频终端开展业务，包括停车卫士、路尚个人、路尚行业、和统一填装业务。截止 2020 年 5 月，累计接入 150 万终端，车联网用户主要是个人用户和企业用户，目前累计注册个人用户 151 万，累计注册企业用户 1471 个。</li></ul><span id="more"></span><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaGRUZmpsQ3l4cExUNGh6blNoNE8xQQ==">基于微服务成熟度模型的高可用优化实践<i class="fa fa-external-link-alt"></i></span><br>随着微服务的流行，每个互联网公司后台都有无数大大小小的服务，服务与服务之间又有着千丝万缕的调用关系。要保证整个微服务系统的成熟稳定，就必须保证每个微服务的成熟度。但如何来定义服务的成熟度？应该从哪些纬度来考量？各个纬度里又有哪些普遍的问题？如何来优化？本文介绍了爱奇艺技术产品团队用来衡量服务成熟度的模型，并基于此模型对多个后台服务进行评估，总结出了一些常见的低分项，并对低分项整理了相关优化方案。希望对大家有所帮助。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnlvdXphbi5jb20veW91LXphbi1iYW8tbGkteWUtd3UtamlhLWdvdS1zaGUtamkteXUtc2hpLWppYW4v">有赞保理业务架构设计与实践<i class="fa fa-external-link-alt"></i></span><br>为保障消费者权益，有赞提供基础消费保障服务。买家确认收货后，资金才可结算到卖家店铺余额，普遍的结算周期在7天左右。从商家的角度出发，结算账期的产生使得资金周转变慢，这为扩大生产交易规模制造了困难。于是快速回款产品应运而生，有赞通过引入保理机构，以应收账款保理转让的模式来帮助商家实现资金快速回笼。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWZZRzdUZ0ZLMHJSTjcwY3ZJb1ByUQ==">低代码在爱奇艺鹊桥数据同步平台的实践<i class="fa fa-external-link-alt"></i></span><br>本文结合爱奇艺App后端在业务数据同步方面的实践，分享基于低代码平台高效交付业务需求及避免重复开发的经验。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODkxNTgyMTYyNzk4MTE2ODcx">5G时代|淘宝直播高画质低延时技术探索<i class="fa fa-external-link-alt"></i></span><br>5G将对视频分辨率和清晰度提出越来越高的要求。淘宝作为一个数亿级用户的短视频与直播平台，业务多样，两端用户分布广，设备和网络情况复杂，给多媒体内容存储和分发带来巨大挑战。在内容生产过程中把控好质量和成本，在内容分发和消费过程中确保用户体验，是当前面临的主要问题。为了解决这个问题，我们有两个优化目标，一是在画质不变的前提下降码率，二是在码率不变的前提下提升画面质量。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvc2RhdGEuY29tL2Jsb2cvMjAyMC8xMS8xMi8yMDA3Lmh0bWw=">TDengine + EMQ X + Grafana 轻松搭建高效低成本的边缘侧工业互联网平台<i class="fa fa-external-link-alt"></i></span><br>本文将介绍基于TDengine、EMQ X搭建一个集工业数据采集、汇聚、清洗、存储分析以及可视化展示等能力于一体的轻量级边缘计算工业互联网平台。在此方案基础上，读者可以根据自身需求调整方案设计，从而搭建满足实际业务需求的工业互联网平台，加速实现工业智能化转型。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4MTU3NA==">微服务授权应该怎么做？<i class="fa fa-external-link-alt"></i></span><br>前后端鉴权是一个很大的话题，不同组织的鉴权方式各不相同，甚至对同一协议的业务实现也可能相去甚远。本文尝试从认证与授权两个维度来描述标题中的鉴权，大部分篇幅还是偏认证。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc4NTMxNA==">分布式系统！如何实现用户追踪和认证？<i class="fa fa-external-link-alt"></i></span><br>讲使用 spring security 等具体技术的资料已经很多了，这篇文章不打算写框架和代码的具体实现。我们会讨论认证和授权的区别，然后会介绍一些被业界广泛采用的技术，最后会聊聊怎么为 API 构建选择合适的认证方式。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVHlsNmRTYjdtSEJ1cXFONld2RXVhdw==">一例 Go 编译器代码优化 bug 定位和修复解析<i class="fa fa-external-link-alt"></i></span><br>本文中介绍了 Go 编译器的整体编译流程脉络和一个编译优化错误导致数据越界访问的 bug，并分析了对这个 bug 的排查和修复过程，希望能够借此让大家对 Go 编译器有更多的了解，在遇到类似问题时有排查思路。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZkoyMnk3TVF2a2NOSmtpQW5Nd2NVZw==">服务注册中心 | 记一次Consul故障分析与优化<i class="fa fa-external-link-alt"></i></span><br>在微服务体系中，服务注册中心是最基础的组件，它的稳定性会直接影响整个服务体系的稳定性。本文主要介绍了爱奇艺微服务平台基于Consul的服务注册中心建设方式，与内部容器平台、API网关的集成情况，并重点记录了Consul遇到的一次故障，分析解决的过程，以及针对这次故障从架构上的优化调整措施。Consul 是近几年比较流行的服务发现工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比Consul 的方案更“一站式”，使用起来也较 为简单。他的主要应用场景为：服务发现、服务隔离、服务配置。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZlpPcG5pa3JyV1pZREhjOW5JUmpXUQ==">干货 | 携程移动直播探索<i class="fa fa-external-link-alt"></i></span><br>直播行业大概在10年前就开始兴起了，秀场直播和游戏直播是pc时代比较成功的应用场景。现阶段，移动互联网的大规模普及，流量价格越来越便宜，移动视频直播异常火爆，随着各行各业的不断融合，直播带货超高的营业额，明星艺人、销售、秀场网红的涌入，直播行业迎来了空前的繁荣发展。从pc直播到渐渐火爆的移动直播，直播技术也在不断地更新迭代，趋于成熟。本文从直播流的选择、交互优化、快速迭代等方面介绍携程直播技术。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnFpbml1LmNvbS9hcmNoaXZlcy84OTM4">【技术猩球】​七牛云内部平台架构 QStreaming——轻量级大数据ETL的开发框架<i class="fa fa-external-link-alt"></i></span><br>QStreaming is a framework that simplifies writing and executing ETLs on top of Apache Spark. It is based on a simple sql-like configuration file and runs on any Spark cluster</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FpLzExMTI1Lw==">日均5亿字符翻译量，百毫秒内响应，携程机器翻译平台实践<i class="fa fa-external-link-alt"></i></span><br>随着国际化进程的开展，携程正加速第三次创业，各部门及业务场景对多语种的需求日益增长，依靠译员或精通多语种的客服难以支撑持续扩大的自然文本翻译流量。机器翻译技术作为近年来人工智能领域在自然语言处理任务上探索的先驱，逐渐走出学术的象牙塔，开始为普通用户提供实时便捷的翻译服务，并已取得了显著的成效。在这样的形势下，针对旅游服务场景提供更高质量低成本的机器翻译服务成为了一个重要课题。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdlgzMGQ0c0FYMm9FVG5OaDN1WmxFQQ==">干货 | 携程 Cilium+BGP 云原生网络实践<i class="fa fa-external-link-alt"></i></span><br>Cilium 是近两年最火的云原生网络方案之一。Cilium 的核心基于 eBPF，有两大亮点：基于 eBPF 的灵活、高性能网络，以及基于 eBPF 的 L3-L7 安全策略实现。携程 2019 年开始在生产环境使用 Cilium，本文将介绍 Cilium 在携程的落地情况，以及我们基于 Cilium 的、覆盖虚拟机、物理机和容器的云原生安全的一些探索。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvWmE5ZVIwdE5qb1UzclRnNXhUWWdOQQ==">高德最佳实践：Serverless规模化落地有哪些价值？<i class="fa fa-external-link-alt"></i></span><br>曾经看上去很美、一直被观望的 Serverless，现已逐渐进入落地的阶段。今年的”十一出行节”，高德在核心业务规模化落地 Serverless，由 Serverless 支撑的业务在流量高峰期的表现十分优秀。传统应用也能带来同样的体验，那么 Serverless 的差异化价值又是什么呢？本文分享高德 Serverless 规模化落地背后的实践总结。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmN0cmlwLmNvbS9hcnRpY2xlcy9hX2FyY2hpdGVjdHVyZS8xMTY4Ni8=">携程多语言平台-Shark系统的高可用演进之路<i class="fa fa-external-link-alt"></i></span><br>Shark是携程IBU国际化进程中孵化的集多语言内容管理、多语言翻译、多语言内容下发等功能为一体的多语言平台，目前为携程海外几十个站点和上千个业务应用提供稳定的多语言内容管理和下发服务。本文主要分享携程IBU多语言团队在提升系统稳定性过程中的一些实践和总结，希望给大家一些参考和帮助。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk4NDk0ODE3NTYzOTAxOTYw">淘系面向业务价值的精细化流量管控实战-双11实录<i class="fa fa-external-link-alt"></i></span><br>本文将从背景问题、实战效果、设计思路与解法三个方面介绍马克尼(Marconi)在2020双11中，保障了淘系（淘宝、天猫等）核心业务平台（如 首页、会场、直播、互动、我的淘宝 等），多架构层次（从接入网关到业务应用集群/容器）管控业务流量并提升服务业务效果，给予用户顺滑的体验；提升了淘系(及阿里巴巴集团更多的BU)的稳定性底盘，成为应用稳定性保障的核心能力，推动了业界在大型分布式在线业务系统的高可用/稳定性保障进展。为今年双11创新纪录提供保障！</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMDMvc2VydmljZS1tZXNoLWluLW1laXR1YW4uaHRtbA==">复杂环境下落地Service Mesh的挑战与实践<i class="fa fa-external-link-alt"></i></span><br>在私有云集群环境下建设 Service Mesh ，往往需要对现有技术架构做较大范围的改造，同时会面临诸如兼容困难、规模化支撑技术挑战大、推广困境多等一系列复杂性问题。本文会系统性地讲解在美团在落地 Service Mesh 过程中，我们面临的一些挑战及实践经验，希望能对大家有所启发或者帮助。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTIvMTAvYXBhY2hlLWt5bGluLXByYWN0aWNlLWluLW1laXR1YW4uaHRtbA==">C++服务编译耗时优化原理及实践<i class="fa fa-external-link-alt"></i></span><br>大型C++工程项目，都会面临编译耗时较长的问题。不管是开发调试迭代、准入测试，亦或是持续集成阶段，编译行为无处不在，降低编译时间对提高研发效率来说具有非常重要意义。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMnNvTHIxRjBYN3JjOGZaLTJmVEU2QQ==">爱奇艺微服务标准技术架构实践<i class="fa fa-external-link-alt"></i></span><br>为数以亿计的用户提供优质的视频服务的爱奇艺技术产品团队，为了适应业务的快速迭代和创新，并支撑海量的用户请求，很多团队都对各自的业务系统自发地进行了微服务架构的改造。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbEhHQzlKZUtiM29rVnV1UXkzekNXZw==">步入超高清视频时代视频编码技术的机遇与挑战——AV1时代要来了<i class="fa fa-external-link-alt"></i></span><br>近些年随着视频行业的迅猛发展，尤其像短视频、点播、直播、VR等领域的爆发，人们对于高清、超高清视频体验的追求越来越强烈，流媒体平台如何在提升观众观看体验，同时降低播放成本，利用技术降低带宽消耗的同时又能最大化的还原视频的画质和质量，成为了重要的课题。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVmlIS2Y5Y0Izbl9JalM0TFVIeXpLUQ==">10 张图告诉你，Kafka 是怎么做到支持百万级 TPS 的？<i class="fa fa-external-link-alt"></i></span><br>谈到大数据传输都会想到 Kafka，Kafka 号称大数据的杀手锏，在业界有很多成熟的应用场景并且被主流公司认可。这款为大数据而生的消息中间件，以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。在业界已经有很多成熟的消息中间件如：RabbitMQ, RocketMQ, ActiveMQ, ZeroMQ，为什么 Kafka 在众多的敌手中依然能有一席之地，当然靠的是其强悍的吞吐量。下面带领大家来揭秘。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9waW5nY2FwLmNvbS9jYXNlcy1jbi91c2VyLWNhc2UtY2hpbmEtbW9iaWxlLWxvdC8=&quot;&gt;中移物联网在车联网场景的 TiDB 探索和实现&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;本次分享主要介绍车联网业务，它主要围绕车载位置终端和车载视频终端开展业务，包括停车卫士、路尚个人、路尚行业、和统一填装业务。截止 2020 年 5 月，累计接入 150 万终端，车联网用户主要是个人用户和企业用户，目前累计注册个人用户 151 万，累计注册企业用户 1471 个。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="好文分享" scheme="http://yonghong.tech/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="好文分享" scheme="http://yonghong.tech/tags/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>好文分享 第2期</title>
    <link href="http://yonghong.tech/bookmarks/0002/"/>
    <id>http://yonghong.tech/bookmarks/0002/</id>
    <published>2021-12-10T02:24:00.000Z</published>
    <updated>2021-12-10T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDkvMzAvd2FpbWFpLW1vYmlsZS1hcmNoaXRlY3R1cmUtZXZvbHV0aW9uLmh0bWw=">外卖客户端容器化架构的演进<i class="fa fa-external-link-alt"></i></span><br>好的架构要不断演变，进而去适应业务的发展。美团在移动端上的架构，也经历了组件化、平台化、RN混合化，到现在开始向容器化变迁。容器化架构充分地利用了现在的跨端技术，将动态化的能力最大化地赋予了业务。作为美团最为重要的业务之一，美团外卖移动端的架构演进是怎样的呢？本文将为你揭开背后的思考、技术细节以及实践。</li></ul><span id="more"></span><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMzAvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">Native地图与Web融合技术的应用与实践<i class="fa fa-external-link-alt"></i></span><br>本文将WebView与Native地图组件叠加到一起，实现了用户手势事件智能分发的机制，解决了WebView与Native地图在同一页面内布局困难的问题。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOExFclpXSjBGMFZzWjdXZ2pDYi1WZw==">干货 | 深入浅出Apple响应式框架Combine<i class="fa fa-external-link-alt"></i></span><br>Combine.framework 是Apple在2019 WWDC 上基于Swift推出的函数响应框架（Functional Reactive Programming）,支持Apple全平台的操作系统（iOS13+，macOS 10.15+等）。函数式响应框架无论在哪个平台早已流行泛滥，开源的Rx更是实现了各种语言的响应式编程框架。Apple在这个时候推出响应式框架，无疑是对自己护城河的进一步巩固。事实上SwiftUI的数据驱动就是依赖Combine。本文将深入浅出地介绍Combine的基本概念和原理，然后通过具体demo详细阐述其在实际编码中的应用。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRENyaXhYcW5FbnVIcFlmVVBqeUFDQQ==">爱奇艺知识移动端组件化探索和实践<i class="fa fa-external-link-alt"></i></span><br>组件化对于任何一个业务场景复杂的APP以及经过多次迭代之后的产品来说都是必经之路，组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程。组件化要做的不仅仅是表面上看到的模块拆分解耦，其背后还有很多工作来支撑组件化的进行，例如结合业务特性的模块拆分策略、模块间的交互方式和构建系统等等。本文主要讲述爱奇艺知识APP如何结合自身的业务特点，探索和实践了一套高效的移动端组件化方案。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNDgzX2hlc1phbGFHUlBlYnp6NXRQQQ==">Android D8编译器“bug”导致Crash的问题排查<i class="fa fa-external-link-alt"></i></span><br>这篇文章主要是分析了一个因为 Android D8 编译器分配的寄存器不太合理，导致运行时 ART 抛出了 VerifyError 而 Crash 的问题，下文简单分析了下问题产生的原因以及我们采用的修复方案。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMjYvY29uc2lzdGVuY3ktaW4tdWktZGVzaWduLmh0bWw=">移动端UI一致性解决方案<i class="fa fa-external-link-alt"></i></span><br>UI一致性是绝大部分研发团队面临的共性问题，大家对落地设计规范，提高UI中台能力，提升产研效率具有强烈的诉求。通过UI一致性的建设，不仅可以在品牌上实现体验升级，更可以全面提高产研效率，为业务的快速迭代提供有力支持和有效保障。统一的品牌符号、品牌特征，有助于加深产品在用户心目中的印象。统一的用户界面和交互形式，能帮助用户加深对产品的熟悉感和信任感。而一个好的设计语言可以在体验上为产品加分，也能够更好的创造一致性体验。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvOUdqWEI5RXUtT1AzZklqZFFXS2tsZw==">UME - 丰富的Flutter调试工具<i class="fa fa-external-link-alt"></i></span><br>目前西瓜视频作者侧 Flutter 业务场景已经覆盖了 40多个页面 (包括视频播放场景)，用户侧核心场景包括我的 Tab 也已经是 Flutter，在开发过程中，暴露了一些问题，debug 调试难、离开了 IDE 后犹如抓瞎、PM 设计 QA 验收过程中拿不到有用的信息，在市面上找了一圈，也没有类似 iOS Flex 这样强大的调试工具，例如视图大小、层级的展示，实例对象属性的实时修改，网络请求抓取，log 日志打印，文件查看等，所以西瓜视频 Flutter 基础团队决定开发 UME。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLmlwYWxmaXNoLmNvbS9ibG9nLzIwMjAvMTAvMjYvcG9zZWlkb24v">波塞冬：伴鱼运营活动前端配置化实践<i class="fa fa-external-link-alt"></i></span><br>波塞冬，是伴鱼活动运营解决方案的总称，包含活动规则体系、h5 可视化开发平台等，名称来源于古希腊神话，波塞冬是海洋和所有水系的管理者，寓意为 palfish 发展提供超能力。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMDUvbmF0aXZlLXdlYi1wcmF0aWNlLWluLW1laXR1YW4uaHRtbA==">积木Sketch插件进阶开发指南<i class="fa fa-external-link-alt"></i></span><br>积木插件原本只是外卖提升UI/RD协作效率的一次尝试，最初的目标仅是UI一致性，但是现在已经作为全面提升产研效率的媒介，承载了越来越多的功能。 </p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk2Mjg4OTkwNzY1MjUyNjE2">双十一SSR优化实践：秒开率提升新高度<i class="fa fa-external-link-alt"></i></span><br>会场是每年双十一的主角之一，会场的用户体验自然也是每年最关注的点。在日趋复杂的业务需求下，如何保障我们的用户体验不劣化甚至能更优化是永恒的命题。<br>今年（2020）我们在不改变现有架构，不改变业务的前提下，在会场上使用了 SSR 技术，将秒开率提高到了新的高度（82.6%）；也观察到在用户体验得到优化的同时，业务指标如 UV 点击率等也有小幅的增长（视不同业务场景有不同的提升，最大可达 5%），带来了不错的业务价值。<br>本文将从服务端、前端两个角度介绍我们在 SSR 上的方案与经验<br>1、前端在解决工程化、业务效果评估上的具体实践与方法论<br>2、服务端在解决前端模块代码于服务端执行、隔离和性能优化上的具体实践与方法论</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZGRUVXhRRUVuSWJfYjFQek5fSlJKQQ==">干货 | 响应式设计在携程火车票的应用<i class="fa fa-external-link-alt"></i></span><br>可能很多人脑海中已经出现了这样一个动画，当浏览器中页面尺寸不断变化时，内容也在随之变化。简单说，响应式网站设计是一种允许设计和代码响应设备屏幕大小的方法。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjEvMDIvMjUvc3dpZnQtb2JqZWN0aXZlLWMuaHRtbA==">从预编译的角度理解Swift与Objective-C及混编机制<i class="fa fa-external-link-alt"></i></span><br>本文从预编译的基础知识入手，由浅至深的介绍了Objective-C和Swift的工作机制，并通过这些机制来解释混编项目中使用到的技术和各种参数的作用，由此来指导开发者如何进行混编。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMDkvMzAvd2FpbWFpLW1vYmlsZS1hcmNoaXRlY3R1cmUtZXZvbHV0aW9uLmh0bWw=&quot;&gt;外卖客户端容器化架构的演进&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;好的架构要不断演变，进而去适应业务的发展。美团在移动端上的架构，也经历了组件化、平台化、RN混合化，到现在开始向容器化变迁。容器化架构充分地利用了现在的跨端技术，将动态化的能力最大化地赋予了业务。作为美团最为重要的业务之一，美团外卖移动端的架构演进是怎样的呢？本文将为你揭开背后的思考、技术细节以及实践。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="好文分享" scheme="http://yonghong.tech/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="好文分享" scheme="http://yonghong.tech/tags/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>好文分享 第1期</title>
    <link href="http://yonghong.tech/bookmarks/0001/"/>
    <id>http://yonghong.tech/bookmarks/0001/</id>
    <published>2021-12-09T02:24:00.000Z</published>
    <updated>2021-12-09T02:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s">基本功 | Java即时编译器原理解析及实践<i class="fa fa-external-link-alt"></i></span><br>跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。</li></ul><span id="more"></span><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY2MjA0Ng==">你不知道的JMM底层原理<i class="fa fa-external-link-alt"></i></span><br>在多线程并发的世界里synchronized、volatile、JMM是我们绕不过去的技术坎，而重排序、可见性、内存屏障又有时候搞得你一脸懵逼。有道是知其然知其所以然，了解了底层的原理性问题，不论是日常写BUG还是面试都是必备神器了。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzc2MzQ1Mg==">程序员都应该知道的URI，一文帮你全面了解<i class="fa fa-external-link-alt"></i></span><br>URI 是每个程序员都应该了解的概念，同时相关联的还有 URL, URN 等概念簇。了解这些概念，可以帮助我们更好地窥探万维网(WWW)的设计，同时也能帮我们在工作中有效解决跟 URI 相关概念的问题，更加理解 encode,decode 工作原理，更好地助力网络编程！</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY5Njc2NA==">优秀 ！华为是这样使用Git rebase的<i class="fa fa-external-link-alt"></i></span><br>理论上来说，只要能合理管理项目分支，这几个命令已经足以应付所有的日常开发工作。但是如果我们偶尔看一下自己的git graph，我的天呐，为什么会这么乱。鉴于分支管理的混乱（或者根本就没有进行过分支管理），我们经常遇到一些意想不到的问题，因此需要使用很多面生的git命令来解决我们的问题，比如说本文讲到的git rebase。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmF1dGhpbmcuY24vYmxvZy9kZXRhaWwvODc=">你真的会使用搜索引擎吗？<i class="fa fa-external-link-alt"></i></span><br>相信很多人平时打开网页，想要搜索东西的时候，都会直接选择输入关键词，于是得到一大堆种类不一的搜索结果，在茫茫页面中苦苦寻找自己需要的信息。这种不经思考的搜索方式，不仅增加了搜索信息的时间成本，还往往找不到正确的信息。那么，正确的搜索方式是什么呢？本文结合了作者多年的搜索经验和实践，包教包会，让你从只会简单搜索关键词的小白瞬间成长为掌握多种搜索技巧的高手，下面便开始学习吧</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTEvMTIvamF2YS05LWNtcy1nYy5odG1s">Java中9种常见的CMS GC问题分析与解决<i class="fa fa-external-link-alt"></i></span><br>目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9uaW9jb2Rlci5jb20vMjAyMC8xMS8xNS9KYXZhLUNvbGxlY3RvcnMlRTUlQjglQjglRTclOTQlQTglRTclOUElODQyMCVFNCVCOCVBQSVFNiU5NiVCOSVFNiVCMyU5NS8=">Java-Collectors常用的20个方法<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSWF4QW5XZlZxZTNtTTBiSEZWVjVHZw==">软件开发必修课：你该知道的GRASP职责分配模式<i class="fa fa-external-link-alt"></i></span><br>阿里妹导读：软件开发为什么需要职责驱动设计（RDD）？职责应该如何分配？如何结合架构模式在实际开发中实践落地？本文介绍一种通用的职责分配模式——GRASP，通过举例详解GRASP的几大原则，并分享两个实际运用的案例。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODk3MDExMDUyNjAxNDA5NTQ5">设计模式最佳套路—— 愉快地使用策略模式<i class="fa fa-external-link-alt"></i></span><br>策略模式（Strategy Pattern）定义了一组策略，分别在不同类中封装起来，每种策略都可以根据当前场景相互替换，从而使策略的变化可以独立于操作者。比如我们要去某个地方，会根据距离的不同（或者是根据手头经济状况）来选择不同的出行方式（共享单车、坐公交、滴滴打车等等），这些出行方式即不同的策略。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3ljMTk5NDY2Ni9wLzEwODMxMDM5Lmh0bWw=">Mysql 索引精讲<i class="fa fa-external-link-alt"></i></span><br>本文主要讲述常见索引类型(实现层面)、索引种类(应用层面)、聚簇索引与非聚簇索引、覆盖索引、最佳索引使用策略。</p></li><li><p><span class="exturl" data-url="aHR0cDovL2dlbmVyYWx0aGluay5naXRodWIuaW8vMjAyMC8xMS8yMy9hYm91dC1SZWVudHJhbnRMb2NrLXByb2JsZW1zLw==">ReentrantLock 的这几个问题，你都知道吗？<i class="fa fa-external-link-alt"></i></span><br>之前分析 AQS 的时候，了解到 AQS 依赖于内部的两个 FIFO 队列来完成同步状态的管理，当线程获取锁失败的时候，会将当前线程以及等待状态等信息构造成 Node 对象并将其加入同步队列中，同时会阻塞当前线程。当释放锁的时候，会将首节点的 next 节点唤醒 (head 节点是虚拟节点)，使其再次尝试获取锁。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxNDc5MTkwMjQ0MDk4MDYy">CDN工作原理及其在淘宝图片业务中的应用<i class="fa fa-external-link-alt"></i></span><br>淘宝的图片访问，有98%的流量都走了CDN缓存，只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。今年双11，淘宝鹿班的主图价格表达升级项目，就面临了这种挑战，让我们看看是如何解决的吧。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTGtDb2FVRTVzbDg4SjkwaVZ3bG45QQ==">一文彻底理解 I/O 多路复用<i class="fa fa-external-link-alt"></i></span><br>这里的关键点在于，我们事先并不知道一个文件描述对应的I/O设备是否是可读的、是否是可写的，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMjAvMTAvMjIvamF2YS1qaXQtcHJhY3RpY2UtaW4tbWVpdHVhbi5odG1s&quot;&gt;基本功 | Java即时编译器原理解析及实践&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;跟其他常见的编程语言不同，Java将编译过程分成了两个部分，这就对性能带来了一定的影响。而即时（Just In Time, JIT）编译器能够提高Java程序的运行速度。本文会先解析一下即时编译器的原理，然后再分享一些在美团实践的经验，希望能对大家有所帮助或者启发。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="好文分享" scheme="http://yonghong.tech/categories/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="好文分享" scheme="http://yonghong.tech/tags/%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>被字节裁员后，我的脾气变得暴怒无常</title>
    <link href="http://yonghong.tech/2021/11/a-story/"/>
    <id>http://yonghong.tech/2021/11/a-story/</id>
    <published>2021-11-30T14:24:00.000Z</published>
    <updated>2021-11-30T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>脉脉上一个刚编故事，记录下来。</p><hr><p>被字节裁员后，我的脾气变得暴怒无常。望着楼下去上班的人群，我会突然把面前的镜子砸碎；听着字节回购期权的消息，我会猛地把手边的东西摔向四周的墙壁。</p><p>这时候她就悄悄地躲出去，在我看不见的地方偷偷地听着我的动静。</p><span id="more"></span><p>当一切恢复沉寂，她又悄悄地进来，眼边红红的，看着我。</p><p>“听说知春路的花儿都开了，我陪你去走走吧。”</p><p>“不，我不去！”我狠命地捶打着空空的胸口，喊着，“没有工牌我活着有什么劲！”</p><p>她扑过来抓住我的手，忍住哭声说：“咱俩在一块儿，好好儿活，好好儿活……”</p><p>可我却一直都不知道，她已经连续加班半个月了。</p><p>那天我又独自坐在屋里，她进来了。</p><p>“知春路的花开了，我陪你去看看吧。”</p><p>她憔悴的脸上现出央求般的神色。</p><p>“什么时候？”</p><p>“这个周末?”她说。我的回答让她喜出望外。</p><p>我说”那好，就周末。”</p><p>然而却没有等到周末。</p><p>救护车开到园区的时候，她已经停止呼吸，电脑上还在跑着脚本。</p><p>第二年，我考上老家省会的公务员，准备离开这个城市了。离开之前，我一个人走在知春路。</p><p>人生最美好的几年，是在这里度过的。在这里有过兴奋和疲惫，有过得意和失落。</p><p>我站定脚步，看着周围带着工牌快步走过的人们，觉得自己像是激流里的顽石一样。而这激流太猛烈，仿佛自己这块顽石也在被推着往前走。</p><p>回过神来的我只觉得一片目眩，感觉自己的前半生是一场不真实的梦境。</p><p>此时她的声音在我耳边响起，”咱俩在一块儿，好好活儿，好好活儿。。。”，我已是泪流满面。</p><hr><p>其实这个的原文来自史铁生《秋天的怀念》。</p><p>　　双腿瘫痪后，我的脾气变得暴怒无常。望着望着天上北归的雁阵，我会突然把面前的玻璃砸碎；听着听着李谷一甜美的歌声，我会猛地把手边的东西摔向四周的墙壁。</p><p>　　这时，母亲就会悄悄地躲出去，在我看不见的地方偷偷地听着我的动静。当一切恢复沉寂，她又悄悄地进来，眼边红红的，看着我。”听说北海的花儿都开了，我推着你去走走。</p><p>　　她总是这么说。母亲喜欢花，可自从我的腿瘫痪以后，她侍弄的那些花都死了。”不，我不去！”我狠命地捶打这两条可恨的腿，喊着，”我可活什么劲儿！”</p><p>　　母亲扑过来抓住我的手，忍住哭声说：”咱娘儿俩在一块儿，好好儿活，好好儿活……”</p><p>　　可我却一直都不知道，她的病已经到了那步田地。后来妹妹告诉我，她常常肝疼得整宿整宿翻来覆去地睡不了觉。</p><p>　　那天我又独自坐在屋里，看着窗外的树叶”唰唰啦啦”地飘落。</p><p>　　母亲进来了，挡在窗前：</p><p>　　“北海的菊花开了，我推着你去看看吧。”她憔悴的脸上现出央求般的神色。</p><p>　　“什么时候？”</p><p>　　“你要是愿意，就明天？”</p><p>　　我的回答已经让她喜出望外了。”好吧，就明天。”</p><p>　　她高兴得一会坐下，一会站起：”那就赶紧准备准备。”</p><p>　　“哎呀，烦不烦？几步路，有什么好准备的！”</p><p>　　她也笑了，坐在我身边，絮絮叨叨地说着：”看完菊花，咱们就去’仿膳’，你小时候最爱吃那儿的豌豆黄儿。还记得那回我带你去北海吗？你偏说那杨树花是毛毛虫，跑着，一脚踩扁一个……”</p><p>　　她忽然不说了。对于”跑”和”踩”一类的字眼，她比我还敏感。她又悄悄地出去了。她出去了，就再也没回来。</p><p>　　邻居们把她抬上车时，她还在大口大口地吐着鲜血。我没想到她已经病成那样。看着三轮车远去，也绝没有想到那竟是永远的诀别。</p><p>　　邻居的小伙子背着我去看她的时候，她正艰难地呼吸着，像她那一生艰难的生活。别人告诉我，她昏迷前的最后一句话是：</p><p>　　“我那个有病的儿子和我那个还未成年的女儿……</p><p>　　又是秋天，妹妹推着我去北海看了菊花。黄色的花淡雅，白色的花高洁，紫红色的花热烈而深沉，泼泼洒洒，秋风中正开得烂漫。我懂得母亲没有说完的话。妹妹也懂。我俩在一块儿，要好好儿活……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;脉脉上一个刚编故事，记录下来。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;被字节裁员后，我的脾气变得暴怒无常。望着楼下去上班的人群，我会突然把面前的镜子砸碎；听着字节回购期权的消息，我会猛地把手边的东西摔向四周的墙壁。&lt;/p&gt;
&lt;p&gt;这时候她就悄悄地躲出去，在我看不见的地方偷偷地听着我的动静。&lt;/p&gt;</summary>
    
    
    
    <category term="故事" scheme="http://yonghong.tech/categories/%E6%95%85%E4%BA%8B/"/>
    
    
    <category term="史铁生" scheme="http://yonghong.tech/tags/%E5%8F%B2%E9%93%81%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git 的奇技淫巧</title>
    <link href="http://yonghong.tech/tips/git-tips/"/>
    <id>http://yonghong.tech/tips/git-tips/</id>
    <published>2021-11-26T14:24:00.000Z</published>
    <updated>2021-11-26T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9naXQtdGlwcw==">https://github.com/521xueweihan/git-tips<i class="fa fa-external-link-alt"></i></span></p><p>Git 是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p><p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：<code>Ctrl/Command+f</code>。</p><h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <span class="exturl" data-url="aHR0cHM6Ly9yb2dlcmR1ZGxlci5naXRodWIuaW8vZ2l0LWd1aWRlL2luZGV4LnpoLmh0bWw=">Git 小白教程<i class="fa fa-external-link-alt"></i></span>入门</em></p><ol><li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li><li>所有的命令都在<code>git version 2.7.4 (Apple Git-66)</code>下测试通过</li><li>统一概念：<ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li><li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li></ul></li><li>如果喜欢这个项目，欢迎 Star、提交 Pr、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9naXQtdGlwcy9pc3N1ZXM=">反馈问题<i class="fa fa-external-link-alt"></i></span>😊</li></ol><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%BC%80%E5%8D%B7%E5%BF%85%E8%AF%BB">开卷必读</a></li><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li><li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个 commit</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8">查看冲突文件列表</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li><li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">查看远程分支和本地分支的对应关系</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E5%88%A0%E9%99%A4%E4%BA%86%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E4%B9%9F%E6%83%B3%E5%88%A0%E9%99%A4">远程删除了分支本地也想删除</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li><li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li><li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li><li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li><li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li><li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li><li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li><li><a href="#%E6%8A%8A-a-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit%E6%94%BE%E5%88%B0-b-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li><li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li><li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li><li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li><li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支导出成一个文件</a></li><li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li><li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-id%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li><li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li><li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 gitignore 文件中记录的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li><li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-gpg-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li><li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li><li><a href="#clone-%E6%9C%80%E6%96%B0%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4">clone 最新一次提交</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li><li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li><li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-http-%E5%92%8C-socks-%E4%BB%A3%E7%90%86">git 配置 http 和 socks 代理</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">git 配置 ssh 代理</a></li><li><a href="#%E8%84%91%E5%9B%BE">脑图</a></li><li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84commit%E4%BF%A1%E6%81%AF">优雅的Commit信息</a></li><li><a href="#commit%E5%B7%A5%E5%85%B7">commit工具</a></li></ul><h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure><p>The command output as below:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The common Git guides are:</span><br><span class="line">   attributes          Defining attributes per path</span><br><span class="line">   <span class="keyword">cli</span>                 Git command-<span class="keyword">line</span> interface and conventions</span><br><span class="line">   core-<span class="keyword">tutorial</span>       A Git core <span class="keyword">tutorial</span> <span class="keyword">for</span> developers</span><br><span class="line">   cvs-migration       Git <span class="keyword">for</span> CVS users</span><br><span class="line">   diffcore            Tweaking diff output</span><br><span class="line">   everyday            A useful minimum <span class="keyword">set</span> of commands <span class="keyword">for</span> Everyday Git</span><br><span class="line">   glossary            A Git Glossary</span><br><span class="line">   hooks               Hooks used <span class="keyword">by</span> Git</span><br><span class="line">   ignore              Specifies intentionally untracked files to ignore</span><br><span class="line">   modules             Defining submodule properties</span><br><span class="line">   namespaces          Git namespaces</span><br><span class="line">   repository-layout    Git Repository Layout</span><br><span class="line">   revisions           Specifying revisions and ranges <span class="keyword">for</span> Git</span><br><span class="line">   <span class="keyword">tutorial</span>            A <span class="keyword">tutorial</span> introduction to Git</span><br><span class="line">   <span class="keyword">tutorial</span>-2          A <span class="keyword">tutorial</span> introduction to Git: part <span class="keyword">two</span></span><br><span class="line">   workflows           <span class="keyword">An</span> overview of recommended workflows with Git</span><br><span class="line"></span><br><span class="line">&#x27;git <span class="keyword">help</span> -a&#x27; and &#x27;git <span class="keyword">help</span> -<span class="keyword">g</span>&#x27; <span class="keyword">list</span> available subcommands and some concept guides. See &#x27;git <span class="keyword">help</span> &lt;command&gt;&#x27; or &#x27;git <span class="keyword">help</span> &lt;concept&gt;&#x27; to <span class="keyword">read</span> <span class="keyword">about</span> a specific subcommand or concept.</span><br></pre></td></tr></table></figure><h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure><h2 id="查看冲突文件列表"><a href="#查看冲突文件列表" class="headerlink" title="查看冲突文件列表"></a>查看冲突文件列表</h2><p>展示工作区的冲突文件列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure><h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">&#x27;^\*\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure><h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure><p>或者在 push 时加上 <code>-u</code> 参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="查看远程分支和本地分支的对应关系"><a href="#查看远程分支和本地分支的对应关系" class="headerlink" title="查看远程分支和本地分支的对应关系"></a>查看远程分支和本地分支的对应关系</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="远程删除了分支本地也想删除"><a href="#远程删除了分支本地也想删除" class="headerlink" title="远程删除了分支本地也想删除"></a>远程删除了分支本地也想删除</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>展示当前分支的最近的 tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure><h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -ln</span><br></pre></td></tr></table></figure><h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure><p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure><p>一次性推送所有标签，同步到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure><h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>放弃所有修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="comment">#得到 deleting_commit</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="comment">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure><h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;  <span class="comment">#默认就是-mixed参数。</span></span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD^  <span class="comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~3  <span class="comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit-id&gt;  <span class="comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure><h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure><h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure><h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<span class="exturl" data-url="aHR0cDovL3NnNTUyLml0ZXllLmNvbS9ibG9nLzEzMDA3MTMjYmMyMzY3OTI4">参考<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<span class="exturl" data-url="aHR0cDovL3d3dy5saWFveHVlZmVuZy5jb20vd2lraS8wMDEzNzM5NTE2MzA1OTI5NjA2ZGQxODM2MTI0ODU3OGM2N2I4MDY3YzhjMDE3YjAwMC8wMDEzNzYwMjM1OTE3ODc5NGQ5NjY5MjNlNWM0MTM0YmM4YmY5OGRmYjAzYWVhMzAwMA==">廖雪峰老师的 git 教程<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure><h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure><h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure><h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure><h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p><ol><li>clean 后，删除的文件无法找回</li><li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure><h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure><h2 id="把某一个分支导出成一个文件"><a href="#把某一个分支导出成一个文件" class="headerlink" title="把某一个分支导出成一个文件"></a>把某一个分支导出成一个文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure><h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure><h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure><h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list (当前目录)</span><br><span class="line">git config --global --list (全局)</span><br></pre></td></tr></table></figure><h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure><h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure><h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure><h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="clone-最新一次提交"><a href="#clone-最新一次提交" class="headerlink" title="clone 最新一次提交"></a>clone 最新一次提交</h2><p>只会 clone 最近一次提交，将减少 clone 时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><p>恢复 track 指定文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git for-each-ref --sort=-committerdate --format=<span class="string">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="git-配置-http-和-socks-代理"><a href="#git-配置-http-和-socks-代理" class="headerlink" title="git 配置 http 和 socks 代理"></a>git 配置 http 和 socks 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span>   <span class="comment"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span></span><br><span class="line">git config --global socks.proxy <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><h2 id="git-配置-ssh-代理"><a href="#git-配置-ssh-代理" class="headerlink" title="git 配置 ssh 代理"></a>git 配置 ssh 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/config</span><br><span class="line">Host gitlab.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    <span class="comment"># 直接使用 shadowsocks 提供的 socks5 代理端口</span></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    </span><br></pre></td></tr></table></figure><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="https://up-img.yonghong.tech/pic/2021/11/26-21-00-git-aLqUed.png" alt="git"></p><h2 id="优雅的Commit信息"><a href="#优雅的Commit信息" class="headerlink" title="优雅的Commit信息"></a>优雅的Commit信息</h2><p>使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9ibG9iL21hc3Rlci9ERVZFTE9QRVJTLm1kIy1naXQtY29tbWl0LWd1aWRlbGluZXM=">Angular团队提交规范<i class="fa fa-external-link-alt"></i></span></p><p>主要有以下组成</p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><p>常用的修改项</p><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述</li><li>body: commit 具体修改内容, 可以分为多行</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h2 id="commit工具"><a href="#commit工具" class="headerlink" title="commit工具"></a>commit工具</h2><p>可以使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp">cz-cli<i class="fa fa-external-link-alt"></i></span>工具代替 <code>git commit</code></p><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p><p><img src="https://up-img.yonghong.tech/pic/2021/11/26-21-00-gitcz-GhI1WK.png" alt="gitcz"></p><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9naXQtdGlwcw==&quot;&gt;https://github.com/521xueweihan/git-tips&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Git 是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。&lt;/p&gt;
&lt;p&gt;下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：&lt;code&gt;Ctrl/Command+f&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;开卷必读&quot;&gt;&lt;a href=&quot;#开卷必读&quot; class=&quot;headerlink&quot; title=&quot;开卷必读&quot;&gt;&lt;/a&gt;开卷必读&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如果之前未使用过 Git，可以学习 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9yb2dlcmR1ZGxlci5naXRodWIuaW8vZ2l0LWd1aWRlL2luZGV4LnpoLmh0bWw=&quot;&gt;Git 小白教程&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;入门&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;一定要先测试命令的效果后&lt;/strong&gt;，再用于工作环境中，以防造成不能弥补的后果！&lt;strong&gt;到时候别拿着砍刀来找我&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有的命令都在&lt;code&gt;git version 2.7.4 (Apple Git-66)&lt;/code&gt;下测试通过&lt;/li&gt;
&lt;li&gt;统一概念：&lt;ul&gt;
&lt;li&gt;工作区：改动（增删文件和内容）&lt;/li&gt;
&lt;li&gt;暂存区：输入命令：&lt;code&gt;git add 改动的文件名&lt;/code&gt;，此次改动就放到了 ‘暂存区’&lt;/li&gt;
&lt;li&gt;本地仓库(简称：本地)：输入命令：&lt;code&gt;git commit 此次修改的描述&lt;/code&gt;，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。&lt;/li&gt;
&lt;li&gt;远程仓库(简称：远程)：输入命令：&lt;code&gt;git push 远程仓库&lt;/code&gt;，此次改动就放到了 ‘远程仓库’（GitHub 等)&lt;/li&gt;
&lt;li&gt;commit-id：输出命令：&lt;code&gt;git log&lt;/code&gt;，最上面那行 &lt;code&gt;commit xxxxxx&lt;/code&gt;，后面的字符串就是 commit-id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果喜欢这个项目，欢迎 Star、提交 Pr、&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9naXQtdGlwcy9pc3N1ZXM=&quot;&gt;反馈问题&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;😊&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="速查" scheme="http://yonghong.tech/tags/%E9%80%9F%E6%9F%A5/"/>
    
    <category term="git" scheme="http://yonghong.tech/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker Cheat Sheet</title>
    <link href="http://yonghong.tech/tips/docker-cheat-sheet/"/>
    <id>http://yonghong.tech/tips/docker-cheat-sheet/</id>
    <published>2021-11-25T14:24:00.000Z</published>
    <updated>2021-11-25T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dzYXJnZW50L2RvY2tlci1jaGVhdC1zaGVldA==">https://github.com/wsargent/docker-cheat-sheet<i class="fa fa-external-link-alt"></i></span></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8-docker">为何使用 Docker</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83">系统环境(Prerequisites)</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装(Installation)</a></li><li><a href="#%E5%AE%B9%E5%99%A8container">容器(Containers)</a></li><li><a href="#%E9%95%9C%E5%83%8Fimages">镜像(Images)</a></li><li><a href="#%E7%BD%91%E7%BB%9Cnetworks">网络(Networks)</a></li><li><a href="#%E4%BB%93%E7%AE%A1%E4%B8%AD%E5%BF%83%E5%92%8C%E4%BB%93%E5%BA%93registry--repository">仓管中心和仓库(Registry &amp; Repository)</a></li><li><a href="#dockerfile">Dockerfile</a></li><li><a href="#%E5%B1%82layers">层(Layers)</a></li><li><a href="#%E9%93%BE%E6%8E%A5links">链接(Links)</a></li><li><a href="#%E5%8D%B7%E6%A0%87volumes">卷标(Volumes)</a></li><li><a href="#%E6%9A%B4%E9%9C%B2%E7%AB%AF%E5%8F%A3exposing-ports">暴露端口(Exposing Ports)</a></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">最佳实践(Best Practices)</a></li><li><a href="#%E5%AE%89%E5%85%A8security">安全(security)</a></li><li><a href="#%E5%B0%8F%E8%B4%B4%E5%A3%AB">小贴士(Tips)</a></li><li><a href="#%E8%B4%A1%E7%8C%AE%E6%89%8B%E5%86%8Ccontributing">贡献手册(Contributing)</a></li></ul><span id="more"></span><h2 id="为何使用-Docker"><a href="#为何使用-Docker" class="headerlink" title="为何使用 Docker"></a>为何使用 Docker</h2><p>「通过 Docker，开发者可以使用任何语言任何工具创建任何应用。“Dockerized” 的应用是完全可移植的，能在任何地方运行 - 不管是同事的 OS X 和 Windows 笔记本，或是在云端运行的 Ubuntu QA 服务，还是在虚拟机运行的 Red Hat 产品数据中心。</p><p>Docker Hub 上有 13000+ 的应用，开发者可以从中选取一个进行快速扩展开发。Docker 跟踪管理变更和依赖关系，让系统管理员能更容易理解开发人员是如何让应用运转起来的。而开发者可以通过 Docker Hub 的共有/私有仓库，构建他们的自动化编译，与其他合作者共享成果。</p><p>Docker 帮助开发者更快地构建和发布高质量的应用。」—— <span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS93aGF0LWRvY2tlci8jY29weTE=">什么是 Docker<i class="fa fa-external-link-alt"></i></span></p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>我用的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2g=">Oh My Zsh<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9QbHVnaW5zI2RvY2tlcg==">Docker 插件<i class="fa fa-external-link-alt"></i></span>，它可以自动补全 Docker 命令。你的环境可能有所不同。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Docker 对于 Linux 内核版本的 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGxhdGlvbi9iaW5hcmllcy8jY2hlY2sta2VybmVsLWRlcGVuZGVuY2llcw==">最低要求<i class="fa fa-external-link-alt"></i></span> 为 <code>3.10.x</code>。</p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>10.8「Mountain Lion」或更新版本。</p><h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><p>时刻关注你当前正在使用的 Docker 版本是十分重要的，这能够帮助你了解可用的特性。同时，可以让你在查找镜像时选择使用的版本。接下来让我们看看如何操作。</p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/version/"><code>docker version</code></a> 查看你正在运行的 Docker 版本。</li></ul><p>获取 Docker 服务版本：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">$ docker version --format &#x27;</span><span class="template-variable">&#123;&#123;<span class="name">.Server.Version</span>&#125;&#125;</span><span class="xml">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">1.8.0</span></span><br></pre></td></tr></table></figure><p>你也可以输出原始的 JSON 数据：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">version</span> <span class="comment">--format &#x27;&#123;&#123;json .&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;Client&quot;</span>:&#123;<span class="string">&quot;Version&quot;</span>:<span class="string">&quot;1.8.0&quot;</span>,<span class="string">&quot;ApiVersion&quot;</span>:<span class="string">&quot;1.20&quot;</span>,<span class="string">&quot;GitCommit&quot;</span>:<span class="string">&quot;f5bae0a&quot;</span>,<span class="string">&quot;GoVersion&quot;</span>:<span class="string">&quot;go1.4.2&quot;</span>,<span class="string">&quot;Os&quot;</span>:<span class="string">&quot;linux&quot;</span>,<span class="string">&quot;Arch&quot;</span>:<span class="string">&quot;am&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>Docker 官方提供了快速、易用的安装脚本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>如果你不想执行一个不明不白的 Shell 脚本，那么请看 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGxhdGlvbi9saW51eC8=">安装说明<i class="fa fa-external-link-alt"></i></span>，选择你在用的发行版本。</p><p>如果你是一个 Docker 超新手，那么你应当先去看看 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2dldHN0YXJ0ZWQv">系列教程<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>下载并安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9jb21tdW5pdHktZWRpdGlvbg==">Docker Community Edition<i class="fa fa-external-link-alt"></i></span>。如果你在使用 Homebrew-Cask，只需在命令行输入 <code>brew cask install docker</code> 即可。下载安装 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vdG9vbGJveC9vdmVydmlldy8=">Docker Toolbox<i class="fa fa-external-link-alt"></i></span> 亦可。<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZG9ja2VyLWZvci1tYWMv">Docker For Mac<i class="fa fa-external-link-alt"></i></span> 很赞，但是它的安装过程与 VirtualBox 不太一样。详情请查阅 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZG9ja2VyLWZvci1tYWMvZG9ja2VyLXRvb2xib3gv">比较<i class="fa fa-external-link-alt"></i></span>。</p><blockquote><p><strong>注意</strong>：Docker Toolbox 已经过时。你应当使用 Docker Community Edition，详见 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vdG9vbGJveC9vdmVydmlldy8=">Docker Toolbox<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>安装好 Docker Community Edition 后，点击 Launchpad 内的 Docker 图标。接着即可启动容器了：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> hello-world</span><br></pre></td></tr></table></figure><p>好了，现在你有了一个运行中的 Docker 容器了。</p><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h2><p><span class="exturl" data-url="aHR0cDovL2V0aGVyZWFsbWluZC5jb20vYmFzaWNzLWRvY2tlci1jb250YWluZXJzLWh5cGVydmlzb3JzLWNvcmVvcy8=">关于 Docker 进程隔离的基础<i class="fa fa-external-link-alt"></i></span>。容器 (Container) 之于虚拟机 (Virtual Machine) 就好比线程之于进程。或者你可以把他们想成是「吃了类固醇的 chroots」。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/create"><code>docker create</code></a> 创建容器但不启动它。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rename/"><code>docker rename</code></a> 用于重命名容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/run"><code>docker run</code></a> 一键创建并同时启动该容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rm"><code>docker rm</code></a> 删除容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/update/"><code>docker update</code></a> 调整容器的资源限制。</li></ul><p>通常情况下，不使用任何命令行选项启动一个容器，该容器将会立即启动并停止。若需保持其运行，你可以使用 <code>docker run -td container_id</code> 命令。选项 <code>-t</code> 表示分配一个 pseudo-TTY 会话，<code>-d</code> 表示自动将容器与终端分离（也就是说在后台运行容器，并输出容器 ID）。</p><p>如果你需要一个临时容器，可使用 <code>docker run --rm</code> 会在容器停止之后删除它。</p><p>如果你需要映射宿主机 (host) 的目录到 Docker 容器内，可使用 <code>docker run -v $HOSTDIR:$DOCKERDIR</code>。详见 <a href="#%E5%8D%B7%E6%A0%87volumes">卷标(Volumes)</a> 一节。</p><p>如果你想同时删除与容器相关联的卷标，那么在删除容器的时候必须包含 <code>-v</code> 选项，像这样 <code>docker rm -v</code>。</p><p>从 Docker 1.10 起，其内置一套各容器独立的 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2FkbWluL2xvZ2dpbmcvb3ZlcnZpZXcv">日志引擎<i class="fa fa-external-link-alt"></i></span>，每个容器可以独立使用。你可以使用 <code>docker run --log-driver=syslog</code> 来自定义日志引擎（例如以上的 <code>syslog</code>）。</p><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/start"><code>docker start</code></a> 启动已存在的容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stop"><code>docker stop</code></a> 停止运行中的容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/restart"><code>docker restart</code></a> 重启容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pause/"><code>docker pause</code></a> 暂停运行中的容器，将其「冻结」在当前状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/unpause/"><code>docker unpause</code></a> 结束容器暂停状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/wait"><code>docker wait</code></a> 阻塞地等待某个运行中的容器直到停止。</li><li><a href="https://docs.docker.com/engine/reference/commandline/kill"><code>docker kill</code></a> 向运行中的容器发送 SIGKILL 指令。</li><li><a href="https://docs.docker.com/engine/reference/commandline/attach"><code>docker attach</code></a> 连接到运行中的容器。</li></ul><p>如果你想将容器的端口 (ports) 暴露至宿主机，请见 <a href="#%E6%9A%B4%E9%9C%B2%E7%AB%AF%E5%8F%A3exposing-ports">暴露端口</a> 一节。</p><p>关于 Docker 实例崩溃后的重启策略，详见 <span class="exturl" data-url="aHR0cDovL2NvbnRhaW5lcjQyLmNvbS8yMDE0LzA5LzMwL2RvY2tlci1yZXN0YXJ0LXBvbGljaWVzLw==">本文<i class="fa fa-external-link-alt"></i></span>。</p><h4 id="CPU-限制"><a href="#CPU-限制" class="headerlink" title="CPU 限制"></a>CPU 限制</h4><p>你可以限制 CPU 资源占用，无论是指定百分比，或是特定核心数。</p><p>例如，你可以设置 <a href="https://docs.docker.com/engine/reference/run/#/cpu-share-constraint"><code>cpu-shares</code></a>。该配置看起来有点奇怪 – 1024 表示 100% CPU，因此如果你希望容器使用所有 CPU 内核的 50%，应将其设置为 512：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -ti <span class="comment">--c 512 agileek/cpuset-test</span></span><br></pre></td></tr></table></figure><p>更多信息请参阅 <span class="exturl" data-url="aHR0cHM6Ly9nb2xkbWFubi5wbC9ibG9nLzIwMTQvMDkvMTEvcmVzb3VyY2UtbWFuYWdlbWVudC1pbi1kb2NrZXIvI19jcHU=">https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu<i class="fa fa-external-link-alt"></i></span>。</p><p>通过 <a href="https://docs.docker.com/engine/reference/run/#/cpuset-constraint"><code>cpuset-cpus</code></a> 可使用特定 CPU 内核。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -ti <span class="attribute">--cpuset-cpus</span>=0,4,6 agileek/cpuset-test</span><br></pre></td></tr></table></figure><p>请参阅 <span class="exturl" data-url="aHR0cHM6Ly9hZ2lsZWVrLmdpdGh1Yi5pby9kb2NrZXIvMjAxNC8wOC8wNi9kb2NrZXItY3B1c2V0Lw==">https://agileek.github.io/docker/2014/08/06/docker-cpuset/<i class="fa fa-external-link-alt"></i></span> 获取更多细节以及一些不错的视频。</p><p>注意，Docker 在容器内仍然能够 <strong>看到</strong> 全部 CPU – 它仅仅是不使用全部而已。请参阅 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvaXNzdWVzLzIwNzcw">https://github.com/docker/docker/issues/20770<i class="fa fa-external-link-alt"></i></span> 获取更多细节。</p><h4 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h4><p>同样，亦可给 Docker 设置 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4vIy91c2VyLW1lbW9yeS1jb25zdHJhaW50cw==">内存限制<i class="fa fa-external-link-alt"></i></span>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -it -m <span class="number">300</span>M ubuntu:<span class="number">14</span>.<span class="number">04</span> /bin/bash</span><br></pre></td></tr></table></figure><h4 id="能力-Capabilities"><a href="#能力-Capabilities" class="headerlink" title="能力(Capabilities)"></a>能力(Capabilities)</h4><p>Linux 的 Capability 可以通过使用 <code>cap-add</code> 和 <code>cap-drop</code> 设置。请参阅 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4vIy9ydW50aW1lLXByaXZpbGVnZS1hbmQtbGludXgtY2FwYWJpbGl0aWVz">https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities<i class="fa fa-external-link-alt"></i></span> 获取更多细节。这有助于提高安全性。</p><p>如需要挂载基于 FUSE 的文件系统，你需要结合 <code>--cap-add</code> 和 <code>--device</code> 使用：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="params">--rm</span> -it <span class="params">--cap-add</span> SYS_ADMIN <span class="params">--device</span> <span class="string">/dev/fuse</span> sshfs</span><br></pre></td></tr></table></figure><p>授予对某个设备的访问权限：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it <span class="attribute">--device</span>=/dev/ttyUSB0 debian bash</span><br></pre></td></tr></table></figure><p>授予对所有设备的访问权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged -v <span class="regexp">/dev/</span>bus<span class="regexp">/usb:/</span>dev<span class="regexp">/bus/u</span>sb debian bash</span><br></pre></td></tr></table></figure><p>有关容器特权的更多信息请参阅 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4vIy9ydW50aW1lLXByaXZpbGVnZS1hbmQtbGludXgtY2FwYWJpbGl0aWVz">本文<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/ps"><code>docker ps</code></a> 查看运行中的所有容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logs"><code>docker logs</code></a> 从容器中读取日志。（你也可以使用自定义日志驱动，不过在 1.10 中，它只支持 <code>json-file</code> 和 <code>journald</code>）。</li><li><a href="https://docs.docker.com/engine/reference/commandline/inspect"><code>docker inspect</code></a> 查看某个容器的所有信息（包括 IP 地址）。</li><li><a href="https://docs.docker.com/engine/reference/commandline/events"><code>docker events</code></a> 从容器中获取事件 (events)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/port"><code>docker port</code></a> 查看容器的公开端口。</li><li><a href="https://docs.docker.com/engine/reference/commandline/top"><code>docker top</code></a> 查看容器中活动进程。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stats"><code>docker stats</code></a> 查看容器的资源使用量统计信息。</li><li><a href="https://docs.docker.com/engine/reference/commandline/diff"><code>docker diff</code></a> 查看容器文件系统中存在改动的文件。</li></ul><p><code>docker ps -a</code> 将显示所有容器，包括运行中和已停止的。</p><p><code>docker stats --all</code> 同样将显示所有容器，默认仅显示运行中的容器。</p><h3 id="导入-导出"><a href="#导入-导出" class="headerlink" title="导入 / 导出"></a>导入 / 导出</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/cp"><code>docker cp</code></a> 在容器和本地文件系统之间复制文件或目录。</li><li><a href="https://docs.docker.com/engine/reference/commandline/export"><code>docker export</code></a> 将容器的文件系统打包为归档文件流 (tarball archive stream) 并输出至标准输出 (STDOUT)。</li></ul><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/exec"><code>docker exec</code></a> 在容器内执行命令。</li></ul><p>例如，进入正在运行的 <code>foo</code> 容器，并连接 (attach) 到一个新的 Shell 进程：<code>docker exec -it foo /bin/bash</code>。</p><h2 id="镜像-Images"><a href="#镜像-Images" class="headerlink" title="镜像(Images)"></a>镜像(Images)</h2><p>镜像是 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VuZGVyc3RhbmRpbmctZG9ja2VyLyNob3ctZG9lcy1hLWRvY2tlci1pbWFnZS13b3Jr">Docker 容器的模板<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/images"><code>docker images</code></a> 查看所有镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/import"><code>docker import</code></a> 从归档文件创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/build"><code>docker build</code></a> 从 Dockerfile 创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/commit"><code>docker commit</code></a> 为容器创建镜像，如果容器正在运行则会临时暂停。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rmi"><code>docker rmi</code></a> 删除镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/load"><code>docker load</code></a> 从标准输入 (STDIN) 加载归档包 (tar archive) 作为镜像，包括镜像本身和标签 (tags, 0.7 起)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/save"><code>docker save</code></a> 将镜像打包为归档包，并输出至标准输出 (STDOUT)，包括所有的父层、标签和版本 (parent layers, tags, versions, 0.7 起)。</li></ul><h3 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/history"><code>docker history</code></a> 查看镜像的历史记录。</li><li><a href="https://docs.docker.com/engine/reference/commandline/tag"><code>docker tag</code></a> 给镜像打标签命名（本地或者仓库均可）。</li></ul><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>虽然你可以用 <code>docker rmi</code> 命令来删除指定的镜像，不过有个名为 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nwb3RpZnkvZG9ja2VyLWdj">docker-gc<i class="fa fa-external-link-alt"></i></span> 的工具，它可以以一种安全的方式，清理掉那些不再被任何容器使用的镜像。Docker 1.13 起，使用 <code>docker image prune</code> 亦可删除未使用的镜像。参见 <a href="#%E6%B8%85%E7%90%86">清理</a>。</p><h3 id="加载-保存镜像"><a href="#加载-保存镜像" class="headerlink" title="加载 / 保存镜像"></a>加载 / 保存镜像</h3><p>从文件中加载镜像：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">load</span> &lt; my_image.tar.gz</span><br></pre></td></tr></table></figure><p>保存既有镜像：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save my_image:my_tag <span class="string">| gzip &gt; my_image.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="导入-导出容器"><a href="#导入-导出容器" class="headerlink" title="导入 / 导出容器"></a>导入 / 导出容器</h3><p>从文件中导入容器镜像：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cat</span> my_container.tar.gz | docker <span class="keyword">import</span> - my_image:my_tag</span><br></pre></td></tr></table></figure><p>导出既有容器：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> ex<span class="keyword">port</span> my_container | gzip &gt; my_container.tar.gz</span><br></pre></td></tr></table></figure><h3 id="加载已保存的镜像-与-导入已导出为镜像的容器-的不同"><a href="#加载已保存的镜像-与-导入已导出为镜像的容器-的不同" class="headerlink" title="加载已保存的镜像 与 导入已导出为镜像的容器 的不同"></a>加载已保存的镜像 与 导入已导出为镜像的容器 的不同</h3><p>通过 <code>load</code> 命令来加载镜像，会创建一个新的镜像，并继承原镜像的所有历史。<br>通过 <code>import</code> 将容器作为镜像导入，也会创建一个新的镜像，但并不包含原镜像的历史，因此会比使用 <code>load</code> 方式生成的镜像更小。</p><h2 id="网络-Networks"><a href="#网络-Networks" class="headerlink" title="网络(Networks)"></a>网络(Networks)</h2><p>Docker 具备 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VzZXJndWlkZS9uZXR3b3JraW5nLw==">网络<i class="fa fa-external-link-alt"></i></span> 功能。我并不是很了解它，所以这是一个扩展本文的好地方。文档 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VzZXJndWlkZS9uZXR3b3JraW5nL3dvcmstd2l0aC1uZXR3b3Jrcy8=">使用网络<i class="fa fa-external-link-alt"></i></span> 指出，这是一种无需暴露端口即可实现 Docker 容器间通信的好方法。</p><h3 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_create/"><code>docker network create</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_rm/"><code>docker network rm</code></a></li></ul><h3 id="其它信息-1"><a href="#其它信息-1" class="headerlink" title="其它信息"></a>其它信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_ls/"><code>docker network ls</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/"><code>docker network inspect</code></a></li></ul><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_connect/"><code>docker network connect</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/"><code>docker network disconnect</code></a></li></ul><p>你可以 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmplc3NmcmF6LmNvbS9wb3N0L2lwcy1mb3ItYWxsLXRoZS10aGluZ3Mv">为容器指定 IP 地址<i class="fa fa-external-link-alt"></i></span>：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用你自己的子网和网关创建一个桥接网络</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">create</span> <span class="built_in">--subnet</span> <span class="string">203</span>.<span class="string">0</span>.<span class="string">113</span>.<span class="string">0</span>/<span class="string">24</span> <span class="built_in">--gateway</span> <span class="string">203</span>.<span class="string">0</span>.<span class="string">113</span>.<span class="string">254</span> <span class="string">iptastic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="comment"># 基于以上创建的网络，运行一个 Nginx 容器并指定 IP</span></span><br><span class="line">$ <span class="string">docker</span> <span class="string">run</span> <span class="built_in">--rm</span> -<span class="string">it</span> <span class="built_in">--net</span> <span class="string">iptastic</span> <span class="built_in">--ip</span> <span class="string">203</span>.<span class="string">0</span>.<span class="string">113</span>.<span class="string">2</span> <span class="string">nginx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="comment"># 在其他地方使用 CURL 访问这个 IP（假设该 IP 为公网）</span></span><br><span class="line">$ <span class="string">curl</span> <span class="string">203</span>.<span class="string">0</span>.<span class="string">113</span>.<span class="string">2</span></span><br></pre></td></tr></table></figure><h2 id="仓管中心和仓库-Registry-amp-Repository"><a href="#仓管中心和仓库-Registry-amp-Repository" class="headerlink" title="仓管中心和仓库(Registry &amp; Repository)"></a>仓管中心和仓库(Registry &amp; Repository)</h2><p>仓库 (repository) 是 <em>被托管(hosted)</em> 的已命名镜像 (tagged images) 的集合，这组镜像用于构建容器文件系统。</p><p>仓管中心 (registry) 则是 <em>托管服务(host)</em> – 用于存储仓库并提供 HTTP API，以便 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3R1dG9yaWFscy9kb2NrZXJyZXBvcy8=">管理仓库的上传和下载<i class="fa fa-external-link-alt"></i></span>。</p><p>Docker 官方托管着自己的 <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">仓管中心<i class="fa fa-external-link-alt"></i></span>，包含着数量众多的仓库。不过话虽如此，这个仓管中心 <span class="exturl" data-url="aHR0cHM6Ly90aXRhbm91cy5jb20vcG9zdHMvZG9ja2VyLWluc2VjdXJpdHk=">并没有很好地验证镜像<i class="fa fa-external-link-alt"></i></span>，所以如果你担心安全问题的话，请尽量避免使用它。</p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/login"><code>docker login</code></a> 登入仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logout"><code>docker logout</code></a> 登出仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/search"><code>docker search</code></a> 从仓管中心检索镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pull"><code>docker pull</code></a> 从仓管中心拉取镜像到本地。</li><li><a href="https://docs.docker.com/engine/reference/commandline/push"><code>docker push</code></a> 从本地推送镜像到仓管中心。</li></ul><h3 id="本地仓管中心"><a href="#本地仓管中心" class="headerlink" title="本地仓管中心"></a>本地仓管中心</h3><p>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kaXN0cmlidXRpb24=">docker distribution<i class="fa fa-external-link-alt"></i></span> 项目搭建本地的仓管中心，详情参阅 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIuZ2l0aHViLmlvL2Jsb2IvbWFzdGVyL3JlZ2lzdHJ5L2RlcGxveWluZy5tZA==">本地发布 (local deploy)<i class="fa fa-external-link-alt"></i></span> 的介绍。</p><p>科学上网后，也可以看看 <span class="exturl" data-url="aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9hL2RvY2tlcnByb2plY3Qub3JnL2ZvcnVtLyMhZm9ydW0vZGlzdHJpYnV0aW9u">Google+ Group<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>当你执行 <code>docker build</code> 时，Docker 将会根据 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLw==">配置文件<i class="fa fa-external-link-alt"></i></span> 启动 Docker 容器。远优于使用 <code>docker commit</code>。</p><p>以下是一些编写 Dockerfile 的常用编辑器，并链接到适配的语法高亮模块︰</p><ul><li>如果你在使用 <span class="exturl" data-url="aHR0cDovL2plZGl0Lm9yZy8=">jEdit<i class="fa fa-external-link-alt"></i></span>，你可以使用我开发的 Dockerfile <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dzYXJnZW50L2plZGl0LWRvY2tlci1tb2Rl">语法高亮模块<i class="fa fa-external-link-alt"></i></span>。</li><li><span class="exturl" data-url="aHR0cHM6Ly9wYWNrYWdlY29udHJvbC5pby9wYWNrYWdlcy9Eb2NrZXJmaWxlJTIwU3ludGF4JTIwSGlnaGxpZ2h0aW5n">Sublime Text 2<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9hdG9tLmlvL3BhY2thZ2VzL2xhbmd1YWdlLWRvY2tlcg==">Atom<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VrYWxpbmluL0RvY2tlcmZpbGUudmlt">Vim<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nwb3RpZnkvZG9ja2VyZmlsZS1tb2Rl">Emacs<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvdHJlZS9tYXN0ZXIvY29udHJpYi9zeW50YXgvdGV4dG1hdGU=">TextMate<i class="fa fa-external-link-alt"></i></span></li><li>更多信息请参阅 <span class="exturl" data-url="aHR0cHM6Ly9kb21laWRlLmdpdGh1Yi5pby8=">Docker 遇上 IDE<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNkb2NrZXJpZ25vcmUtZmlsZQ==">.dockerignore<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNmcm9t">FROM<i class="fa fa-external-link-alt"></i></span> 为其他指令设置基础镜像 (Base Image)。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNtYWludGFpbmVyLWRlcHJlY2F0ZWQ=">MAINTAINER (deprecated - use LABEL instead)<i class="fa fa-external-link-alt"></i></span> 为生成的镜像设置作者字段。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNydW4=">RUN<i class="fa fa-external-link-alt"></i></span> 在当前镜像的基础上生成一个新层并执行命令。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNjbWQ=">CMD<i class="fa fa-external-link-alt"></i></span> 设置容器默认执行命令。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNleHBvc2U=">EXPOSE<i class="fa fa-external-link-alt"></i></span> 告知 Docker 容器在运行时所要监听的网络端口。注意：并没有实际上将端口设置为可访问。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNlbnY=">ENV<i class="fa fa-external-link-alt"></i></span> 设置环境变量。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNhZGQ=">ADD<i class="fa fa-external-link-alt"></i></span> 将文件、目录或远程文件复制到容器中。缓存无效。请尽量用 <code>COPY</code> 代替 <code>ADD</code>。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNjb3B5">COPY<i class="fa fa-external-link-alt"></i></span> 将文件或文件夹复制到容器中。注意：将使用 ROOT 用户复制文件，故无论 USER / WORKDIR 指令如何配置，你都需要手动修改其所有者（<code>chown</code>），<code>ADD</code> 也是一样。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNlbnRyeXBvaW50">ENTRYPOINT<i class="fa fa-external-link-alt"></i></span> 将容器设为可执行的。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyN2b2x1bWU=">VOLUME<i class="fa fa-external-link-alt"></i></span> 在容器内部创建挂载点 (mount point) 指向外部挂载的卷标或其他容器。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyN1c2Vy">USER<i class="fa fa-external-link-alt"></i></span> 设置随后执行 RUN / CMD / ENTRYPOINT 命令的用户名。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyN3b3JrZGly">WORKDIR<i class="fa fa-external-link-alt"></i></span> 设置工作目录 (working directory)。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNhcmc=">ARG<i class="fa fa-external-link-alt"></i></span> 定义编译时 (build-time) 变量。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNvbmJ1aWxk">ONBUILD<i class="fa fa-external-link-alt"></i></span> 添加触发指令，当该镜像被作为其他镜像的基础镜像时该指令会被触发。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNzdG9wc2lnbmFs">STOPSIGNAL<i class="fa fa-external-link-alt"></i></span> 设置停止容器时，向容器内发送的系统调用信号 (system call signal)。</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29uZmlnL2xhYmVscy1jdXN0b20tbWV0YWRhdGEv">LABEL<i class="fa fa-external-link-alt"></i></span> 将键值对元数据 (key/value metadata) 应用到镜像、容器或是守护进程。</li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul><li><span class="exturl" data-url="aHR0cDovL2ZsdXg3LmNvbS9ibG9ncy9kb2NrZXIvZG9ja2VyLXR1dG9yaWFsLXNlcmllcy1wYXJ0LTMtYXV0b21hdGlvbi1pcy10aGUtd29yZC11c2luZy1kb2NrZXJmaWxlLw==">Flux7’s Dockerfile Tutorial<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNkb2NrZXJmaWxlLWV4YW1wbGVz">Examples<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VzZXJndWlkZS9lbmctaW1hZ2UvZG9ja2VyZmlsZV9iZXN0LXByYWN0aWNlcy8=">Best practices for writing Dockerfiles<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2Nyb3NieW1pY2hhZWwuY29tLw==">Michael Crosby<i class="fa fa-external-link-alt"></i></span> 还有更多的 <span class="exturl" data-url="aHR0cDovL2Nyb3NieW1pY2hhZWwuY29tL2RvY2tlcmZpbGUtYmVzdC1wcmFjdGljZXMuaHRtbA==">Dockerfiles best practices<i class="fa fa-external-link-alt"></i></span> / <span class="exturl" data-url="aHR0cDovL2Nyb3NieW1pY2hhZWwuY29tL2RvY2tlcmZpbGUtYmVzdC1wcmFjdGljZXMtdGFrZS0yLmh0bWw=">take 2<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2pvbmF0aGFuLmJlcmdrbm9mZi5jb20vam91cm5hbC9idWlsZGluZy1nb29kLWRvY2tlci1pbWFnZXM=">Building Good Docker Images<i class="fa fa-external-link-alt"></i></span> / <span class="exturl" data-url="aHR0cDovL2pvbmF0aGFuLmJlcmdrbm9mZi5jb20vam91cm5hbC9idWlsZGluZy1iZXR0ZXItZG9ja2VyLWltYWdlcw==">Building Better Docker Images<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vZ2FyZXRoci9tYW5hZ2luZy1jb250YWluZXItY29uZmlndXJhdGlvbi13aXRoLW1ldGFkYXRh">Managing Container Configuration with Metadata<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="层-Layers"><a href="#层-Layers" class="headerlink" title="层(Layers)"></a>层(Layers)</h2><p>Docker 的版本化文件系统是基于层的。就像 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VzZXJndWlkZS9zdG9yYWdlZHJpdmVyL2ltYWdlc2FuZGNvbnRhaW5lcnMv">Git 的提交或文件变更系统<i class="fa fa-external-link-alt"></i></span> 一样。</p><h2 id="链接-Links"><a href="#链接-Links" class="headerlink" title="链接(Links)"></a>链接(Links)</h2><p>链接 (links) <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vdXNlcmd1aWRlL2RvY2tlcmxpbmtzLw==">通过 TCP/IP 端口<i class="fa fa-external-link-alt"></i></span> 实现 Docker 容器之间的通讯。<span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5hdGxhc3NpYW4uY29tLzIwMTMvMTEvZG9ja2VyLWFsbC10aGUtdGhpbmdzLWF0LWF0bGFzc2lhbi1hdXRvbWF0aW9uLWFuZC13aXJpbmcv">Atlassian<i class="fa fa-external-link-alt"></i></span> 展示了可用的例子。你还可以 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3VzZXJndWlkZS9uZXR3b3JraW5nL2RlZmF1bHRfbmV0d29yay9kb2NrZXJsaW5rcy8jL3VwZGF0aW5nLXRoZS1ldGNob3N0cy1maWxl">通过主机名 (hostname) 链接<i class="fa fa-external-link-alt"></i></span>。</p><p>在某种意义上来说，该特性已经被 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vbmV0d29yay8=">自定义网络<i class="fa fa-external-link-alt"></i></span> 所替代。</p><p>注意: 如果你希望容器之间<strong>只</strong>通过链接进行通讯，在启动 Docker 守护进程时，请使用 <code>-icc=false</code> 来禁用内部进程通讯。</p><p>假设你有一个名为 CONTAINER 的容器（通过 <code>docker run --name CONTAINER</code> 指定）并且在 Dockerfile 中，暴露了一个端口:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">EXPOSE</span> <span class="number">1337</span></span><br></pre></td></tr></table></figure><p>然后，我们创建另外一个名为 LINKED 的容器:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d <span class="comment">--link CONTAINER:ALIAS --name LINKED user/wordpress</span></span><br></pre></td></tr></table></figure><p>然后 CONTAINER 暴露的端口和别名将会以如下的环境变量出现在 LINKED 中:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$ALIAS</span>_PORT_1337_TCP_PORT</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$ALIAS</span>_PORT_1337_TCP_ADDR</span></span><br></pre></td></tr></table></figure><p>那么你便可以通过这种方式来连接它了。</p><p>使用 <code>docker rm --link</code> 即可删除链接。</p><p>通常，Docker 容器（亦可理解为「服务」）之间的链接，是「服务发现」的一个子集。如果你打算在生产中大规模使用 Docker，这将是一个很大的问题。请参阅<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL3RoZS1kb2NrZXItZWNvc3lzdGVtLXNlcnZpY2UtZGlzY292ZXJ5LWFuZC1kaXN0cmlidXRlZC1jb25maWd1cmF0aW9uLXN0b3Jlcw==">The Docker Ecosystem: Service Discovery and Distributed Configuration Stores<i class="fa fa-external-link-alt"></i></span> 获取更多信息。</p><h2 id="卷标-Volumes"><a href="#卷标-Volumes" class="headerlink" title="卷标(Volumes)"></a>卷标(Volumes)</h2><p>Docker 的卷标 (volumes) 是 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3R1dG9yaWFscy9kb2NrZXJ2b2x1bWVzLw==">独立的文件系统<i class="fa fa-external-link-alt"></i></span>。它们并非必须连接到特定的容器上。</p><h3 id="生命周期-3"><a href="#生命周期-3" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/volume_create/"><code>docker volume create</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/volume_rm/"><code>docker volume rm</code></a></li></ul><h3 id="信息-1"><a href="#信息-1" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/"><code>docker volume ls</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/"><code>docker volume inspect</code></a></li></ul><p>卷标在不能使用链接（只有 TCP/IP）的情况下非常有用。例如，如果你有两个 Docker 实例需要通讯并在文件系统上留下记录。</p><p>你可以一次性将其挂载到多个 docker 容器上，通过 <code>docker run --volumes-from</code>。</p><p>因为卷标是独立的文件系统，它们通常被用于存储各容器之间的瞬时状态。也就是说，你可以配置一个无状态临时容器，关掉之后，当你有第二个这种临时容器实例的时候，你可以从上一次保存的状态继续执行。</p><p>查看 <span class="exturl" data-url="aHR0cDovL2Nyb3NieW1pY2hhZWwuY29tL2FkdmFuY2VkLWRvY2tlci12b2x1bWVzLmh0bWw=">卷标进阶<i class="fa fa-external-link-alt"></i></span> 来获取更多细节。<span class="exturl" data-url="aHR0cDovL2NvbnRhaW5lcjQyLmNvbS8yMDE0LzExLzAzL2RvY2tlci1pbmRlcHRoLXZvbHVtZXMv">Container42<i class="fa fa-external-link-alt"></i></span> 非常有用。</p><p>你可以 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3R1dG9yaWFscy9kb2NrZXJ2b2x1bWVzLyNtb3VudC1hLWhvc3QtZGlyZWN0b3J5LWFzLWEtZGF0YS12b2x1bWU=">将宿主 MacOS 的文件夹映射为 Docker 卷标<i class="fa fa-external-link-alt"></i></span>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v <span class="regexp">/Users/</span>wsargent<span class="regexp">/myapp/</span>src:/src</span><br></pre></td></tr></table></figure><p>你也可以用远程 NFS 卷标，如果你觉得你 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3R1dG9yaWFscy9kb2NrZXJ2b2x1bWVzLyMvbW91bnQtYS1zaGFyZWQtc3RvcmFnZS12b2x1bWUtYXMtYS1kYXRhLXZvbHVtZQ==">有足够勇气<i class="fa fa-external-link-alt"></i></span>。</p><p>还可以考虑运行一个纯数据容器，像 <span class="exturl" data-url="aHR0cDovL2NvbnRhaW5lcjQyLmNvbS8yMDEzLzEyLzE2L3BlcnNpc3RlbnQtdm9sdW1lcy13aXRoLWRvY2tlci1jb250YWluZXItYXMtdm9sdW1lLXBhdHRlcm4v">这里<i class="fa fa-external-link-alt"></i></span> 所说的那样，提供可移植数据。</p><p>记得，<a href="#%E5%B0%86%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD%E4%B8%BA%E5%8D%B7%E6%A0%87">文件也可以被挂载为卷标</a>。</p><h2 id="暴露端口-Exposing-ports"><a href="#暴露端口-Exposing-ports" class="headerlink" title="暴露端口(Exposing ports)"></a>暴露端口(Exposing ports)</h2><p>通过宿主容器暴露输入端口相当 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4vI2V4cG9zZS1pbmNvbWluZy1wb3J0cw==">繁琐但有效的<i class="fa fa-external-link-alt"></i></span>。</p><p>例如使用 <code>-p</code> 将容器端口映射到宿主端口上（只使用本地主机 (localhost) 接口）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -p 127.0.0.1:<span class="variable">$HOSTPORT</span>:<span class="variable">$CONTAINERPORT</span> --name CONTAINER -t someimage</span><br></pre></td></tr></table></figure><p>你可以使用 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLyNleHBvc2U=">EXPOSE<i class="fa fa-external-link-alt"></i></span> 告知 Docker，该容器在运行时监听指定的端口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE <span class="tag">&lt;<span class="name">CONTAINERPORT</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是注意 EXPOSE 并不会直接暴露端口，你需要用参数 <code>-p</code> 。比如说你要在 localhost 上暴露容器的端口:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A DOCKER -<span class="keyword">p</span> tcp --dport <span class="symbol">&lt;LOCALHOSTPORT&gt;</span> -<span class="keyword">j</span> DNAT --<span class="keyword">to</span>-destination <span class="symbol">&lt;CONTAINERIP&gt;</span>:<span class="symbol">&lt;PORT&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是在 Virtualbox 中运行 Docker，那么你需要配置端口转发 (forward the port)。使用 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnZhZ3JhbnR1cC5jb20vdjIvbmV0d29ya2luZy9mb3J3YXJkZWRfcG9ydHMuaHRtbA==">forwarded_port<i class="fa fa-external-link-alt"></i></span> 在 Vagrantfile 上配置暴露的端口范围，这样你就可以动态地映射了：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="built_in">do</span> |<span class="type">config</span>|<span class="type"></span></span><br><span class="line"><span class="type">  ...</span></span><br><span class="line"><span class="type"></span></span><br><span class="line"><span class="type">  (49000</span>.<span class="number">.49900</span>).each <span class="built_in">do</span> |<span class="type">port</span>|<span class="type"></span></span><br><span class="line"><span class="type">    config</span>.vm.network :forwarded_port, :host =&gt; port, :guest =&gt; port</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果你忘记了将什么端口映射到宿主机上的话，可使用 <code>docker port</code> 查看：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">port</span> CONTAINER <span class="variable">$CONTAINERPORT</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>这里有一些最佳实践，以及争论焦点：</p><ul><li><span class="exturl" data-url="aHR0cDovL2dyZWdvcnlzem9yYy5jb20vYmxvZy8yMDE0LzEwLzE2L3RoZS1yYWJiaXQtaG9sZS1vZi11c2luZy1kb2NrZXItaW4tYXV0b21hdGVkLXRlc3RzLw==">The Rabbit Hole of Using Docker in Automated Tests<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9icmlkZ2V0a3JvbWhvdXQ=">Bridget Kromhout<i class="fa fa-external-link-alt"></i></span> has a useful blog post on <span class="exturl" data-url="aHR0cDovL3N5c2FkdmVudC5ibG9nc3BvdC5jby51ay8yMDE0LzEyL2RheS0xLWRvY2tlci1pbi1wcm9kdWN0aW9uLXJlYWxpdHktbm90Lmh0bWw=">running Docker in production<i class="fa fa-external-link-alt"></i></span> at Dramafever.  </li><li>There’s also a best practices <span class="exturl" data-url="aHR0cDovL2RldmVsb3BlcnMubHlzdC5jb20vZGV2b3BzLzIwMTQvMTIvMDgvZG9ja2VyLw==">blog post<i class="fa fa-external-link-alt"></i></span> from Lyst.</li><li><span class="exturl" data-url="aHR0cHM6Ly9lbmdpbmVlcmluZy5zYWxlc2ZvcmNlaXEuY29tLzIwMTMvMTEvMDUvYS1kb2NrZXItZGV2LWVudmlyb25tZW50LWluLTI0LWhvdXJzLXBhcnQtMi1vZi0yLmh0bWw=">A Docker Dev Environment in 24 Hours!<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90ZXJzZXN5c3RlbXMuY29tLzIwMTMvMTEvMjAvYnVpbGRpbmctYS1kZXZlbG9wbWVudC1lbnZpcm9ubWVudC13aXRoLWRvY2tlci8=">Building a Development Environment With Docker<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zYW1zYWZmcm9uLmNvbS9hcmNoaXZlLzIwMTMvMTEvMDcvZGlzY291cnNlLWluLWEtZG9ja2VyLWNvbnRhaW5lcg==">Discourse in a Docker Container<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="安全-Security"><a href="#安全-Security" class="headerlink" title="安全(Security)"></a>安全(Security)</h2><p>这节准备讨论一些关于 Docker 安全性的问题。Docker 官方文档 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vYXJ0aWNsZXMvc2VjdXJpdHkv">安全<i class="fa fa-external-link-alt"></i></span> 页面讲述了更多细节。</p><p>首先第一件事：Docker 是有 root 权限的。如果你在 <code>docker</code> 组，那么你就有 <span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYxMjI2MjExNzU1L2h0dHA6Ly9yZXZlbnRsb3YuY29tL2Fkdmlzb3JpZXMvdXNpbmctdGhlLWRvY2tlci1jb21tYW5kLXRvLXJvb3QtdGhlLWhvc3Q=">root 权限<i class="fa fa-external-link-alt"></i></span>。如果你将 Docker 的 Unix Socket 暴露给容器，意味着你赋予了容器 <span class="exturl" data-url="aHR0cHM6Ly93d3cubHZoLmlvL3Bvc3RzL2RvbnQtZXhwb3NlLXRoZS1kb2NrZXItc29ja2V0LW5vdC1ldmVuLXRvLWEtY29udGFpbmVyLw==">宿主机 root 权限<i class="fa fa-external-link-alt"></i></span>。</p><p>Docker 不应当作为唯一的防御措施。你应当使其更加安全可靠。</p><p>为了更好地理解容器暴露了什么，可参阅由 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9keW5fX18=">Aaron Grattafiori<i class="fa fa-external-link-alt"></i></span> 编写的 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmNjZ3JvdXAudHJ1c3QvZ2xvYmFsYXNzZXRzL291ci1yZXNlYXJjaC91cy93aGl0ZXBhcGVycy8yMDE2L2FwcmlsL25jY19ncm91cF91bmRlcnN0YW5kaW5nX2hhcmRlbmluZ19saW51eF9jb250YWluZXJzLTEtMS5wZGY=">Understanding and Hardening Linux Containers<i class="fa fa-external-link-alt"></i></span>。这是一个完整全面且包含大量链接和脚注的容器问题指南，介绍了许多有用的内容。即使你已经加固过容器，以下的安全提示依然十分有帮助，但并不能代替理解的过程。</p><h3 id="安全提示"><a href="#安全提示" class="headerlink" title="安全提示"></a>安全提示</h3><p>为了最大的安全性，你应当考虑在虚拟机上运行 Docker。这是直接从 Docker 安全团队拿来的资料 – <span class="exturl" data-url="aHR0cDovL3d3dy5zbGlkZXNoYXJlLm5ldC9qcGV0YXp6by9saW51eC1jb250YWluZXJzLWx4Yy1kb2NrZXItYW5kLXNlY3VyaXR5">slides<i class="fa fa-external-link-alt"></i></span> / <span class="exturl" data-url="aHR0cDovL3d3dy5wcm9qZWN0YXRvbWljLmlvL2Jsb2cvMjAxNC8wOC9pcy1pdC1zYWZlLWEtbG9vay1hdC1kb2NrZXItYW5kLXNlY3VyaXR5LWZyb20tbGludXhjb24v">notes<i class="fa fa-external-link-alt"></i></span>。之后，可使用 AppArmor、seccomp、SELinux、grsec 等来 <span class="exturl" data-url="aHR0cDovL2xpbnV4LWF1ZGl0LmNvbS9kb2NrZXItc2VjdXJpdHktYmVzdC1wcmFjdGljZXMtZm9yLXlvdXItdmVzc2VsLWFuZC1jb250YWluZXJzLw==">限制容器的权限<i class="fa fa-external-link-alt"></i></span>。更多细节，请查阅 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRvY2tlci5jb20vMjAxNi8wMi9kb2NrZXItZW5naW5lLTEtMTAtc2VjdXJpdHkv">Docker 1.10 security features<i class="fa fa-external-link-alt"></i></span>。</p><p>Docker 镜像 ID 属于 <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BxdWF5aW8veW91ci1kb2NrZXItaW1hZ2UtaWRzLWFyZS1zZWNyZXRzLWFuZC1pdHMtdGltZS15b3UtdHJlYXRlZC10aGVtLXRoYXQtd2F5LWY1NWU5ZjE0YzFhNA==">敏感信息<i class="fa fa-external-link-alt"></i></span> 所以它不应该向外界公开。请将它们当作密码来对待。</p><p>阅读由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvbnN0cnVrdG9pZA==">Thomas Sjögren<i class="fa fa-external-link-alt"></i></span> 编写的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvbnN0cnVrdG9pZC9Eb2NrZXIvYmxvYi9tYXN0ZXIvU2VjdXJpdHkvQ2hlYXRTaGVldC5hZG9j">Docker Security Cheat Sheet<i class="fa fa-external-link-alt"></i></span>：关于加固容器的不错的建议。</p><p>查看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXItYmVuY2gtc2VjdXJpdHk=">Docker 安全测试脚本<i class="fa fa-external-link-alt"></i></span>，下载 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRvY2tlci5jb20vMjAxNS8wNS91bmRlcnN0YW5kaW5nLWRvY2tlci1zZWN1cml0eS1hbmQtYmVzdC1wcmFjdGljZXMv">最佳实践白皮书<i class="fa fa-external-link-alt"></i></span>。</p><p>你应当远离使用非稳定版本 grsecurity / pax 的内核，比如 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWxwaW5lX0xpbnV4">Alpine Linux<i class="fa fa-external-link-alt"></i></span>。如果在产品中用了 grsecurity，那么你应该考虑使用有 <span class="exturl" data-url="aHR0cHM6Ly9ncnNlY3VyaXR5Lm5ldC9idXNpbmVzc19zdXBwb3J0LnBocA==">商业支持<i class="fa fa-external-link-alt"></i></span> 的 <span class="exturl" data-url="aHR0cHM6Ly9ncnNlY3VyaXR5Lm5ldC9hbm5vdW5jZS5waHA=">稳定版本<i class="fa fa-external-link-alt"></i></span>，就像你对待 RedHat 那样。虽然要 $200 每月，但对于你的运维预算来说不值一提。</p><p>从 Docker 1.11 开始，你可以轻松的限制在容器中可用的进程数，以防止 fork 炸弹。 这要求 Linux 内核 &gt;= 4.3，并且要在内核配置中打开 CGROUP_PIDS=y。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--pids-limit</span>=64</span><br></pre></td></tr></table></figure><p>同时，你也可以限制进程再获取新权限。该功能是 Linux 内核从 3.5 版本开始就拥有的。你可以从 <span class="exturl" data-url="aHR0cDovL3d3dy5wcm9qZWN0YXRvbWljLmlvL2Jsb2cvMjAxNi8wMy9uby1uZXctcHJpdnMtZG9ja2VyLw==">这篇博客<i class="fa fa-external-link-alt"></i></span> 中阅读到更多关于这方面的内容。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> <span class="attribute">--security-opt</span>=<span class="literal">no</span>-new-privileges</span><br></pre></td></tr></table></figure><p>以下内容摘选自 <span class="exturl" data-url="aHR0cDovL2NvbnRhaW5lci1zb2x1dGlvbnMuY29tL2lzLWRvY2tlci1zYWZlLWZvci1wcm9kdWN0aW9uLw==">Container Solutions<i class="fa fa-external-link-alt"></i></span> 的 <span class="exturl" data-url="aHR0cDovL2NvbnRhaW5lci1zb2x1dGlvbnMuY29tL2NvbnRlbnQvdXBsb2Fkcy8yMDE1LzA2LzE1LjA2LjE1X0RvY2tlckNoZWF0U2hlZXRfQTIucGRm">Docker Security Cheat Sheet<i class="fa fa-external-link-alt"></i></span>（PDF 版本，难以使用，故复制至此）：</p><p>关闭内部进程通讯：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">docker</span> <span class="literal">-</span><span class="comment">d</span> --<span class="comment">icc=false</span> --<span class="comment">iptables</span></span><br></pre></td></tr></table></figure><p>设置容器为只读：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--read-only</span></span><br></pre></td></tr></table></figure><p>通过 hashsum 来验证卷标：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull debian@sha<span class="number">256</span>:a<span class="number">25306</span>f<span class="number">3850</span>e<span class="number">1</span>bd<span class="number">44541976</span>aa<span class="number">7</span>b<span class="number">5</span>fd<span class="number">0</span>a<span class="number">29</span>be</span><br></pre></td></tr></table></figure><p>设置卷标为只读：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="keyword">pwd</span>)/secret<span class="variable">s:</span>/secret<span class="variable">s:ro</span> debian</span><br></pre></td></tr></table></figure><p>在 Dockerfile 中定义用户并以该用户运行，避免在容器中以 ROOT 身份操作：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN groupadd -r <span class="keyword">user</span> <span class="title">&amp;&amp; useradd</span> -r -g <span class="keyword">user</span> <span class="title">user</span></span><br><span class="line"><span class="keyword">USER</span> <span class="title">user</span></span><br></pre></td></tr></table></figure><h3 id="用户命名空间-User-Namespaces"><a href="#用户命名空间-User-Namespaces" class="headerlink" title="用户命名空间(User Namespaces)"></a>用户命名空间(User Namespaces)</h3><p>还可以通过使用 <span class="exturl" data-url="aHR0cHM6Ly9zM2hoLndvcmRwcmVzcy5jb20vMjAxMy8wNy8xOS9jcmVhdGluZy1hbmQtdXNpbmctY29udGFpbmVycy13aXRob3V0LXByaXZpbGVnZS8=">用户命名空间<i class="fa fa-external-link-alt"></i></span> – 自 1.10 版本起已内置，但默认并未启用。</p><p>要在 Ubuntu 15.10 中启用用户命名空间 (remap the userns)，请 <span class="exturl" data-url="aHR0cHM6Ly9yYWVzZW5lLmdpdGh1Yi5pby9ibG9nLzIwMTYvMDIvMDQvRG9ja2VyLVVzZXItTmFtZXNwYWNlcy8=">跟着这篇博客的例子<i class="fa fa-external-link-alt"></i></span> 来做。</p><h3 id="安全相关视频"><a href="#安全相关视频" class="headerlink" title="安全相关视频"></a>安全相关视频</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS8wNExPdU1nTmo5VQ==">Using Docker Safely<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9LbXhPWG1QaFpiaw==">Securing your applications using Docker<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9hOWxFOVVycjZBUQ==">Container security: Do containers actually contain?<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1pTjZRYnN6QjFSOA==">Linux Containers: Future or Fantasy?<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="安全路线图"><a href="#安全路线图" class="headerlink" title="安全路线图"></a>安全路线图</h3><p>Docker 的路线图提到关于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvYmxvYi9tYXN0ZXIvUk9BRE1BUC5tZCMxMS1zZWN1cml0eQ==">seccomp 的支持<i class="fa fa-external-link-alt"></i></span>。<br>一个名为 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pmcmF6ZWxsZS9iYW5l">bane<i class="fa fa-external-link-alt"></i></span> 的 AppArmor 策略生成器正在实现 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvaXNzdWVzLzE3MTQy">安全配置文件<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><p>链接：</p><ul><li><span class="exturl" data-url="aHR0cDovL3Nzc3NsaWRlLmNvbS9zcGVha2VyZGVjay5jb20vYm1vcmVhcnR5LzE1LWRvY2tlci10aXBzLWluLTUtbWludXRlcw==">15 Docker Tips in 5 minutes<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZnJlc2guaW8vYmxvZy9ldmVyeWRheS1oYWNrcy1kb2NrZXIv">CodeFresh Everyday Hacks Docker<i class="fa fa-external-link-alt"></i></span></li></ul><h3 id="清理-1"><a href="#清理-1" class="headerlink" title="清理"></a>清理</h3><p>最新的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9kb2NrZXIvcHVsbC8yNjEwOA==">数据管理命令<i class="fa fa-external-link-alt"></i></span> 已在 Docker 1.13 实现：</p><ul><li><code>docker system prune</code></li><li><code>docker volume prune</code></li><li><code>docker network prune</code></li><li><code>docker container prune</code></li><li><code>docker image prune</code></li></ul><h3 id="df-命令"><a href="#df-命令" class="headerlink" title="df 命令"></a>df 命令</h3><p><code>docker system df</code> 将显示当前 Docker 各部分占用的磁盘空间。</p><h3 id="Heredoc-声明-Docker-容器"><a href="#Heredoc-声明-Docker-容器" class="headerlink" title="Heredoc 声明 Docker 容器"></a>Heredoc 声明 Docker 容器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t htop - &lt;&lt; EOF</span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="builtin-name">RUN</span> apk --no-cache <span class="builtin-name">add</span> htop</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="最近一次的容器-ID"><a href="#最近一次的容器-ID" class="headerlink" title="最近一次的容器 ID"></a>最近一次的容器 ID</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias <span class="attribute">dl</span>=<span class="string">&#x27;docker ps -l -q&#x27;</span></span><br><span class="line">docker <span class="builtin-name">run</span> ubuntu echo hello world</span><br><span class="line">docker commit $(dl) helloworld</span><br></pre></td></tr></table></figure><h3 id="带命令的提交（需要-Dockerfile）"><a href="#带命令的提交（需要-Dockerfile）" class="headerlink" title="带命令的提交（需要 Dockerfile）"></a>带命令的提交（需要 Dockerfile）</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -<span class="built_in">run</span>=&#x27;&#123;<span class="string">&quot;Cmd&quot;</span>:[<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;-too -many -opts&quot;</span>]&#125;&#x27; $(dl) postgres</span><br></pre></td></tr></table></figure><h3 id="获取-IP-地址"><a href="#获取-IP-地址" class="headerlink" title="获取 IP 地址"></a>获取 IP 地址</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> $(dl) | <span class="keyword">grep</span> -wm1 IPAddress | cut -d <span class="string">&#x27;&quot;&#x27;</span> -f <span class="number">4</span></span><br></pre></td></tr></table></figure><p>或使用 <span class="exturl" data-url="aHR0cHM6Ly9zdGVkb2xhbi5naXRodWIuaW8vanEv">jq<i class="fa fa-external-link-alt"></i></span>:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect $(dl) | jq -r <span class="string">&#x27;.[0].NetworkSettings.IPAddress&#x27;</span></span><br></pre></td></tr></table></figure><p>或使用 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbnNwZWN0">go 模板<i class="fa fa-external-link-alt"></i></span>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">docker inspect -f &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">.NetworkSettings.IPAddress</span> &#125;&#125;</span><span class="xml">&#x27; <span class="tag">&lt;<span class="name">container_name</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>或在通过 Dockerfile 构建镜像时，通过构建参数 (build argument) 传入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DOCKER_HOST_IP</span>=`ifconfig | grep -E <span class="string">&quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span> | grep -v 127.0.0.1 | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span> | cut -f2 -d: | head -n1`</span><br><span class="line">echo DOCKER_HOST_IP = <span class="variable">$DOCKER_HOST_IP</span></span><br><span class="line">docker build \</span><br><span class="line">  --build-arg <span class="attribute">ARTIFACTORY_ADDRESS</span>=<span class="variable">$DOCKER_HOST_IP</span> </span><br><span class="line">  -t sometag \</span><br><span class="line">  some-directory/</span><br></pre></td></tr></table></figure><h3 id="获取端口映射"><a href="#获取端口映射" class="headerlink" title="获取端口映射"></a>获取端口映射</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">docker inspect -f &#x27;</span><span class="template-variable">&#123;&#123;<span class="name">range</span> $p, $conf <span class="attr">:</span>= .NetworkSettings.Ports&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">$p</span>&#125;&#125;</span><span class="xml"> -&gt; </span><span class="template-variable">&#123;&#123;(<span class="name">index</span> $conf <span class="number">0</span>).HostPort&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">end</span>&#125;&#125;</span><span class="xml">&#x27; <span class="tag">&lt;<span class="name">containername</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="通过正则匹配容器"><a href="#通过正则匹配容器" class="headerlink" title="通过正则匹配容器"></a>通过正则匹配容器</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> | <span class="params">grep</span> <span class="string">&quot;REGEXP_PATTERN&quot;</span> | <span class="params">cut</span> -<span class="params">f1</span> -<span class="params">d</span><span class="string">&quot; &quot;</span>)</span>; <span class="keyword">do</span> echo $i; <span class="keyword">done</span>`</span><br></pre></td></tr></table></figure><h3 id="获取环境变量配置"><a href="#获取环境变量配置" class="headerlink" title="获取环境变量配置"></a>获取环境变量配置</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--rm ubuntu env</span></span><br></pre></td></tr></table></figure><h3 id="强行终止运行中的容器"><a href="#强行终止运行中的容器" class="headerlink" title="强行终止运行中的容器"></a>强行终止运行中的容器</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure><h3 id="删除所有容器（强行删除！无论容器运行或停止）"><a href="#删除所有容器（强行删除！无论容器运行或停止）" class="headerlink" title="删除所有容器（强行删除！无论容器运行或停止）"></a>删除所有容器（强行删除！无论容器运行或停止）</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-qa</span>)</span><br></pre></td></tr></table></figure><h3 id="删除旧容器"><a href="#删除旧容器" class="headerlink" title="删除旧容器"></a>删除旧容器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> ps -a | grep <span class="string">&#x27;weeks ago&#x27;</span> | awk <span class="string">&#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;</span> | xargs docker rm</span><br></pre></td></tr></table></figure><h3 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="literal">-v</span> `docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">-q</span> <span class="operator">-f</span> status=exited`</span><br></pre></td></tr></table></figure><h3 id="停止并删除容器"><a href="#停止并删除容器" class="headerlink" title="停止并删除容器"></a>停止并删除容器</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">aq</span>)</span><span class="operator"> &amp;&amp; </span>docker rm -v <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">aq</span>)</span></span><br></pre></td></tr></table></figure><h3 id="删除无用-dangling-的镜像"><a href="#删除无用-dangling-的镜像" class="headerlink" title="删除无用 (dangling) 的镜像"></a>删除无用 (dangling) 的镜像</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">q</span> -<span class="params">f</span> <span class="params">dangling</span>=<span class="params">true</span>)</span></span><br></pre></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure><h3 id="删除无用-dangling-的卷标"><a href="#删除无用-dangling-的卷标" class="headerlink" title="删除无用 (dangling) 的卷标"></a>删除无用 (dangling) 的卷标</h3><p>Docker 1.9 版本起：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm <span class="constructor">$(<span class="params">docker</span> <span class="params">volume</span> <span class="params">ls</span> -<span class="params">q</span> -<span class="params">f</span> <span class="params">dangling</span>=<span class="params">true</span>)</span></span><br></pre></td></tr></table></figure><p>1.9.0 中，参数 <code>dangling=false</code> 居然 <em>没</em> 用 - 它会被忽略然后列出所有的卷标。</p><h3 id="查看镜像依赖"><a href="#查看镜像依赖" class="headerlink" title="查看镜像依赖"></a>查看镜像依赖</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -viz <span class="string">| dot -Tpng -o docker.png</span></span><br></pre></td></tr></table></figure><h3 id="Docker-容器瘦身"><a href="#Docker-容器瘦身" class="headerlink" title="Docker 容器瘦身"></a>Docker 容器瘦身</h3><ul><li>在某层 (RUN layer) 清理 APT</li></ul><p>这应当和其他 apt 命令在同一层中完成。<br>否则，前面的层将会保持原有信息，而你的镜像则依旧臃肿。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN &#123;apt commands&#125; \</span><br><span class="line">  &amp;&amp; apt-get clean \  </span><br><span class="line">  &amp;&amp; rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* /</span>tmp<span class="regexp">/* /</span>var<span class="regexp">/tmp/</span>*</span><br></pre></td></tr></table></figure><ul><li><p>压缩镜像</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID=<span class="constructor">$(<span class="params">docker</span> <span class="params">run</span> -<span class="params">d</span> <span class="params">image</span>-<span class="params">name</span> <span class="operator">/</span><span class="params">bin</span><span class="operator">/</span><span class="params">bash</span>)</span></span><br><span class="line">docker export $ID <span class="pattern-match">| docker import – flat-image-name</span></span><br></pre></td></tr></table></figure></li><li><p>备份</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ID=<span class="constructor">$(<span class="params">docker</span> <span class="params">run</span> -<span class="params">d</span> <span class="params">image</span>-<span class="params">name</span> <span class="operator">/</span><span class="params">bin</span><span class="operator">/</span><span class="params">bash</span>)</span></span><br><span class="line">(docker export $ID <span class="pattern-match">| gzip -c &gt; image.tgz)</span></span><br><span class="line"><span class="pattern-match">gzip -dc image.tgz | docker import - flat-image-name</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="监视运行中容器的系统资源利用率"><a href="#监视运行中容器的系统资源利用率" class="headerlink" title="监视运行中容器的系统资源利用率"></a>监视运行中容器的系统资源利用率</h3><p>检查某个容器的 CPU、内存以及网络 I/O 使用情况，你可以：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按 ID 列出所有容器：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure><p>按名称列出所有容器：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> --<span class="params">format</span> &#x27;&#123;&#123;.Names&#125;&#125;&#x27;)</span></span><br></pre></td></tr></table></figure><p>按指定镜像名称列出所有容器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="operator">-f</span> ancestor=ubuntu</span><br></pre></td></tr></table></figure><p>删除所有未标签命名 (untagged) 的容器：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> | <span class="params">grep</span> “^” | <span class="params">awk</span> &#x27;&#123;<span class="params">split</span>($0,<span class="params">a</span>,<span class="string">&quot; &quot;</span>)</span>; print a<span class="literal">[<span class="number">3</span>]</span>&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>通过正则匹配删除指定容器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> | grep wildfly | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs docker <span class="built_in">rm</span> <span class="operator">-f</span></span><br></pre></td></tr></table></figure><p>删除所有已退出 (exited) 的容器：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> | <span class="params">grep</span> Exit | <span class="params">awk</span> &#x27;&#123; <span class="params">print</span> $1 &#125;&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="将文件挂载为卷标"><a href="#将文件挂载为卷标" class="headerlink" title="将文件挂载为卷标"></a>将文件挂载为卷标</h3><p>文件也可以被挂载为卷标。例如你可以仅仅注入单个配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从容器复制文件</span></span><br><span class="line">docker run --rm httpd cat /usr/<span class="built_in">local</span>/apache2/conf/httpd.conf &gt; httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line">vim httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载修改后的配置启动容器</span></span><br><span class="line">docker run --rm -ti -v <span class="string">&quot;<span class="variable">$PWD</span>/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro&quot;</span> -p <span class="string">&quot;80:80&quot;</span> httpd</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3dzYXJnZW50L2RvY2tlci1jaGVhdC1zaGVldA==&quot;&gt;https://github.com/wsargent/docker-cheat-sheet&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8-docker&quot;&gt;为何使用 Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83&quot;&gt;系统环境(Prerequisites)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%89%E8%A3%85&quot;&gt;安装(Installation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%B9%E5%99%A8container&quot;&gt;容器(Containers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%95%9C%E5%83%8Fimages&quot;&gt;镜像(Images)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BD%91%E7%BB%9Cnetworks&quot;&gt;网络(Networks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%93%E7%AE%A1%E4%B8%AD%E5%BF%83%E5%92%8C%E4%BB%93%E5%BA%93registry--repository&quot;&gt;仓管中心和仓库(Registry &amp;amp; Repository)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B1%82layers&quot;&gt;层(Layers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%93%BE%E6%8E%A5links&quot;&gt;链接(Links)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8D%B7%E6%A0%87volumes&quot;&gt;卷标(Volumes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9A%B4%E9%9C%B2%E7%AB%AF%E5%8F%A3exposing-ports&quot;&gt;暴露端口(Exposing Ports)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5&quot;&gt;最佳实践(Best Practices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%89%E5%85%A8security&quot;&gt;安全(security)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B0%8F%E8%B4%B4%E5%A3%AB&quot;&gt;小贴士(Tips)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%B4%A1%E7%8C%AE%E6%89%8B%E5%86%8Ccontributing&quot;&gt;贡献手册(Contributing)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="速查" scheme="http://yonghong.tech/tags/%E9%80%9F%E6%9F%A5/"/>
    
    <category term="Docker" scheme="http://yonghong.tech/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>速查</title>
    <link href="http://yonghong.tech/tips/cheat-sheet/"/>
    <id>http://yonghong.tech/tips/cheat-sheet/</id>
    <published>2021-11-24T14:24:00.000Z</published>
    <updated>2021-11-24T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><h3 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h3><ul><li>安装  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s device-name install demo.apk</span><br></pre></td></tr></table></figure></li><li>获取手机属性  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s device-name shell getprop</span><br></pre></td></tr></table></figure></li><li>获取手机model  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s device-name shell getprop | grep product</span><br></pre></td></tr></table></figure></li><li>设置代理  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy ip:port</span><br><span class="line">adb shell settings put global https_proxy ip:port</span><br></pre></td></tr></table></figure></li><li>清除代理  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy :0</span><br><span class="line">adb shell settings put global https_proxy :0</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h3 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h3><ul><li>转码  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -profile:v baseline -level 3.0 output.mp4</span><br></pre></td></tr></table></figure></li><li>视频按帧转图片  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -f image2 <span class="built_in">test</span>/%05d.jpeg</span><br></pre></td></tr></table></figure></li></ul><h3 id="ffprobe"><a href="#ffprobe" class="headerlink" title="ffprobe"></a>ffprobe</h3><ul><li>查看视频格式  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe input.mp4 -show_streams -show_format -v quiet</span><br></pre></td></tr></table></figure></li></ul><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><ul><li>生成 gradlew  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle wrapper</span><br></pre></td></tr></table></figure></li><li>gradlew 修改版本  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew wrapper --gradle-version 7.2</span><br></pre></td></tr></table></figure></li><li>gradlew 执行  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :ModuleName:taskName</span><br></pre></td></tr></table></figure></li></ul><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul><li>git 浅克隆  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branchName remote-url --single-branch</span><br></pre></td></tr></table></figure></li><li>git clone 只clone一个分支，并且还能checkout远端分支  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --filter=blob:none --no-checkout</span><br></pre></td></tr></table></figure></li><li>git 彻底删除 .gitignore 中文件  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch file.txt&#x27;</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">git filter-branch --force --index-filter <span class="string">&#x27;git rm -r --cached --ignore-unmatch file_dir&#x27;</span> --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure></li></ul><h2 id="Android-版本号"><a href="#Android-版本号" class="headerlink" title="Android 版本号"></a>Android 版本号</h2><table><thead><tr><th>名称</th><th>版本号</th><th>发行日期</th><th>API等级</th><th>安全性更新状态</th></tr></thead><tbody><tr><td>Android Jelly Bean</td><td>4.1 – 4.3.1</td><td>2012年7月9日</td><td>16 – 18</td><td>不支持</td></tr><tr><td>Android KitKat</td><td>4.4 – 4.4.4</td><td>2013年10月31日</td><td>19 – 20</td><td>不支持</td></tr><tr><td>Android Lollipop</td><td>5.0 – 5.1.1</td><td>2014年11月12日</td><td>21 – 22</td><td>不支持</td></tr><tr><td>Android Marshmallow</td><td>6.0 – 6.0.1</td><td>2015年10月5日</td><td>23</td><td>不支持</td></tr><tr><td>Android Nougat</td><td>7.0 – 7.1.2</td><td>2016年8月22日</td><td>24 – 25</td><td>不支持</td></tr><tr><td>Android Oreo</td><td>8.0 – 8.1</td><td>2017年8月21日</td><td>26 – 27</td><td>支持</td></tr><tr><td>Android Pie</td><td>9</td><td>2018年8月6日</td><td>28</td><td>支持</td></tr><tr><td>Android 10</td><td>10</td><td>2019年9月3日</td><td>29</td><td>支持</td></tr><tr><td>Android 11</td><td>11</td><td>2020年9月8日</td><td>30</td><td>支持</td></tr><tr><td>Android 12</td><td>12</td><td>2021年10月4日</td><td>31</td><td>支持</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;命令速查&quot;&gt;&lt;a href=&quot;#命令速查&quot; class=&quot;headerlink&quot; title=&quot;命令速查&quot;&gt;&lt;/a&gt;命令速查&lt;/h2&gt;&lt;h3 id=&quot;adb&quot;&gt;&lt;a href=&quot;#adb&quot; class=&quot;headerlink&quot; title=&quot;adb&quot;&gt;&lt;/a&gt;adb&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb -s device-name install demo.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;获取手机属性  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb -s device-name shell getprop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;获取手机model  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb -s device-name shell getprop | grep product&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;设置代理  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell settings put global http_proxy ip:port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell settings put global https_proxy ip:port&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;清除代理  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb shell settings put global http_proxy :0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell settings put global https_proxy :0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="速查" scheme="http://yonghong.tech/tags/%E9%80%9F%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>如果你在以下网站还找不到书的话，就还是花钱买吧</title>
    <link href="http://yonghong.tech/tips/search-book/"/>
    <id>http://yonghong.tech/tips/search-book/</id>
    <published>2021-11-23T14:24:00.000Z</published>
    <updated>2021-11-23T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>网站</th><th>链接</th></tr></thead><tbody><tr><td>Z-Library</td><td><span class="exturl" data-url="aHR0cHM6Ly8xbGliLmVkdWNhdGlvbi8=">https://1lib.education<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>LoreFree</td><td><span class="exturl" data-url="aHR0cHM6Ly9lYm9vazIubG9yZWZyZWUuY29tLw==">https://ebook2.lorefree.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>鸠摩搜索</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuaml1bW9kaWFyeS5jb20v">https://www.jiumodiary.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>熊猫搜书</td><td><span class="exturl" data-url="aHR0cHM6Ly9lYm9vay5ibGlua29sLmNvbS8=">https://ebook.blinkol.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>搬书匠 计算机类图书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5iYW5zaHVqaWFuZy5jbi8=">http://www.banshujiang.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Java知识分享网 计算机类图书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5qYXZhMTIzNC5jb20v">http://www.java1234.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>码农之家 计算机类图书</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cueHo1NzcuY29tLw==">https://www.xz577.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>布客新知 计算机类图书</td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l4aW56aGk=">https://github.com/ixinzhi<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>free-programming-books Free Ebook Foundation的免费计算机类图书</td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Vib29rRm91bmRhdGlvbi9mcmVlLXByb2dyYW1taW5nLWJvb2tz">https://github.com/EbookFoundation/free-programming-books<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>免费编程中文书籍索引</td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1c3RqYXZhYy9mcmVlLXByb2dyYW1taW5nLWJvb2tzLXpoX0NO">https://github.com/justjavac/free-programming-books-zh_CN<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>编程随想的电子书清单</td><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb2dyYW10aGluay9ib29rcw==">https://github.com/programthink/books<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>SaltTiger 最新出版的技术类英文原版书</td><td><span class="exturl" data-url="aHR0cHM6Ly9zYWx0dGlnZXIuY29tLw==">https://salttiger.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>IT图书 计算机类图书</td><td><span class="exturl" data-url="aHR0cHM6Ly9pdGJvb29rLmNvbS8=">https://itboook.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>SoBooks</td><td><span class="exturl" data-url="aHR0cHM6Ly9zb2Jvb2tzLmNjLw==">https://sobooks.cc<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Aibooks.cc</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlib29rcy5jYy8=">https://www.aibooks.cc<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>相识电子书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy54aWFuZ3NoaTEyMy5jb20v">http://www.xiangshi123.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>知识库</td><td><span class="exturl" data-url="aHR0cHM6Ly9ib29rLnpoaXNoaWtvby5jb20v">https://book.zhishikoo.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>书单网</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2h1ZGFuLnZpcC8=">https://www.shudan.vip<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>苦瓜书盘</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cua2dib29rLmNvbS8=">https://www.kgbook.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>掌上书苑</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuc29lcHViLmNvbS8=">https://www.soepub.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>知轩藏书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy56eGNzLm1lLw==">http://www.zxcs.me<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>点点文库</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cudG9ycmVudC5vcmcuY24vYmQ=">https://www.torrent.org.cn/bd<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>淘链客</td><td><span class="exturl" data-url="aHR0cDovL3d3dy50b3BsaW5rcy5jYy9z">http://www.toplinks.cc/s<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>库问搜索</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5rb292aW4uY29tLw==">http://www.koovin.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>owllook 垂直小说搜索引擎</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cub3dsb29rLmNvbS5jbi8=">https://www.owlook.com.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>中国哲学书电子化计划</td><td><span class="exturl" data-url="aHR0cHM6Ly9jdGV4dC5vcmcvemhz">https://ctext.org/zhs<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>书格</td><td><span class="exturl" data-url="aHR0cHM6Ly9uZXcuc2h1Z2Uub3JnLw==">https://new.shuge.org<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>古籍网</td><td><span class="exturl" data-url="aHR0cDovL2Jvb2tpbmxpZmUubmV0Lw==">http://bookinlife.net<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>古籍馆</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3VqaWd1YW4uY29tLw==">https://www.gujiguan.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>中国国家数字图书馆</td><td><span class="exturl" data-url="aHR0cDovL2ZpbmQubmxjLmNuLw==">http://find.nlc.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>臺灣大學圖書館</td><td><span class="exturl" data-url="aHR0cDovL250dS5wcmltby5leGxpYnJpc2dyb3VwLmNvbS8=">http://ntu.primo.exlibrisgroup.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>科学文库 科学出版社免费教程，下载需要教育网IP</td><td><span class="exturl" data-url="aHR0cHM6Ly9ib29rLnNjaWVuY2VyZWFkaW5nLmNuLw==">https://book.sciencereading.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>高教书苑 高教出版社免费教程</td><td><span class="exturl" data-url="aHR0cHM6Ly9lYm9vay5oZXAuY29tLmNuL2Vib29rcy9pbmRleC5odG1s">https://ebook.hep.com.cn/ebooks/index.html<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>晨曦科技团队数字图书馆 知网/万方/维普资源免费下载</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVhZGVyc3RlYW0uY29tLw==">https://www.readersteam.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>互助联盟 全国图书馆参考咨询联盟书籍互助查询</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVhZGVyc3RlYW0uY29tLw==">https://www.readersteam.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>全国图书馆参考咨询联盟 配合 图书互助 油猴脚本，可低价购买PDF文档</td><td><span class="exturl" data-url="aHR0cDovL3d3dy51Y2Rycy5zdXBlcmxpYi5uZXQv">http://www.ucdrs.superlib.net<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>国家中小学网络云平台 教育部提供的免费名师网课，涵盖小学初中高中</td><td><span class="exturl" data-url="aHR0cHM6Ly95a3QuZWR1eXVuLmNuLw==">https://ykt.eduyun.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>北京大学出版社 北京大学出版社第六事业部免费教程</td><td><span class="exturl" data-url="aHR0cHM6Ly9wdXA2Lnl1bnpoYW4zNjUuY29tLw==">https://pup6.yunzhan365.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>PDF之家 PDF图书下载</td><td><span class="exturl" data-url="aHR0cDovL3BkZnpqLmNuLw==">http://pdfzj.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>雅书 PDF图书下载</td><td><span class="exturl" data-url="aHR0cHM6Ly95YWJvb2sub3JnLw==">https://yabook.org<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>pdf资源网</td><td><span class="exturl" data-url="aHR0cDovL3BkZi4wMTh6eS5jb20v">http://pdf.018zy.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>书行天下 PDF图书下载，搜索功能难用</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3hwZGYuY29tLw==">https://www.sxpdf.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>爱悦读网 Kindle图书</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXlkLndhbmcv">https://www.iyd.wang<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>千秋书在</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cucXFzenouY29tLw==">https://www.qqszz.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>读书达人</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5kdXNodWRhcmVuLmNvbS8=">http://www.dushudaren.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>琳宝书屋</td><td><span class="exturl" data-url="aHR0cHM6Ly9saW5iYW9zaHV3dS5jb20v">https://linbaoshuwu.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>阅读链</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVlZHUucHJvLw==">https://www.yuedu.pro<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Aibooks.club</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlib29rcy5jbHViLw==">https://www.aibooks.club<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>偶书</td><td><span class="exturl" data-url="aHR0cHM6Ly9vYm9vay5jYy8=">https://obook.cc<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>芒果读书</td><td><span class="exturl" data-url="aHR0cDovL2RpdW14LmNvbS8=">http://diumx.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>书单</td><td><span class="exturl" data-url="aHR0cHM6Ly9lYm9va2xpc3QubW9iaS8=">https://ebooklist.mobi<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>519资源网</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTE5LmJlc3Qv">https://www.519.best<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>78书库</td><td><span class="exturl" data-url="aHR0cDovL3d3dy43OGJvb2tzLmNvbS8=">http://www.78books.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>好读</td><td><span class="exturl" data-url="aHR0cDovL2hhb2Rvby5uZXQv">http://haodoo.net<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Vol.moe Kindle漫画下载及在线观看</td><td><span class="exturl" data-url="aHR0cHM6Ly92b2wubW9lLw==">https://vol.moe<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>推书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy50dWlsaXcuY29tLw==">http://www.tuiliw.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>蓝文资源库</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmx1ZXN0ZXAuY2MvYm9va3M=">https://www.bluestep.cc/books<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>西东网</td><td><span class="exturl" data-url="aHR0cDovL3hpZG9uZy5uZXQv">http://xidong.net<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>静思书屋</td><td><span class="exturl" data-url="aHR0cHM6Ly9ib29rLnRpbnluZXdzLm9yZy8=">https://book.tinynews.org<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Kindle吧</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cua2luZGxlOC5jYy8=">https://www.kindle8.cc<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>三无书舍</td><td><span class="exturl" data-url="aHR0cHM6Ly9zd3BkZi5jb20v">https://swpdf.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>ebook22</td><td><span class="exturl" data-url="aHR0cDovL2Vib29rMjIuY29tLw==">http://ebook22.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>书行万里</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3BkZi5uZXQv">https://www.gpdf.net<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>精品下载站 PDF图书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5qOXAuY29tL2NsYXNzL3IvXzE2L18xLmh0bWw=">http://www.j9p.com/class/r\_16\_1.html<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>脚本之家 计算机类图书</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYm9va3M=">https://www.jb51.net/books<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>看医学 医学类电子书</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5rYW55aXh1ZS5jb20v">http://www.kanyixue.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>心情网 心理学图书在线观看</td><td><span class="exturl" data-url="aHR0cDovL3d3dy5peGlucWluZy5jb20v">http://www.ixinqing.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>我爱电子书</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTJkb2MuY29tLw==">https://www.52doc.com<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>精品电子书</td><td><span class="exturl" data-url="aHR0cHM6Ly9keWxhbmJhaTguZ2l0aHViLmlvL2lkZWFodWI=">https://dylanbai8.github.io/ideahub<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>可可观察</td><td><span class="exturl" data-url="aHR0cDovL2Jvb2suY29jb3Rhby5jbi8=">http://book.cocotao.cn<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>我爱书籍 下载文件以网盘文件夹形式提供</td><td><span class="exturl" data-url="aHR0cDovL3d3dy41MmJvb2subWUv">http://www.52book.me<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>七里香</td><td><span class="exturl" data-url="aHR0cDovL2x4cW5zeXMuY29tL3BkZg==">http://lxqnsys.com/pdf<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Pdfdrive</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cucGRmZHJpdmUuY29tLw==">https://www.pdfdrive.com/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>阿里云搜索</td><td><span class="exturl" data-url="aHR0cDovL2FsaXl1bnNoYXJlLmNuOjgwMDAvdC9ib29r">http://aliyunshare.cn:8000/t/book<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>个人云盘</td><td><span class="exturl" data-url="aHR0cHM6Ly9vZC5nb3RveGkuY29tL3N1bl8xdGJfZnVuL0Jvb2tzLw==">https://od.gotoxi.com/sun_1tb_fun/Books/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>66books</td><td><span class="exturl" data-url="aHR0cDovL3d3dy42NmJvb2tzLmNuLw==">http://www.66books.cn/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Zure</td><td><span class="exturl" data-url="aHR0cHM6Ly96dXJlLmZ1bi8=">https://zure.fun/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Aibook</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlib29rcy5jbHViLw==">https://www.aibooks.club/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Enjing</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuZW5qaW5nLmNvbS8=">https://www.enjing.com/<i class="fa fa-external-link-alt"></i></span></td></tr><tr><td>Ebook</td><td><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWJvb2tjbi5jb20v">https://www.ebookcn.com/<i class="fa fa-external-link-alt"></i></span></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网站&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Z-Library&lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8xbG</summary>
      
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="搜书" scheme="http://yonghong.tech/tags/%E6%90%9C%E4%B9%A6/"/>
    
    <category term="电子书" scheme="http://yonghong.tech/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Google 评分卡</title>
    <link href="http://yonghong.tech/2021/11/google-skill-level/"/>
    <id>http://yonghong.tech/2021/11/google-skill-level/</id>
    <published>2021-11-22T14:24:00.000Z</published>
    <updated>2021-11-22T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Google评分卡的来自Google的SRE。为了保证稳定可靠的服务，Google组建了一支专业的团队来负责运行后端服务，参与的工程师有一个共同的名字：Site Reliability Engineer。</p><p>对此，资深Google SRE Chris Jones等人联合撰写了《Google SRE: How Google runs production systems》，首次向外界解密了谷歌的生产环境，中文名字叫《SRE：Google运维解密》。</p><p>正是在该书中提到了上面所说的“Google评分卡”。下面来看看这11个等级到底是如何划分的：</p><span id="more"></span><h2 id="评分卡"><a href="#评分卡" class="headerlink" title="评分卡"></a>评分卡</h2><p>0：you are unfamiliar with the subject area.</p><p>0：不熟悉的领域。也就是说对相关的领域几乎一无所知。</p><p>1：you can read/understand the most fundamental aspects of the subject area.</p><p>1：可以读懂或理解相关领域的大多数基础知识。</p><p>2：ability to implement small changes,understand basic principles and able to figure out additional details with minimal help.</p><p>2：能够实现一些小的改动，理解基本原理，能够在简单的帮助下找出更多的细节。</p><p>3：basic proficiency in a subject area without relying on help.</p><p>3：基本精通相关技术领域，完全不需要别人的帮助。</p><p>4：you are comfortable with the subject area and all routine work on it.</p><p>4：对相关技术领域非常熟悉和舒适，可以应对和完成所有的日常工作。</p><p>For software areas - ability to develop medium programs using all basic language features w/o book, awareness of more esoteric features (with book).</p><p>对于软件领域，有能力开发中等规模的程序，能够熟练和掌握并使用所有的语言特性，而不需要翻书，并且能够找到所有的冷知识。</p><p>For systems areas - understanding of many fundamentals of networking and systems administration, ability to run a small network of systems including recovery, debugging and nontrivial troubleshooting that relies on the knowledge of internals.</p><p>对于系统领域，了解很多网络和系统管理的基础知识，能够运行一个小型的系统网络，包括恢复、调试和依赖于内部知识的重要故障排除。</p><p>5：an even lower degree of reliance on reference materials. Deeper skills in a field or specific technology in the subject area.</p><p>5：对参考资料的依赖程度更低。在某一领域或某一特定技术领域有较深的技能。</p><p>6：ability to develop large programs and systems from scratch. Understanding of low level details and internals. Ability to design/deploy most large, distributed systems from scratch.</p><p>6：能够从零开发大型程序和系统。掌握底层细节和内在原理。能够设计和部署大多数大型分布式系统。</p><p>7：you understand and make use of most lesser known language features, technologies, and associated internals. Ability to automate significant amounts of systems administration.</p><p>7：理解并利用高级语言特性、技术和相关的内在原理，可以从根本上实现大量系统管理和运维工作的自动化。</p><p>8：deep understanding of corner cases, esoteric features, protocols and systems including “theory of operation”. Demonstrated ability to design, deploy and own very critical or large infrastructure, build accompanying automation.</p><p>8：对于一些边角和晦涩的技术、协议和系统工作原理有深入的理解和经验。能够设计、部署并负责非常关键、规模很大的基础设施，并能够构建相应的自动化设施。</p><p>9：could have written the book about the subject area but didn’t; works with standards committees on defining new standards and methodologies.</p><p>9：能够在该技术领域出一本经典的书。并和标准委员会的人一起制定相关的技术标准和方法。</p><p>10：wrote the book on the subject area (there actually has to be a book). Recognized industry expert in the field, might have invented it.</p><p>10：在该领域写过一本书，被业内尊为专家，并是该技术的发明人。</p><h2 id="评分领域"><a href="#评分领域" class="headerlink" title="评分领域"></a>评分领域</h2><ul><li>TCP/IP Networking（网络相关）</li><li>Unix/Linux internals（linux内核）</li><li>Unix/Linux Systems administration（linux系统运维）</li><li>Algorithms and Data Structures（算法和数据结构）</li><li>C</li><li>C++</li><li>Python</li><li>Java</li><li>Perl</li><li>Go</li><li>Shell Scripting （脚本）</li><li>SQL and/or Database Admin（sql和数据库管理）</li><li>People Management（人事管理）</li><li>Project Management（项目管理）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Google评分卡的来自Google的SRE。为了保证稳定可靠的服务，Google组建了一支专业的团队来负责运行后端服务，参与的工程师有一个共同的名字：Site Reliability Engineer。&lt;/p&gt;
&lt;p&gt;对此，资深Google SRE Chris Jones等人联合撰写了《Google SRE: How Google runs production systems》，首次向外界解密了谷歌的生产环境，中文名字叫《SRE：Google运维解密》。&lt;/p&gt;
&lt;p&gt;正是在该书中提到了上面所说的“Google评分卡”。下面来看看这11个等级到底是如何划分的：&lt;/p&gt;</summary>
    
    
    
    <category term="技能" scheme="http://yonghong.tech/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Google" scheme="http://yonghong.tech/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 技巧</title>
    <link href="http://yonghong.tech/tips/android-studio/"/>
    <id>http://yonghong.tech/tips/android-studio/</id>
    <published>2021-11-18T14:24:00.000Z</published>
    <updated>2021-11-18T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Local-Changes-标签页"><a href="#Local-Changes-标签页" class="headerlink" title="Local Changes 标签页"></a>Local Changes 标签页</h3><p>打开 Preferences/Version Control/Commit ，将 Use non-modal commit interface 选项 取消勾选 即可。</p><span id="more"></span><h3 id="日期格式调整"><a href="#日期格式调整" class="headerlink" title="日期格式调整"></a>日期格式调整</h3><p>打开 Preferences/Appearacnce &amp; Behavior/System Settings/Date Formats，将日期格式设置为 yyyy/MM/dd </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Local-Changes-标签页&quot;&gt;&lt;a href=&quot;#Local-Changes-标签页&quot; class=&quot;headerlink&quot; title=&quot;Local Changes 标签页&quot;&gt;&lt;/a&gt;Local Changes 标签页&lt;/h3&gt;&lt;p&gt;打开 Preferences/Version Control/Commit ，将 Use non-modal commit interface 选项 取消勾选 即可。&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Android Studio" scheme="http://yonghong.tech/tags/Android-Studio/"/>
    
    <category term="Android" scheme="http://yonghong.tech/tags/Android/"/>
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>macOS 装机清单</title>
    <link href="http://yonghong.tech/tips/mac-install-list/"/>
    <id>http://yonghong.tech/tips/mac-install-list/</id>
    <published>2021-11-15T14:24:00.000Z</published>
    <updated>2021-11-15T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><p>搜狗输入法：<span class="exturl" data-url="aHR0cHM6Ly9waW55aW4uc29nb3UuY29tL21hYy8=">https://pinyin.sogou.com/mac/<i class="fa fa-external-link-alt"></i></span></p><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p><span class="exturl" data-url="aHR0cHM6Ly9pdGVybTIuY29tLw==">https://iterm2.com/<i class="fa fa-external-link-alt"></i></span></p><span id="more"></span><h3 id="omyzsh"><a href="#omyzsh" class="headerlink" title="omyzsh"></a>omyzsh</h3><p><span class="exturl" data-url="aHR0cHM6Ly9vaG15ei5zaC8=">https://ohmyz.sh/<i class="fa fa-external-link-alt"></i></span></p><h3 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h3><p><span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==">https://brew.sh/<i class="fa fa-external-link-alt"></i></span></p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>jenv：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install <span class="symbol">openjdk@</span><span class="number">8</span></span><br><span class="line">brew install <span class="symbol">openjdk@</span><span class="number">11</span></span><br><span class="line"></span><br><span class="line">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>nvm：</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>Edge：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9lZGdl">https://www.microsoft.com/zh-cn/edge<i class="fa fa-external-link-alt"></i></span></p><p>Chrome：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUv">https://www.google.com/chrome/<i class="fa fa-external-link-alt"></i></span></p><h3 id="聊天-办公工具"><a href="#聊天-办公工具" class="headerlink" title="聊天/办公工具"></a>聊天/办公工具</h3><p>微信：<span class="exturl" data-url="aHR0cHM6Ly93ZWl4aW4ucXEuY29tLw==">https://weixin.qq.com/<i class="fa fa-external-link-alt"></i></span></p><p>企业微信：<span class="exturl" data-url="aHR0cHM6Ly93b3JrLndlaXhpbi5xcS5jb20v">https://work.weixin.qq.com/<i class="fa fa-external-link-alt"></i></span></p><p>钉钉：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGluZ3RhbGsuY29tLw==">https://www.dingtalk.com/<i class="fa fa-external-link-alt"></i></span></p><p>飞书：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmVpc2h1LmNuLw==">https://www.feishu.cn/<i class="fa fa-external-link-alt"></i></span></p><p>腾讯会议：<span class="exturl" data-url="aHR0cHM6Ly9tZWV0aW5nLnRlbmNlbnQuY29tLw==">https://meeting.tencent.com/<i class="fa fa-external-link-alt"></i></span></p><p>office：<span class="exturl" data-url="aHR0cHM6Ly9uZXh0Lml0ZWxseW91LmNuLw==">https://next.itellyou.cn/<i class="fa fa-external-link-alt"></i></span></p><h3 id="解压工具"><a href="#解压工具" class="headerlink" title="解压工具"></a>解压工具</h3><p>keka：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VrYS5pby9lbi8=">https://www.keka.io/en/<i class="fa fa-external-link-alt"></i></span></p><p>The Unarchiver：<span class="exturl" data-url="aHR0cHM6Ly90aGV1bmFyY2hpdmVyLmNvbS8=">https://theunarchiver.com/<i class="fa fa-external-link-alt"></i></span></p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><p>腾讯柠檬：<span class="exturl" data-url="aHR0cHM6Ly9sZW1vbi5xcS5jb20v">https://lemon.qq.com/<i class="fa fa-external-link-alt"></i></span></p><p>防息屏 Sleep Control Center：App Store</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>JetBrains Toolbox：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS90b29sYm94LWFwcC8=">https://www.jetbrains.com/toolbox-app/<i class="fa fa-external-link-alt"></i></span></p><p>vscode：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">https://code.visualstudio.com/<i class="fa fa-external-link-alt"></i></span></p><p>postman：<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20v">https://www.postman.com/<i class="fa fa-external-link-alt"></i></span></p><p>SwitchHosts：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29sZGovU3dpdGNoSG9zdHMvcmVsZWFzZXM=">https://github.com/oldj/SwitchHosts/releases<i class="fa fa-external-link-alt"></i></span></p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Typora：<span class="exturl" data-url="aHR0cHM6Ly90eXBvcmEuaW8v">https://typora.io/<i class="fa fa-external-link-alt"></i></span></p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><p>drawio：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pncmFwaC9kcmF3aW8tZGVza3RvcC9yZWxlYXNlcw==">https://github.com/jgraph/drawio-desktop/releases<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;输入法&quot;&gt;&lt;a href=&quot;#输入法&quot; class=&quot;headerlink&quot; title=&quot;输入法&quot;&gt;&lt;/a&gt;输入法&lt;/h3&gt;&lt;p&gt;搜狗输入法：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9waW55aW4uc29nb3UuY29tL21hYy8=&quot;&gt;https://pinyin.sogou.com/mac/&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;iTerm2&quot;&gt;&lt;a href=&quot;#iTerm2&quot; class=&quot;headerlink&quot; title=&quot;iTerm2&quot;&gt;&lt;/a&gt;iTerm2&lt;/h3&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9pdGVybTIuY29tLw==&quot;&gt;https://iterm2.com/&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="macOS" scheme="http://yonghong.tech/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>mac 键盘延迟突然增高</title>
    <link href="http://yonghong.tech/2021/10/mac-keyboard/"/>
    <id>http://yonghong.tech/2021/10/mac-keyboard/</id>
    <published>2021-09-27T14:24:00.000Z</published>
    <updated>2021-09-27T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在系统菜单栏或者控制中心找到你的蓝牙图标。下图中最左边就是蓝牙，最右边是控制中心。点击控制中心，就能显示蓝牙。</p><p>按下 shift+option 的同时，点击蓝牙。会出现几个隐藏选项。选择“恢复连接苹果设备的出厂设置”。 </p><p><img src="https://up-img.yonghong.tech/pic/2021/11/18-20-50-%E6%88%AA%E5%B1%8F2021-09-27%20%E4%B8%8B%E5%8D%889.51.05-HaJhAi.png" alt="蓝牙设置"></p><span id="more"></span><p>再连接你的Keyboard。就好了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在系统菜单栏或者控制中心找到你的蓝牙图标。下图中最左边就是蓝牙，最右边是控制中心。点击控制中心，就能显示蓝牙。&lt;/p&gt;
&lt;p&gt;按下 shift+option 的同时，点击蓝牙。会出现几个隐藏选项。选择“恢复连接苹果设备的出厂设置”。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://up-img.yonghong.tech/pic/2021/11/18-20-50-%E6%88%AA%E5%B1%8F2021-09-27%20%E4%B8%8B%E5%8D%889.51.05-HaJhAi.png&quot; alt=&quot;蓝牙设置&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="http://yonghong.tech/categories/macOS/"/>
    
    
    <category term="macOS" scheme="http://yonghong.tech/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 技巧</title>
    <link href="http://yonghong.tech/tips/idea/"/>
    <id>http://yonghong.tech/tips/idea/</id>
    <published>2021-08-02T14:24:00.000Z</published>
    <updated>2021-08-02T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="properties-文件-Unicode-转中文"><a href="#properties-文件-Unicode-转中文" class="headerlink" title="properties 文件 Unicode 转中文"></a>properties 文件 Unicode 转中文</h2><ul><li>Preference -&gt; Editor -&gt; File Encodings -&gt; Properties Files (*.properties) </li><li>勾选上 Transparent native-to-ascii conversion</li></ul><h2 id="调整-import-多个类时不变成-import"><a href="#调整-import-多个类时不变成-import" class="headerlink" title="调整 import 多个类时不变成 import *"></a>调整 import 多个类时不变成 import *</h2><ul><li>Preference -&gt; Editor -&gt; Code Style -&gt; Java -&gt; Imports </li><li>Class count to use import with “*”</li><li>Names count to use static import with “*”</li><li>这两个数值调大到 999</li></ul><span id="more"></span><h2 id="关闭XML中SQL的黄色背景"><a href="#关闭XML中SQL的黄色背景" class="headerlink" title="关闭XML中SQL的黄色背景"></a>关闭XML中SQL的黄色背景</h2><ul><li>Preference -&gt; Editor -&gt; Inspections -&gt; SQL </li><li>取消勾选 No data sources configured 和 SQL dialect detection</li></ul><p><img src="https://up-img.yonghong.tech/pic/2021/08/03-15-20-xhH8ST-vf3mKv.jpg" alt="pic"></p><h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><ul><li>格式化整个文件，⌘ + ⌥ + L</li><li>格式化选中区域，选中指定区域后，⌘ + ⌥ + L</li></ul><h2 id="补全方法调用的返回值"><a href="#补全方法调用的返回值" class="headerlink" title="补全方法调用的返回值"></a>补全方法调用的返回值</h2><p>光标放在调用的方法名上，⌘ + ⌥ + V </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;properties-文件-Unicode-转中文&quot;&gt;&lt;a href=&quot;#properties-文件-Unicode-转中文&quot; class=&quot;headerlink&quot; title=&quot;properties 文件 Unicode 转中文&quot;&gt;&lt;/a&gt;properties 文件 Unicode 转中文&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Preference -&amp;gt; Editor -&amp;gt; File Encodings -&amp;gt; Properties Files (*.properties) &lt;/li&gt;
&lt;li&gt;勾选上 Transparent native-to-ascii conversion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;调整-import-多个类时不变成-import&quot;&gt;&lt;a href=&quot;#调整-import-多个类时不变成-import&quot; class=&quot;headerlink&quot; title=&quot;调整 import 多个类时不变成 import *&quot;&gt;&lt;/a&gt;调整 import 多个类时不变成 import *&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Preference -&amp;gt; Editor -&amp;gt; Code Style -&amp;gt; Java -&amp;gt; Imports &lt;/li&gt;
&lt;li&gt;Class count to use import with “*”&lt;/li&gt;
&lt;li&gt;Names count to use static import with “*”&lt;/li&gt;
&lt;li&gt;这两个数值调大到 999&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://yonghong.tech/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="技巧" scheme="http://yonghong.tech/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="IDEA" scheme="http://yonghong.tech/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Android 常用布局</title>
    <link href="http://yonghong.tech/2021/07/android-layout/"/>
    <id>http://yonghong.tech/2021/07/android-layout/</id>
    <published>2021-07-31T14:24:00.000Z</published>
    <updated>2021-07-31T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout 线性布局"></a>LinearLayout 线性布局</h2><p>常用属性</p><ul><li>orientation：布局总组件的排列方式 vertical、horizontal</li><li>gravity：组件所包含的组件的排列方式</li><li>layout_gravity：组件在父容器里的排列方式</li><li>background：背景</li><li>divider：分割线</li><li>showDividers：分割线所在位置：none, beginning, end, middle</li><li>dividerPadding：设置分割线的 padding</li><li>layout_weight：权重，分配剩余空间</li></ul><span id="more"></span><h2 id="RelativeLayout-相对布局"><a href="#RelativeLayout-相对布局" class="headerlink" title="RelativeLayout 相对布局"></a>RelativeLayout 相对布局</h2><p>根据父容器定位</p><ul><li>android:layout_alignParentStart</li><li>android:layout_alignParentEnd</li><li>android:layout_alignParentTop</li><li>android:layout_alignParentBottom</li><li>android:layout_centerHorizontal</li><li>android:layout_centerVertical</li><li>android:layout_centerInParent</li></ul><p>根据兄弟组件定位</p><ul><li><p>android:layout_toStartOf</p></li><li><p>android:layout_toEndOf</p></li><li><p>android:layout_above</p></li><li><p>android:layout_below</p></li><li><p>android:layout_alignStart</p></li><li><p>android:layout_alignEnd</p></li><li><p>android:layout_alignTop</p></li><li><p>android:layout_alignBottom</p><p>margin：组件与父容器的边距</p></li><li><p>android:layout_margin</p></li><li><p>android:layout_marginStart</p></li><li><p>android:layout_marginEnd</p></li><li><p>android:layout_marginTop</p></li><li><p>android:layout_marginBottom</p></li></ul><p>padding：组件内部的边距</p><ul><li>android:padding</li><li>android:paddingStart</li><li>android:paddingEnd</li><li>android:paddingTop</li><li>android:paddingBottom</li></ul><h2 id="FrameLayout-帧布局"><a href="#FrameLayout-帧布局" class="headerlink" title="FrameLayout 帧布局"></a>FrameLayout 帧布局</h2><p>常用属性：</p><ul><li>android:foreground=”@drawable/ceshi”</li><li>android:foregroundGravity=”right|bottom”</li></ul><h2 id="TableLayout-表格布局"><a href="#TableLayout-表格布局" class="headerlink" title="TableLayout 表格布局"></a>TableLayout 表格布局</h2><p>常用属性</p><ul><li>android:collapseColumns   隐藏</li><li>android:stretchColumns    拉伸</li><li>android:shrinkColumns     收缩</li></ul><p>子控件属性</p><ul><li>android:layout_column     显示在第几列</li><li>android:layout_span       横向跨几列</li></ul><h2 id="GridLayout-网格布局"><a href="#GridLayout-网格布局" class="headerlink" title="GridLayout 网格布局"></a>GridLayout 网格布局</h2><p>常用属性</p><ul><li>android:orientation </li><li>android:columnCount</li><li>android:rowCount</li></ul><p>子控件属性</p><ul><li>android:layout_gravity fill、center</li><li>android:layout_column</li><li>android:layout_columnSpan</li><li>android:layout_columnWeight</li><li>android:layout_row</li><li>android:layout_rowSpan</li><li>android:layout_rowWeight</li></ul><h2 id="ConstraintLayout-约束布局"><a href="#ConstraintLayout-约束布局" class="headerlink" title="ConstraintLayout 约束布局"></a>ConstraintLayout 约束布局</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvY29uc3RyYWludC1sYXlvdXQ/aGw9emgtY24=">https://developer.android.com/training/constraint-layout?hl=zh-cn<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;LinearLayout-线性布局&quot;&gt;&lt;a href=&quot;#LinearLayout-线性布局&quot; class=&quot;headerlink&quot; title=&quot;LinearLayout 线性布局&quot;&gt;&lt;/a&gt;LinearLayout 线性布局&lt;/h2&gt;&lt;p&gt;常用属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;orientation：布局总组件的排列方式 vertical、horizontal&lt;/li&gt;
&lt;li&gt;gravity：组件所包含的组件的排列方式&lt;/li&gt;
&lt;li&gt;layout_gravity：组件在父容器里的排列方式&lt;/li&gt;
&lt;li&gt;background：背景&lt;/li&gt;
&lt;li&gt;divider：分割线&lt;/li&gt;
&lt;li&gt;showDividers：分割线所在位置：none, beginning, end, middle&lt;/li&gt;
&lt;li&gt;dividerPadding：设置分割线的 padding&lt;/li&gt;
&lt;li&gt;layout_weight：权重，分配剩余空间&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="http://yonghong.tech/categories/Android/"/>
    
    
    <category term="Android" scheme="http://yonghong.tech/tags/Android/"/>
    
    <category term="布局" scheme="http://yonghong.tech/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="Layout" scheme="http://yonghong.tech/tags/Layout/"/>
    
    <category term="LinearLayout" scheme="http://yonghong.tech/tags/LinearLayout/"/>
    
    <category term="RelativeLayout" scheme="http://yonghong.tech/tags/RelativeLayout/"/>
    
    <category term="FrameLayout" scheme="http://yonghong.tech/tags/FrameLayout/"/>
    
    <category term="TableLayout" scheme="http://yonghong.tech/tags/TableLayout/"/>
    
    <category term="GridLayout" scheme="http://yonghong.tech/tags/GridLayout/"/>
    
    <category term="ConstraintLayout" scheme="http://yonghong.tech/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android 常用组件</title>
    <link href="http://yonghong.tech/2021/07/android-widget/"/>
    <id>http://yonghong.tech/2021/07/android-widget/</id>
    <published>2021-07-30T14:24:00.000Z</published>
    <updated>2021-07-30T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>TextView 基础属性</p><ul><li>layout_width：组件宽度</li><li>layout_height：组件高度</li><li>id：为 TextView 组件设置一个 id</li><li>text：设置显示文本的内容</li><li>textColor：设置字体颜色</li><li>textStyle：设置字体风格：三种可选值：normal, bold, italic</li><li>textSize：字体大小，单位一般是用 sp</li><li>background：控件的背景颜色，可以理解为填充整个控件颜色，可以是图片</li><li>gravity：设置控件中内容对齐方向</li></ul><span id="more"></span><p>带阴影的TextView</p><ul><li>shadowColor：设置阴影的颜色值</li><li>shadowRadius：设置阴影的模糊度</li><li>shadowDx：设置水平偏移</li><li>shadowDy：设置垂直偏移</li></ul><p>跑马灯效果TextView</p><ul><li>singleLine：设置内容单行显示</li><li>focusable：是否可以获得焦点</li><li>focusableInTouchMode：在触摸模式下是否可以获得焦点</li><li>ellipsize：在哪里省略文本</li><li>marqueeRepeatLimit：字幕动画重复次数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:id=&quot;@+id/tv_one&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:ellipsize=&quot;marquee&quot;</span><br><span class="line">    android:focusable=&quot;true&quot;</span><br><span class="line">    android:focusableInTouchMode=&quot;true&quot;</span><br><span class="line">    android:marqueeRepeatLimit=&quot;marquee_forever&quot;</span><br><span class="line">    android:singleLine=&quot;true&quot;</span><br><span class="line">    android:text=&quot;@string/tv_one&quot;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">requestFocus</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>继承 TextView</p><p>三层</p><ul><li>foreground：前景色、前景图片</li><li>text：文字内容</li><li>background：背景色、背景图片</li></ul><p>事件处理</p><ul><li>点击事件：onClickListener，抬起时触发</li><li>长按事件：onLongClickListener，按下指定时长后触发</li><li>触摸事件：onTouchListener<ul><li>按下(ACTION_DOWN, 0)</li><li>抬起(ACTION_UP, 1)</li><li>移动(ACTION_MOVE, 2)</li></ul></li></ul><h2 id="StateListDrawable"><a href="#StateListDrawable" class="headerlink" title="StateListDrawable"></a>StateListDrawable</h2><p>StateListDrawable 是 Drawable 资源的一种，可以根据不同的状态，设置不同的图片效果，关键节点 <code>&lt;selector&gt;</code>，我们只需要将 Button 的 background 属性设置为该 drawable 资源即可</p><p>常用属性</p><ul><li>drawable：引用的 Drawable 资源</li><li>state_focused：是否获得焦点</li><li>state_pressed：控件是否被按下</li><li>state_enabled：控件是否可用</li><li>state_selected：控件是够被选择，针对有滚动的情况</li><li>state_checked：控件是否被勾选</li><li>state_checkable：控件可否被勾选</li><li>state_window_focused：是否获得窗口焦点</li><li>state_active：控件是否处于活跃状态</li><li>state_single：控件包含多个子控件时，确定是否只显示一个控件</li><li>state_first：控件包含多个子控件时，确定第一个控件是否处于显示状态</li><li>state_middle：控件包含多个子控件时，确定中间一个控件是否处于显示状态</li><li>state_last：控件包含多个子控件时，确定最后一个控件是否处于显示状态</li></ul><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><p>继承 TextView</p><p>常用属性</p><ul><li>hint：输入提示</li><li>textColorHint：输入提示文字颜色</li><li>inputType：输入类型</li><li>drawableXxxx：在输入框的指定方位添加图片</li><li>drawablePadding：设置图片与文字间距</li><li>padding：设置内容与边框边距</li><li>background：背景色</li></ul><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><p>常用属性</p><ul><li>src：设置图片资源</li><li>scaleType：设置图片缩放类型</li><li>maxHeight：最大高度</li><li>maxWidth：最大宽度</li><li>adjustViewBounds：调整View的界限</li></ul><p>缩放类型</p><ul><li>fitStart：保持宽高比缩放图片，缩放完成后在 ImageView 的左上角</li><li>fitCenter：默认，保持宽高比缩放图片，缩放后放于中间</li><li>fitEnd：保持宽高比缩放图片，缩放后在 ImageView 的右下角 </li><li>fitXY：对图像的纵横方向进行独立缩放，使得图片完全适应 ImageView，但是图片宽高比可能会发生变化</li><li>center：保持原图大小，显示在 ImageView 中心，当原图大于 ImageView 的 size，会进行适当裁剪</li><li>centerCrop：保持宽高比缩放图片，直到完全覆盖 ImageView，可能会出现图片显示的不完全</li><li>centerInside：保持宽高比缩放图片，直到 ImageView 能够完全的显示图片</li><li>matrix：不改变原图大小，从 ImageView 左上角开始绘制原图，超出部分做裁剪处理</li></ul><h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>常用属性</p><ul><li>max：进度条的最大值</li><li>progress：进度条已完成进度</li><li>indeterminate：如果设置成 true，则进度条不精确显示进度</li><li>style=”?android:attr/progressBarStyleHorizontal”：水平进度条</li></ul><h2 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h2><ul><li>NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</li><li>NotificationChannel（Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O）</li><li>NotificationCompat.Builder()</li><li>Notification</li><li>PendingIntent</li></ul><p>通知重要程度设置</p><ul><li>IMPORTANCE_NONE：关闭通知</li><li>IMPORTANCE_MIN：开启通知，不会弹出，没有提示音，状态栏无显示</li><li>IMPORTANCE_LOW：开启通知，不会弹出，没有提示音，状态栏显示</li><li>IMPORTANCE_DEFAULT：开启通知，不会弹出，有提示音，状态栏显示</li><li>IMPORTANCE_HIGH：开启通知，会弹出，有提示音，状态栏显示</li></ul><p>常用属性</p><ul><li>.setContentTitle() 标题</li><li>.setContentText()  内容</li><li>.setSmallIcon()    小图片 使用 alpha 图层</li><li>.setLargeIcon()    大图片 Bitmap</li><li>.setColor()        小图标颜色 Color.parseColor(“#ff0000”)</li><li>.setContentIntent() 跳转意图 PendingIntent</li><li>.setAutoCancel()    自动清除通知</li><li>.setWhen()         通知创建时间</li></ul><h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><p>常用属性</p><ul><li>id</li><li>layout_width</li><li>layout_height=”?attr/actionBarSize”</li><li>title</li><li>titleMarginStart</li><li>titleTextColor</li><li>subtitle</li><li>subtitleTextColor</li><li>background</li><li>logo</li><li>navigationIcon</li><li>layout_height=”wrap_content”</li><li>android:layout_gravity=”center”</li></ul><h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h2><p>常用属性</p><ul><li>.setIcon()</li><li>.setTitle()</li><li>.setMessage()</li><li>.setView()     自定义布局</li><li>.setPositiveButton()</li><li>.setNegativeButton()</li><li>.setNeutralButton()</li></ul><h2 id="PopUpWindow"><a href="#PopUpWindow" class="headerlink" title="PopUpWindow"></a>PopUpWindow</h2><ul><li>contentView</li><li>width</li><li>height</li><li>focusable</li><li>showAsDropDown</li><li>dismiss</li><li>touchable</li><li>outsideTouchable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View popupView = getLayoutInflater().inflate(R.layout.popup_view, <span class="keyword">null</span>);</span><br><span class="line">PopupWindow popupWindow = <span class="keyword">new</span> PopupWindow(popupView, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, <span class="keyword">true</span>);</span><br><span class="line">popupWindow.showAsDropDown(view);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TextView&quot;&gt;&lt;a href=&quot;#TextView&quot; class=&quot;headerlink&quot; title=&quot;TextView&quot;&gt;&lt;/a&gt;TextView&lt;/h2&gt;&lt;p&gt;TextView 基础属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layout_width：组件宽度&lt;/li&gt;
&lt;li&gt;layout_height：组件高度&lt;/li&gt;
&lt;li&gt;id：为 TextView 组件设置一个 id&lt;/li&gt;
&lt;li&gt;text：设置显示文本的内容&lt;/li&gt;
&lt;li&gt;textColor：设置字体颜色&lt;/li&gt;
&lt;li&gt;textStyle：设置字体风格：三种可选值：normal, bold, italic&lt;/li&gt;
&lt;li&gt;textSize：字体大小，单位一般是用 sp&lt;/li&gt;
&lt;li&gt;background：控件的背景颜色，可以理解为填充整个控件颜色，可以是图片&lt;/li&gt;
&lt;li&gt;gravity：设置控件中内容对齐方向&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="http://yonghong.tech/categories/Android/"/>
    
    
    <category term="Android" scheme="http://yonghong.tech/tags/Android/"/>
    
    <category term="控件" scheme="http://yonghong.tech/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="Widget" scheme="http://yonghong.tech/tags/Widget/"/>
    
    <category term="TextView" scheme="http://yonghong.tech/tags/TextView/"/>
    
    <category term="Button" scheme="http://yonghong.tech/tags/Button/"/>
    
    <category term="EditText" scheme="http://yonghong.tech/tags/EditText/"/>
    
    <category term="ImageView" scheme="http://yonghong.tech/tags/ImageView/"/>
    
    <category term="ProgressBar" scheme="http://yonghong.tech/tags/ProgressBar/"/>
    
    <category term="Notification" scheme="http://yonghong.tech/tags/Notification/"/>
    
    <category term="Toolbar" scheme="http://yonghong.tech/tags/Toolbar/"/>
    
    <category term="AlertDialog" scheme="http://yonghong.tech/tags/AlertDialog/"/>
    
    <category term="PopUpWindow" scheme="http://yonghong.tech/tags/PopUpWindow/"/>
    
  </entry>
  
  <entry>
    <title>Android Runtime (ART) 和 Dalvik</title>
    <link href="http://yonghong.tech/2021/07/android-runtime-dalvik/"/>
    <id>http://yonghong.tech/2021/07/android-runtime-dalvik/</id>
    <published>2021-07-29T12:00:00.000Z</published>
    <updated>2021-07-29T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Runtime (ART) 是 Android 上的应用和部分系统服务使用的托管式运行时。ART 及其前身 Dalvik 最初是专为 Android 项目打造的。作为运行时的 ART 可执行 Dalvik 可执行文件并遵循 Dex 字节码规范。</p><p>ART 和 Dalvik 是运行 Dex 字节码的兼容运行时，因此针对 Dalvik 开发的应用也能在 ART 环境中运作。不过，Dalvik 采用的一些技术并不适用于 ART。有关最重要问题的信息，请参阅<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS9wcmFjdGljZXMvdmVyaWZ5aW5nLWFwcHMtYXJ0Lmh0bWw/aGw9emgtY24=">在 Android Runtime (ART) 上验证应用行为<i class="fa fa-external-link-alt"></i></span>。</p><span id="more"></span><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL2RhbHZpaz9obD16aC1jbg==">https://source.android.com/devices/tech/dalvik?hl=zh-cn<i class="fa fa-external-link-alt"></i></span></p><h2 id="ART-功能"><a href="#ART-功能" class="headerlink" title="ART 功能"></a>ART 功能</h2><p>以下是 ART 实现的一些主要功能。</p><h3 id="预先-AOT-编译"><a href="#预先-AOT-编译" class="headerlink" title="预先 (AOT) 编译"></a>预先 (AOT) 编译</h3><p>ART 引入了预先编译机制，可提高应用的性能。ART 还具有比 Dalvik 更严格的安装时验证。</p><p>在安装时，ART 使用设备自带的 <strong>dex2oat</strong> 工具来编译应用。此实用工具接受 <span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL2RhbHZpay9kZXgtZm9ybWF0P2hsPXpoLWNu">DEX<i class="fa fa-external-link-alt"></i></span> 文件作为输入，并为目标设备生成经过编译的应用可执行文件。该工具应能够顺利编译所有有效的 DEX 文件。但是，一些后处理工具会生成无效文件，Dalvik 可以接受这些文件，但 ART 无法编译这些文件。如需了解详情，请参阅<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS9wcmFjdGljZXMvdmVyaWZ5aW5nLWFwcHMtYXJ0Lmh0bWw/aGw9emgtY24jR0NfTWlncmF0aW9u">处理垃圾回收问题<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="垃圾回收方面的优化"><a href="#垃圾回收方面的优化" class="headerlink" title="垃圾回收方面的优化"></a>垃圾回收方面的优化</h3><p>垃圾回收 (GC) 会耗费大量资源，这可能有损于应用性能，导致显示不稳定、界面响应速度缓慢以及其他问题。ART 通过以下几种方式对垃圾回收做了优化：</p><ul><li>大多采用并发设计，具有一次 GC 暂停</li><li>并发复制，可减少后台内存使用和碎片</li><li>GC 暂停的时间不受堆大小影响</li><li>在清理最近分配的短时对象这种特殊情况中，回收器的总 GC 时间更短</li><li>优化了垃圾回收的工效，能够更加及时地进行并行垃圾回收，这使得 <a href="http://developer.android.com/tools/debugging/debugging-memory.html?hl=zh-cn#LogMessages"><code>GC_FOR_ALLOC</code></a> 事件在典型用例中极为罕见</li></ul><h3 id="开发和调试方面的优化"><a href="#开发和调试方面的优化" class="headerlink" title="开发和调试方面的优化"></a>开发和调试方面的优化</h3><p>ART 提供了大量功能来优化应用开发和调试。</p><h4 id="支持采样分析器"><a href="#支持采样分析器" class="headerlink" title="支持采样分析器"></a>支持采样分析器</h4><p>一直以来，开发者都使用 <span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS90b29scy9oZWxwL3RyYWNldmlldy5odG1sP2hsPXpoLWNu">Traceview<i class="fa fa-external-link-alt"></i></span> 工具（用于跟踪应用执行情况）作为分析器。虽然 Traceview 可提供有用的信息，但每次方法调用产生的开销会导致 Dalvik 分析结果出现偏差，而且使用该工具明显会影响运行时性能。</p><p>ART 添加了对没有这些限制的专用采样分析器的支持，因而可更准确地了解应用执行情况，而不会明显减慢速度。KitKat 版本为 Dalvik 的 Traceview 添加了采样支持。</p><h4 id="支持更多调试功能"><a href="#支持更多调试功能" class="headerlink" title="支持更多调试功能"></a>支持更多调试功能</h4><p>ART 支持许多新的调试选项，特别是与监控和垃圾回收相关的功能。例如，您可以：</p><ul><li>查看堆栈跟踪中保留了哪些锁，然后跳转到持有锁的线程。</li><li>询问指定类的当前活动的实例数、请求查看实例，以及查看使对象保持有效状态的参考。</li><li>过滤特定实例的事件（如断点）。</li><li>查看方法退出（使用“method-exit”事件）时返回的值。</li><li>设置字段观察点，以在访问和/或修改特定字段时暂停程序执行。</li></ul><h4 id="优化了异常和崩溃报告中的诊断详细信息"><a href="#优化了异常和崩溃报告中的诊断详细信息" class="headerlink" title="优化了异常和崩溃报告中的诊断详细信息"></a>优化了异常和崩溃报告中的诊断详细信息</h4><p>当发生运行时异常时，ART 会为您提供尽可能多的上下文和详细信息。ART 会提供 <code>java.lang.ClassCastException</code>、<code>java.lang.ClassNotFoundException</code> 和 <code>java.lang.NullPointerException</code> 的更多异常详细信息。（较高版本的 Dalvik 会提供 <code>java.lang.ArrayIndexOutOfBoundsException</code> 和 <code>java.lang.ArrayStoreException</code> 的更多异常详细信息，这些信息现在包括数组大小和越界偏移量；ART 也提供这类信息。）</p><p>例如，<code>java.lang.NullPointerException</code> 现在会显示有关应用尝试处理 null 指针时所执行操作的信息，例如应用尝试写入的字段或尝试调用的方法。一些典型示例如下：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException: Attempt <span class="keyword">to</span> <span class="keyword">write</span> <span class="keyword">to</span> field <span class="string">&#x27;int</span></span><br><span class="line"><span class="string">android.accessibilityservice.AccessibilityServiceInfo.flags&#x27;</span> <span class="keyword">on</span> a null object</span><br><span class="line"><span class="keyword">reference</span></span><br><span class="line">java.lang.NullPointerException: Attempt <span class="keyword">to</span> invoke <span class="keyword">virtual</span> <span class="function"><span class="keyword">method</span></span></span><br><span class="line"><span class="function">&#x27;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span>.<span class="title">toString</span><span class="params">()</span>&#x27; <span class="title">on</span> <span class="title">a</span> <span class="title">null</span> <span class="title">object</span> <span class="title">reference</span></span></span><br></pre></td></tr></table></figure><p>ART 还通过纳入 Java 和原生堆栈信息，在应用原生代码崩溃报告中提供更实用的上下文信息。</p><h2 id="Android-8-0-中的-ART-功能改进"><a href="#Android-8-0-中的-ART-功能改进" class="headerlink" title="Android 8.0 中的 ART 功能改进"></a>Android 8.0 中的 ART 功能改进</h2><p>在 Android 8.0 版本中，Android Runtime (ART) 有了极大改进。下面的列表总结了设备制造商可以在 ART 中获得的增强功能。</p><h3 id="并发压缩式垃圾回收器"><a href="#并发压缩式垃圾回收器" class="headerlink" title="并发压缩式垃圾回收器"></a>并发压缩式垃圾回收器</h3><p>正如 Google 在 Google I/O 大会上所宣布的那样，ART 在 Android 8.0 中提供了新的并发压缩式垃圾回收器 (GC)。该回收器会在每次执行 GC 时以及应用正在运行时对堆进行压缩，且仅在处理线程根时短暂停顿一次。该回收器具有以下优势：</p><ul><li>GC 始终会对堆进行压缩：堆的大小平均比 Android 7.0 中的小 32%。</li><li>得益于压缩，系统现可实现线程局部碰撞指针对象分配：分配速度比 Android 7.0 中的快 70%。</li><li>H2 基准的停顿次数比 Android 7.0 GC 的少 85%。</li><li>停顿次数不再随堆的大小而变化，应用在使用较大的堆时也无需担心造成卡顿。</li><li>GC 实现细节 - 读取屏障：<ul><li>读取屏障是在读取每个对象字段时所做的少量工作。</li><li>它们在编译器中经过了优化，但可能会减慢某些用例的速度。</li></ul></li></ul><h3 id="循环优化"><a href="#循环优化" class="headerlink" title="循环优化"></a>循环优化</h3><p>在 Android 8.0 版本中，ART 采取了多种循环优化措施，具体如下：</p><ul><li>消除边界检查<ul><li>静态：在编译时证明范围位于边界内</li><li>动态：运行时测试确保循环始终位于边界内（否则不进行优化）</li></ul></li><li>消除归纳变量<ul><li>移除无用归纳</li><li>用封闭式表达式替换仅在循环后使用的归纳</li></ul></li><li>消除循环主体内的无用代码，移除整个死循环</li><li>强度降低</li><li>循环转换：逆转、交换、拆分、展开、单模等</li><li>SIMDization（也称为矢量化）</li></ul><p>循环优化器位于 ART 编译器中一个独立的优化环节中。大多数循环优化与其他方面的优化和简化类似。采用比平时更复杂的方式进行一些重写 CFG 的优化时会面临挑战，因为大多数 CFG 实用工具（请参阅 nodes.h）都侧重于构建而不是重写 CFG。</p><h3 id="类层次结构分析"><a href="#类层次结构分析" class="headerlink" title="类层次结构分析"></a>类层次结构分析</h3><p>在 Android 8.0 中，ART 会使用类层次结构分析 (CHA)，这是一种编译器优化，可根据对类层次结构的分析结果，将虚拟调用去虚拟化为直接调用。虚拟调用代价高昂，因为它们围绕 vtable 查找来实现，且会占用几个依赖负载。另外，虚拟调用也不能内嵌。</p><p>以下是对相关增强功能的总结：</p><ul><li>动态单一实现方法状态更新 - 在类关联时间结束时，如果 vtable 已被填充，ART 会按条目对超类的 vtable 进行比较。</li><li>编译器优化 - 编译器会利用某种方法的单一实现信息。如果方法 A.foo 设置了单一实现标记，则编译器会将虚拟调用去虚拟化为直接调用，并借此进一步尝试内嵌直接调用。</li><li>已编译代码无效 - 另外，在类关联时间结束时，如果单一实现信息已更新，且方法 A.foo 之前拥有单一实现，但该状态现已变为无效，则依赖方法 A.foo 拥有单一实现这一假设的所有已编译代码都需要变为无效代码。</li><li>去优化 - 对于堆栈上已编译的有效代码，系统会启动去优化功能，以强制使已编译无效代码进入解释器模式，从而确保正确性。系统会采用结合了同步和异步去优化的全新去优化机制。</li></ul><h3 id="oat-文件中的内嵌缓存"><a href="#oat-文件中的内嵌缓存" class="headerlink" title=".oat 文件中的内嵌缓存"></a>.oat 文件中的内嵌缓存</h3><p>ART 现在采用内嵌缓存，并对有足够数据可用的调用站点进行优化。内嵌缓存功能会将额外的运行时信息记录到配置文件中，并利用这类信息将动态优化添加到预先编译中。</p><h3 id="Dexlayout"><a href="#Dexlayout" class="headerlink" title="Dexlayout"></a>Dexlayout</h3><p>Dexlayout 是在 Android 8.0 中引入的一个库，用于分析 dex 文件，并根据配置文件对其进行重新排序。Dexlayout 旨在使用运行时配置信息，在设备的空闲维护编译期间对 dex 文件的各个部分进行重新排序。通过将经常一起访问的部分 dex 文件集中在一起，程序可以因改进文件位置而拥有更好的内存访问模式，从而节省 RAM 并缩短启动时间。</p><p>由于配置文件信息目前仅在运行应用后可用，因此系统会在空闲维护期间将 dexlayout 集成到 dex2oat 的设备编译中。</p><h3 id="Dex-缓存移除"><a href="#Dex-缓存移除" class="headerlink" title="Dex 缓存移除"></a>Dex 缓存移除</h3><p>在 Android 7.0 及更低版本中，DexCache 对象拥有四个大型数组，与 DexFile 中特定元素的数量成正比，即：</p><ul><li>字符串（每个 DexFile::StringId 一个引用），</li><li>类型（每个 DexFile::TypeId 一个引用），</li><li>方法（每个 DexFile::MethodId 一个原生指针），</li><li>字段（每个 DexFile::FieldId 一个原生指针）。</li></ul><p>这些数组用于快速检索我们以前解析的对象。在 Android 8.0 中，除方法数组外，所有数组都已移除。</p><h3 id="解释器性能"><a href="#解释器性能" class="headerlink" title="解释器性能"></a>解释器性能</h3><p>在 Android 7.0 版本中，通过引入 mterp（一种解释器，具有以汇编语言编写的核心提取/解码/解释机制），解释器性能得以显著提升。Mterp 模仿了快速 Dalvik 解释器，并支持 arm、arm64、x86、x86_64、mips 和 mips64。对于计算代码而言，ART 的 Mterp 大致相当于 Dalvik 的快速解释器。不过，有时候，它的速度可能会显著变慢，甚至急剧变慢：</p><ol><li>调用性能。</li><li>字符串操作和 Dalvik 中其他被视为内嵌函数的高频用户方法。</li><li>堆栈内存使用量较高。</li></ol><p>Android 8.0 解决了这些问题。</p><h3 id="详细了解内嵌"><a href="#详细了解内嵌" class="headerlink" title="详细了解内嵌"></a>详细了解内嵌</h3><p>从 Android 6.0 开始，ART 可以内嵌同一个 dex 文件中的任何调用，但只能内嵌来自其他 dex 文件的叶方法。此项限制具有以下两个原因：</p><ol><li>从其他 dex 文件进行内嵌要求使用该 dex 文件的 dex 缓存，这与同一个 dex 文件内嵌（只需重复使用调用方的 dex 缓存）有所不同。已编译代码中需要具有 dex 缓存，以便执行一系列指令，例如静态调用、字符串加载或类加载。</li><li>堆栈映射只对当前 dex 文件中的方法索引进行编码。</li></ol><p>为了应对这些限制，Android 8.0 做出了以下改进：</p><ol><li>从已编译代码中移除 dex 缓存访问（另请参阅“Dex 缓存移除”部分）</li><li>扩展堆栈映射编码。</li></ol><h3 id="同步方面的改进"><a href="#同步方面的改进" class="headerlink" title="同步方面的改进"></a>同步方面的改进</h3><p>ART 团队调整了 MonitorEnter/MonitorExit 代码路径，并减少了我们对 ARMv8 上传统内存屏障的依赖，尽可能将其替换为较新的（获取/释放）指令。</p><h3 id="更快速的原生方法"><a href="#更快速的原生方法" class="headerlink" title="更快速的原生方法"></a>更快速的原生方法</h3><p>使用 <a href="https://android.googlesource.com/platform/libcore/+/master/dalvik/src/main/java/dalvik/annotation/optimization/FastNative.java"><code>@FastNative</code></a> 和 <a href="https://android.googlesource.com/platform/libcore/+/master/dalvik/src/main/java/dalvik/annotation/optimization/CriticalNative.java"><code>@CriticalNative</code></a> 注解可以更快速地对 Java 原生接口 (JNI) 进行原生调用。这些内置的 ART 运行时优化可以加快 JNI 转换速度，并取代了现已弃用的 !bang JNI 标记。这些注解对非原生方法没有任何影响，并且仅适用于 <code>bootclasspath</code> 上的平台 Java 语言代码（无 Play 商店更新）。</p><p><code>@FastNative</code> 注解支持非静态方法。如果某种方法将 <code>jobject</code> 作为参数或返回值进行访问，请使用此注解。</p><p>利用 <code>@CriticalNative</code> 注解，可更快速地运行原生方法，但存在以下限制：</p><ul><li>方法必须是静态方法 - 没有参数、返回值或隐式 <code>this</code> 的对象。</li><li>仅将基元类型传递给原生方法。</li><li>原生方法在其函数定义中不使用 <code>JNIEnv</code> 和 <code>jclass</code> 参数。</li><li>方法必须使用 <code>RegisterNatives</code> 进行注册，而不是依靠动态 JNI 链接。</li></ul><p><code>@FastNative</code> 和 <code>@CriticalNative</code> 注解在执行原生方法时会停用垃圾回收。不要与长时间运行的方法一起使用，包括通常很快但一般不受限制的方法。</p><p>停顿垃圾回收可能会导致死锁。如果锁尚未得到本地释放（即尚未返回受管理代码），请勿在原生快速调用期间获取锁。此要求不适用于常规的 JNI 调用，因为 ART 将正执行的原生代码视为已暂停的状态。</p><p><code>@FastNative</code> 可以使原生方法的性能提升高达 3 倍，而 <code>@CriticalNative</code> 可以使原生方法的性能提升高达 5 倍。例如，在 Nexus 6P 设备上测量的 JNI 转换如下：</p><table><thead><tr><th align="left">Java 原生接口 (JNI) 调用</th><th align="left">执行时间（以纳秒计）</th></tr></thead><tbody><tr><td align="left">常规 JNI</td><td align="left">115</td></tr><tr><td align="left">!bang JNI</td><td align="left">60</td></tr><tr><td align="left"><code>@FastNative</code></td><td align="left">35</td></tr><tr><td align="left"><code>@CriticalNative</code></td><td align="left">25</td></tr></tbody></table><h2 id="调试-ART-垃圾回收"><a href="#调试-ART-垃圾回收" class="headerlink" title="调试 ART 垃圾回收"></a>调试 ART 垃圾回收</h2><p>本页介绍了如何调试 Android 运行时 (ART) 垃圾回收 (GC) 的正确性和性能问题。此外，还说明了如何使用 GC 验证选项、确定应对 GC 验证失败的解决方案，以及衡量并解决 GC 性能问题。</p><p>如需使用 ART，请参阅此 <span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL2RhbHZpaz9obD16aC1jbg==">ART 和 Dalvik<i class="fa fa-external-link-alt"></i></span> 部分中介绍的内容，以及 <span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL2RhbHZpay9kZXgtZm9ybWF0P2hsPXpoLWNu">Dalvik 可执行文件格式<i class="fa fa-external-link-alt"></i></span>。如需获得验证应用行为方面的其他帮助，请参阅<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS9wcmFjdGljZXMvdmVyaWZ5aW5nLWFwcHMtYXJ0P2hsPXpoLWNu">在 Android Runtime (ART) 上验证应用行为<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="ART-GC-概览"><a href="#ART-GC-概览" class="headerlink" title="ART GC 概览"></a>ART GC 概览</h3><p>ART 有多个不同的 GC 方案，涉及运行不同的垃圾回收器。从 Android 8 (Oreo) 开始，默认方案是并发复制 (CC)。另一个 GC 方案是并发标记清除 (CMS)。</p><p>并发复制 GC 的一些主要特性包括：</p><ul><li>CC 支持使用名为“RegionTLAB”的触碰指针分配器。此分配器可以向每个应用线程分配一个线程本地分配缓冲区 (TLAB)，这样，应用线程只需触碰“栈顶”指针，而无需任何同步操作，即可从其 TLAB 中将对象分配出去。</li><li>CC 通过在不暂停应用线程的情况下并发复制对象来执行堆碎片整理。这是在读取屏障的帮助下实现的，读取屏障会拦截来自堆的引用读取，无需应用开发者进行任何干预。</li><li>GC 只有一次很短的暂停，对于堆大小而言，该次暂停在时间上是一个常量。</li><li>在 Android 10 及更高版本中，CC 会扩展为分代 GC。它支持轻松回收存留期较短的对象，这类对象通常很快便会无法访问。这有助于提高 GC 吞吐量，并显著延迟执行全堆 GC 的需要。</li></ul><p>ART 仍然支持的另一个 GC 方案是 CMS。此 GC 方案还支持压缩，但不是以并发方式。在应用进入后台之前，它会避免执行压缩，应用进入后台后，它会暂停应用线程以执行压缩。如果对象分配因碎片而失败，也必须执行压缩操作。在这种情况下，应用可能会在一段时间内没有响应。</p><p>由于 CMS 很少进行压缩，因此空闲对象可能会不连续。CMS 使用一个名为 RosAlloc 的基于空闲列表的分配器。与 RegionTLAB 相比，该分配器的分配成本较高。最后，由于内部碎片，Java 堆的 CMS 内存用量可能会高于 CC 内存用量。</p><h3 id="GC-验证和性能选项"><a href="#GC-验证和性能选项" class="headerlink" title="GC 验证和性能选项"></a>GC 验证和性能选项</h3><h4 id="更改-GC-类型"><a href="#更改-GC-类型" class="headerlink" title="更改 GC 类型"></a>更改 GC 类型</h4><p>原始设备制造商 (OEM) 可以更改 GC 类型。如需进行更改，需要在构建时设置 <code>ART_USE_READ_BARRIER</code> 环境变量。默认值为 true，这会启用 CC 回收器，因为该回收器使用读取屏障。对于 CMS，此变量应明确设置为 false。</p><p>默认情况下，在 Android 10 及更高版本中，CC 回收器在分代模式下运行。如需停用分代模式，可以使用 <code>-Xgc:nogenerational_cc</code> 命令行参数。或者，也可以按如下方式设置系统属性：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">adb</span> shell setprop dalvik.vm.gc<span class="keyword">type</span> nogenerational_cc</span><br></pre></td></tr></table></figure><p>CMS 回收器始终在分代模式下运行。</p><h4 id="验证堆"><a href="#验证堆" class="headerlink" title="验证堆"></a>验证堆</h4><p>堆验证可能是调试 GC 相关错误或堆损坏的最有用的 GC 选项。启用堆验证会使 GC 在垃圾回收过程中在几个点检查堆的正确性。堆验证的选项与更改 GC 类型的相同。启用后，堆验证流程会验证根，并确保可访问对象仅引用了其他可访问对象。您可以通过传入以下 <code>-Xgc</code> 值来启用 GC 验证：</p><ul><li>启用后，<code>[no]preverify</code> 将在启动 GC 之前执行堆验证。</li><li>启用后，<code>[no]presweepingverify</code> 将在开始垃圾回收器清除过程之前执行堆验证。</li><li>启用后，<code>[no]postverify</code> 将在 GC 完成清除之后执行堆验证。</li><li><code>[no]preverify_rosalloc</code>、<code>[no]postsweepingverify_rosalloc</code> 和 <code>[no]postverify_rosalloc</code> 是附加 GC 选项，仅验证 RosAlloc 内部记录的状态。因此，它们仅适用于使用 RosAlloc 分配器的 CMS 回收器。验证的主要内容是，魔法值是否与预期常量匹配，以及可用内存块是否已全部在 <code>free_page_runs_</code> 映射中注册。</li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>衡量 GC 性能的工具主要有两个：GC 时序转储和 Systrace。Systrace 还有一个高级版本，称为 Perfetto。如需衡量 GC 性能问题，直观的方法是使用 Systrace 和 Perfetto 确定哪些 GC 会导致长时间暂停或抢占应用线程。尽管 ART GC 经过多年发展已得到显著改进，但不良更改器行为（例如过度分配）仍会导致性能问题</p><h4 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h4><p>CC GC 通过运行新生代 GC 或全堆 GC 来回收垃圾。理想情况下，新生代 GC 的运行频率更高。GC 会一直执行新生代 CC 回收，直到刚结束的回收周期的吞吐量（计算公式是：释放的字节数除以 GC 持续秒数）小于全堆 CC 回收的平均吞吐量。发生这种情况时，将为下一次并发 GC 选择全堆 CC（而不是新生代 CC）。全堆回收完成后，下一次 GC 将切换回新生代 CC。新生代 CC 在完成后不会调整堆占用空间限制，这是此策略发挥作用的一个关键因素。这使得新生代 CC 运行得越来越频繁，直到吞吐量低于全堆 CC，最终导致堆增大。</p><h4 id="使用-SIGQUIT-获取-GC-性能信息"><a href="#使用-SIGQUIT-获取-GC-性能信息" class="headerlink" title="使用 SIGQUIT 获取 GC 性能信息"></a>使用 SIGQUIT 获取 GC 性能信息</h4><p>如需获得应用的 GC 性能时序，请将 <code>SIGQUIT</code> 发送到已在运行的应用，或者在启动命令行程序时将 <code>-XX:DumpGCPerformanceOnShutdown</code> 传递给 <code>dalvikvm</code>。当应用获得 ANR 请求信号 (<code>SIGQUIT</code>) 时，会转储与其锁定、线程堆栈和 GC 性能相关的信息。</p><p>如需获得 GC 时序转储，请使用以下命令：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell <span class="keyword">kill</span> -<span class="keyword">S</span> <span class="keyword">QUIT</span> PID</span><br></pre></td></tr></table></figure><p>这会在 <code>/data/anr/</code> 中创建一个文件（名称中会包含日期和时间，例如 anr_2020-07-13-19-23-39-817）。此文件包含一些 ANR 转储信息以及 GC 时序。您可以通过搜索“Dumping cumulative Gc timings”（转储累计 GC 时序）来确定 GC 时序。这些时序会显示一些需要关注的内容，包括每个 GC 类型的阶段和暂停时间的直方图信息。暂停信息通常比较重要。例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">young</span> concurrent copying paused:Sum: <span class="number">5</span>.<span class="number">491</span>ms <span class="number">99</span>% C.I. <span class="number">1</span>.<span class="number">464</span>ms-<span class="number">2</span>.<span class="number">133</span>ms Avg: <span class="number">1</span>.<span class="number">830</span>ms Max: <span class="number">2</span>.<span class="number">133</span>ms</span><br></pre></td></tr></table></figure><p>本示例中显示平均暂停时间为 1.83 毫秒，该值应该足够低，在大多数应用中不会导致丢帧，因此您不必担心。</p><p>需要关注的另一个方面是挂起时间，挂起时间测量在 GC 要求某个线程挂起后，该线程到达挂起点所需的时间。此时间包含在 GC 暂停时间中，所以对于确定长时间暂停是由 GC 缓慢还是线程挂起缓慢造成的很有用。以下是 Nexus 5 上的正常挂起时间示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">suspend</span> <span class="literal">all</span> histogram:Sum: <span class="number">1</span>.<span class="number">513</span>ms <span class="number">99</span>% C.I. <span class="number">3</span>us-<span class="number">546</span>.<span class="number">560</span>us Avg: <span class="number">47</span>.<span class="number">281</span>us Max: <span class="number">601</span>us</span><br></pre></td></tr></table></figure><p>还有其他一些需要关注的方面，包括总耗时和 GC 吞吐量。示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Total</span> time spent in GC: <span class="number">502</span>.<span class="number">251</span>ms</span><br><span class="line"><span class="attribute">Mean</span> GC size throughput: <span class="number">92</span>MB/s</span><br><span class="line"><span class="attribute">Mean</span> GC object throughput: <span class="number">1</span>.<span class="number">54702</span>e+<span class="number">06</span> objects/s</span><br></pre></td></tr></table></figure><p>以下示例说明了如何转储已在运行的应用的 GC 时序：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">adb</span> shell kill -s QUIT PID</span><br><span class="line"><span class="attribute">adb</span> pull /data/anr/anr_<span class="number">2020</span>-<span class="number">07</span>-<span class="number">13</span>-<span class="number">19</span>-<span class="number">23</span>-<span class="number">39</span>-<span class="number">817</span></span><br></pre></td></tr></table></figure><p>此时，GC 时序在 <code>anr_2020-07-13-19-23-39-817</code> 中。以下是 Google 地图的输出示例：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Start</span> <span class="variable">Dumping</span> <span class="variable">histograms</span> <span class="variable">for</span> <span class="number">2195</span> <span class="variable">iterations</span> <span class="variable">for</span> <span class="variable">concurrent</span> <span class="variable">copying</span></span><br><span class="line"><span class="variable">MarkingPhase</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">258.127</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">58.854</span><span class="variable">ms</span><span class="operator">-</span><span class="number">352.575</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">117.651</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">641.940</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ScanCardsForSpace</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">85.966</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">15.121</span><span class="variable">ms</span><span class="operator">-</span><span class="number">112.080</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">39.164</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">662.555</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ScanImmuneSpaces</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">79.066</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">7.614</span><span class="variable">ms</span><span class="operator">-</span><span class="number">57.658</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">18.014</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">546.276</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ProcessMarkStack</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">49.308</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">6.439</span><span class="variable">ms</span><span class="operator">-</span><span class="number">81.640</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">22.464</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">638.448</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ClearFromSpace</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">35.068</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">6.522</span><span class="variable">ms</span><span class="operator">-</span><span class="number">40.040</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">15.976</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">633.665</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">SweepSystemWeaks</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">14.209</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">3.224</span><span class="variable">ms</span><span class="operator">-</span><span class="number">15.210</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">6.473</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">201.738</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">CaptureThreadRootsForMarking</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">11.067</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.835</span><span class="variable">ms</span><span class="operator">-</span><span class="number">13.902</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">5.044</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">25.565</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">VisitConcurrentRoots</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">8.588</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1.260</span><span class="variable">ms</span><span class="operator">-</span><span class="number">8.547</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.956</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">231.593</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ProcessReferences</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">7.868</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.002</span><span class="variable">ms</span><span class="operator">-</span><span class="number">8.336</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.792</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">17.376</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">EnqueueFinalizerReferences</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.976</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.691</span><span class="variable">ms</span><span class="operator">-</span><span class="number">8.005</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.811</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">16.540</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">GrayAllDirtyImmuneObjects</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.721</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.622</span><span class="variable">ms</span><span class="operator">-</span><span class="number">6.702</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.695</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">14.893</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">SweepLargeObjects</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.202</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.032</span><span class="variable">ms</span><span class="operator">-</span><span class="number">6.388</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.458</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">549.851</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">FlipOtherThreads</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">2.265</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.487</span><span class="variable">ms</span><span class="operator">-</span><span class="number">3.702</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.031</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">6.327</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">VisitNonThreadRoots</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">1.883</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">45</span><span class="variable">us</span><span class="operator">-</span><span class="number">3207.333</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">429.210</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">27524</span><span class="variable">us</span></span><br><span class="line"><span class="variable">InitializePhase</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">1.624</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">231.171</span><span class="variable">us</span><span class="operator">-</span><span class="number">2751.250</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">740.220</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">6961</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ForwardSoftReferences</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">1.071</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">215.113</span><span class="variable">us</span><span class="operator">-</span><span class="number">2175.625</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">488.362</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">7441</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ReclaimPhase</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">490.854</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">32.029</span><span class="variable">us</span><span class="operator">-</span><span class="number">6373.807</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">223.623</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">362851</span><span class="variable">us</span></span><br><span class="line"><span class="variable">EmptyRBMarkBitStack</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">479.736</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">11</span><span class="variable">us</span><span class="operator">-</span><span class="number">3202.500</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">218.558</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">13652</span><span class="variable">us</span></span><br><span class="line"><span class="variable">CopyingPhase</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">399.163</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">24</span><span class="variable">us</span><span class="operator">-</span><span class="number">4602.500</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">181.851</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">22865</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ThreadListFlip</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">295.609</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">15</span><span class="variable">us</span><span class="operator">-</span><span class="number">2134.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">134.673</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">13578</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ResumeRunnableThreads</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">238.329</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">5</span><span class="variable">us</span><span class="operator">-</span><span class="number">2351.250</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">108.578</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">10539</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ResumeOtherThreads</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">207.915</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1.072</span><span class="variable">us</span><span class="operator">-</span><span class="number">3602.499</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">94.722</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">14179</span><span class="variable">us</span></span><br><span class="line"><span class="variable">RecordFree</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">188.009</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">64</span><span class="variable">us</span><span class="operator">-</span><span class="number">312.812</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">85.653</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">2709</span><span class="variable">us</span></span><br><span class="line"><span class="variable">MarkZygoteLargeObjects</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">133.301</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">12</span><span class="variable">us</span><span class="operator">-</span><span class="number">734.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">60.729</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">10169</span><span class="variable">us</span></span><br><span class="line"><span class="variable">MarkStackAsLive</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">127.554</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">13</span><span class="variable">us</span><span class="operator">-</span><span class="number">417.083</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">58.111</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">1728</span><span class="variable">us</span></span><br><span class="line"><span class="variable">FlipThreadRoots</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">126.119</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1.028</span><span class="variable">us</span><span class="operator">-</span><span class="number">3202.499</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">57.457</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">11412</span><span class="variable">us</span></span><br><span class="line"><span class="variable">SweepAllocSpace</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">117.761</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">24</span><span class="variable">us</span><span class="operator">-</span><span class="number">400.624</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">53.649</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">1541</span><span class="variable">us</span></span><br><span class="line"><span class="variable">SwapBitmaps</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">56.301</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">10</span><span class="variable">us</span><span class="operator">-</span><span class="number">125.312</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">25.649</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">1475</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">GrayAllNewlyDirtyImmuneObjects</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">33.047</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">9</span><span class="variable">us</span><span class="operator">-</span><span class="number">49.931</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">15.055</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">72</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">SetFromSpace</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">11.651</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">2</span><span class="variable">us</span><span class="operator">-</span><span class="number">49.772</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">5.307</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">71</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">FlipCallback</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">7.693</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">2</span><span class="variable">us</span><span class="operator">-</span><span class="number">32</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">3.504</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">32</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">ClearCards</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">6.371</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">250</span><span class="variable">ns</span><span class="operator">-</span><span class="number">49753</span><span class="variable">ns</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">207</span><span class="variable">ns</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">188000</span><span class="variable">ns</span></span><br><span class="line"><span class="variable">Sweep</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">5.793</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1</span><span class="variable">us</span><span class="operator">-</span><span class="number">49.818</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">2.639</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">93</span><span class="variable">us</span></span><br><span class="line"><span class="variable">UnBindBitmaps</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">5.255</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1</span><span class="variable">us</span><span class="operator">-</span><span class="number">31</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">2.394</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">31</span><span class="variable">us</span></span><br><span class="line"><span class="variable">Done</span> <span class="variable">Dumping</span> <span class="variable">histograms</span></span><br><span class="line"><span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">paused</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">315.249</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">49</span><span class="variable">us</span><span class="operator">-</span><span class="number">1378.125</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">143.621</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">7722</span><span class="variable">us</span></span><br><span class="line"><span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">freed</span><span class="operator">-</span><span class="variable">bytes</span><span class="operator">:</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">34</span><span class="variable">MB</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">54</span><span class="variable">MB</span> <span class="built_in">Min</span><span class="operator">:</span> <span class="number">2062</span><span class="variable">KB</span></span><br><span class="line"><span class="variable">Freed</span><span class="operator">-</span><span class="variable">bytes</span> <span class="variable">histogram</span><span class="operator">:</span> <span class="number">0</span><span class="operator">:</span><span class="number">4</span><span class="operator">,</span><span class="number">5120</span><span class="operator">:</span><span class="number">5</span><span class="operator">,</span><span class="number">10240</span><span class="operator">:</span><span class="number">19</span><span class="operator">,</span><span class="number">15360</span><span class="operator">:</span><span class="number">69</span><span class="operator">,</span><span class="number">20480</span><span class="operator">:</span><span class="number">167</span><span class="operator">,</span><span class="number">25600</span><span class="operator">:</span><span class="number">364</span><span class="operator">,</span><span class="number">30720</span><span class="operator">:</span><span class="number">529</span><span class="operator">,</span><span class="number">35840</span><span class="operator">:</span><span class="number">405</span><span class="operator">,</span><span class="number">40960</span><span class="operator">:</span><span class="number">284</span><span class="operator">,</span><span class="number">46080</span><span class="operator">:</span><span class="number">311</span><span class="operator">,</span><span class="number">51200</span><span class="operator">:</span><span class="number">38</span></span><br><span class="line"><span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">total</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">569.947</span><span class="variable">s</span> <span class="variable">mean</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">259.657</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">freed</span><span class="operator">:</span> <span class="number">1453160493</span> <span class="variable">objects</span> <span class="variable">with</span> <span class="variable">total</span> <span class="variable">size</span> <span class="number">74</span><span class="variable">GB</span></span><br><span class="line"><span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">throughput</span><span class="operator">:</span> <span class="number">2.54964</span><span class="variable">e</span><span class="operator">+</span><span class="number">06</span><span class="operator">/</span><span class="variable">s</span> <span class="operator">/</span> <span class="number">134</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span>  <span class="variable">per</span> <span class="variable">cpu</span><span class="operator">-</span><span class="variable">time</span><span class="operator">:</span> <span class="number">157655668</span><span class="operator">/</span><span class="variable">s</span> <span class="operator">/</span> <span class="number">150</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span></span><br><span class="line"><span class="variable">Average</span> <span class="variable">major</span> <span class="variable">GC</span> <span class="variable">reclaim</span> <span class="variable">bytes</span> <span class="variable">ratio</span> <span class="number">0.486928</span> <span class="variable">over</span> <span class="number">2195</span> <span class="variable">GC</span> <span class="variable">cycles</span></span><br><span class="line"><span class="variable">Average</span> <span class="variable">major</span> <span class="variable">GC</span> <span class="variable">copied</span> <span class="variable">live</span> <span class="variable">bytes</span> <span class="variable">ratio</span> <span class="number">0.0894662</span> <span class="variable">over</span> <span class="number">2199</span> <span class="variable">major</span> <span class="variable">GCs</span></span><br><span class="line"><span class="variable">Cumulative</span> <span class="variable">bytes</span> <span class="variable">moved</span> <span class="number">6586367960</span></span><br><span class="line"><span class="variable">Cumulative</span> <span class="variable">objects</span> <span class="variable">moved</span> <span class="number">127490240</span></span><br><span class="line"><span class="variable">Peak</span> <span class="variable">regions</span> <span class="variable">allocated</span> <span class="number">376</span> <span class="punctuation">(</span><span class="number">94</span><span class="variable">MB</span><span class="punctuation">)</span> <span class="operator">/</span> <span class="number">2048</span> <span class="punctuation">(</span><span class="number">512</span><span class="variable">MB</span><span class="punctuation">)</span></span><br><span class="line"><span class="variable">Start</span> <span class="variable">Dumping</span> <span class="variable">histograms</span> <span class="variable">for</span> <span class="number">685</span> <span class="variable">iterations</span> <span class="variable">for</span> <span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span></span><br><span class="line"><span class="variable">ScanCardsForSpace</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">26.288</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">8.617</span><span class="variable">ms</span><span class="operator">-</span><span class="number">77.759</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">38.377</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">432.991</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ProcessMarkStack</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">21.829</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">2.116</span><span class="variable">ms</span><span class="operator">-</span><span class="number">71.119</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">31.868</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">98.679</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ClearFromSpace</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">19.420</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">5.480</span><span class="variable">ms</span><span class="operator">-</span><span class="number">50.293</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">28.351</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">507.330</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ScanImmuneSpaces</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">9.968</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">8.155</span><span class="variable">ms</span><span class="operator">-</span><span class="number">30.639</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">14.552</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">46.676</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">SweepSystemWeaks</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">6.741</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">3.655</span><span class="variable">ms</span><span class="operator">-</span><span class="number">14.715</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">9.841</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">22.142</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">GrayAllDirtyImmuneObjects</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">4.466</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.584</span><span class="variable">ms</span><span class="operator">-</span><span class="number">14.315</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">6.519</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">24.355</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">FlipOtherThreads</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.672</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.631</span><span class="variable">ms</span><span class="operator">-</span><span class="number">16.630</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">5.361</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">18.513</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">ProcessReferences</span><span class="operator">:</span>      <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">2.806</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.001</span><span class="variable">ms</span><span class="operator">-</span><span class="number">9.459</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">2.048</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">11.951</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">EnqueueFinalizerReferences</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">1.857</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.424</span><span class="variable">ms</span><span class="operator">-</span><span class="number">8.609</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">2.711</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">24.063</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">VisitConcurrentRoots</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">1.094</span><span class="variable">s</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1.306</span><span class="variable">ms</span><span class="operator">-</span><span class="number">5.357</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.598</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">6.831</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">SweepArray</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">711.032</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.022</span><span class="variable">ms</span><span class="operator">-</span><span class="number">3.502</span><span class="variable">ms</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">1.038</span><span class="variable">ms</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">7.307</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">InitializePhase</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">667.346</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">303</span><span class="variable">us</span><span class="operator">-</span><span class="number">2643.749</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">974.227</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">3199</span><span class="variable">us</span></span><br><span class="line"><span class="variable">VisitNonThreadRoots</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">388.145</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">103.911</span><span class="variable">us</span><span class="operator">-</span><span class="number">1385.833</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">566.635</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">5374</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ThreadListFlip</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">202.730</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">18</span><span class="variable">us</span><span class="operator">-</span><span class="number">2414.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">295.956</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">6780</span><span class="variable">us</span></span><br><span class="line"><span class="variable">EmptyRBMarkBitStack</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">132.934</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">8</span><span class="variable">us</span><span class="operator">-</span><span class="number">1757.499</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">194.064</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">8495</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ResumeRunnableThreads</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">109.593</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">6</span><span class="variable">us</span><span class="operator">-</span><span class="number">4719.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">159.989</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">11106</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ResumeOtherThreads</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">86.733</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">3</span><span class="variable">us</span><span class="operator">-</span><span class="number">4114.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">126.617</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">19332</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ForwardSoftReferences</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">69.686</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">14</span><span class="variable">us</span><span class="operator">-</span><span class="number">2014.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">101.731</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">4723</span><span class="variable">us</span></span><br><span class="line"><span class="variable">RecordFree</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">58.889</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">0.500</span><span class="variable">us</span><span class="operator">-</span><span class="number">185.833</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">42.984</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">769</span><span class="variable">us</span></span><br><span class="line"><span class="variable">FlipThreadRoots</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">58.540</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1.034</span><span class="variable">us</span><span class="operator">-</span><span class="number">4314.999</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">85.459</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">10224</span><span class="variable">us</span></span><br><span class="line"><span class="variable">CopyingPhase</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">52.227</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">26</span><span class="variable">us</span><span class="operator">-</span><span class="number">728.749</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">76.243</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">2060</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ReclaimPhase</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">37.207</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">7</span><span class="variable">us</span><span class="operator">-</span><span class="number">2322.499</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">54.316</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">3826</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">GrayAllNewlyDirtyImmuneObjects</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">23.859</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">11</span><span class="variable">us</span><span class="operator">-</span><span class="number">98.917</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">34.830</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">128</span><span class="variable">us</span></span><br><span class="line"><span class="variable">FreeList</span><span class="operator">:</span>       <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">20.376</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">2</span><span class="variable">us</span><span class="operator">-</span><span class="number">188.875</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">29.573</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">998</span><span class="variable">us</span></span><br><span class="line"><span class="variable">MarkZygoteLargeObjects</span><span class="operator">:</span> <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">18.970</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">4</span><span class="variable">us</span><span class="operator">-</span><span class="number">115.749</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">27.693</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">122</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">SetFromSpace</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">12.331</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">3</span><span class="variable">us</span><span class="operator">-</span><span class="number">94.226</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">18.001</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">109</span><span class="variable">us</span></span><br><span class="line"><span class="variable">SwapBitmaps</span><span class="operator">:</span>    <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">11.761</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">5</span><span class="variable">us</span><span class="operator">-</span><span class="number">49.968</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">17.169</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">67</span><span class="variable">us</span></span><br><span class="line"><span class="variable">ResetStack</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">4.317</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1</span><span class="variable">us</span><span class="operator">-</span><span class="number">64.374</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">6.302</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">190</span><span class="variable">us</span></span><br><span class="line"><span class="variable">UnBindBitmaps</span><span class="operator">:</span>  <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.803</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">4</span><span class="variable">us</span><span class="operator">-</span><span class="number">49.822</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">5.551</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">70</span><span class="variable">us</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">ClearCards</span><span class="operator">:</span>     <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.336</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">250</span><span class="variable">ns</span><span class="operator">-</span><span class="number">7000</span><span class="variable">ns</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">347</span><span class="variable">ns</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">7000</span><span class="variable">ns</span></span><br><span class="line"><span class="punctuation">(</span><span class="variable">Paused</span><span class="punctuation">)</span><span class="variable">FlipCallback</span><span class="operator">:</span>   <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">3.082</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">1</span><span class="variable">us</span><span class="operator">-</span><span class="number">30</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">4.499</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">30</span><span class="variable">us</span></span><br><span class="line"><span class="variable">Done</span> <span class="variable">Dumping</span> <span class="variable">histograms</span></span><br><span class="line"><span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">paused</span><span class="operator">:</span>        <span class="built_in">Sum</span><span class="operator">:</span> <span class="number">229.314</span><span class="variable">ms</span> <span class="number">99</span><span class="operator">%</span> <span class="built_in">C</span><span class="operator">.</span><span class="built_in">I</span><span class="operator">.</span> <span class="number">37</span><span class="variable">us</span><span class="operator">-</span><span class="number">2287.499</span><span class="variable">us</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">334.764</span><span class="variable">us</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">6850</span><span class="variable">us</span></span><br><span class="line"><span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">freed</span><span class="operator">-</span><span class="variable">bytes</span><span class="operator">:</span> <span class="variable">Avg</span><span class="operator">:</span> <span class="number">44</span><span class="variable">MB</span> <span class="built_in">Max</span><span class="operator">:</span> <span class="number">50</span><span class="variable">MB</span> <span class="built_in">Min</span><span class="operator">:</span> <span class="number">9132</span><span class="variable">KB</span></span><br><span class="line"><span class="variable">Freed</span><span class="operator">-</span><span class="variable">bytes</span> <span class="variable">histogram</span><span class="operator">:</span> <span class="number">5120</span><span class="operator">:</span><span class="number">1</span><span class="operator">,</span><span class="number">15360</span><span class="operator">:</span><span class="number">1</span><span class="operator">,</span><span class="number">20480</span><span class="operator">:</span><span class="number">6</span><span class="operator">,</span><span class="number">25600</span><span class="operator">:</span><span class="number">1</span><span class="operator">,</span><span class="number">30720</span><span class="operator">:</span><span class="number">1</span><span class="operator">,</span><span class="number">35840</span><span class="operator">:</span><span class="number">9</span><span class="operator">,</span><span class="number">40960</span><span class="operator">:</span><span class="number">235</span><span class="operator">,</span><span class="number">46080</span><span class="operator">:</span><span class="number">427</span><span class="operator">,</span><span class="number">51200</span><span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">total</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">100.823</span><span class="variable">s</span> <span class="variable">mean</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">147.187</span><span class="variable">ms</span></span><br><span class="line"><span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">freed</span><span class="operator">:</span> <span class="number">519927309</span> <span class="variable">objects</span> <span class="variable">with</span> <span class="variable">total</span> <span class="variable">size</span> <span class="number">30</span><span class="variable">GB</span></span><br><span class="line"><span class="variable">young</span> <span class="variable">concurrent</span> <span class="variable">copying</span> <span class="variable">throughput</span><span class="operator">:</span> <span class="number">5.15683</span><span class="variable">e</span><span class="operator">+</span><span class="number">06</span><span class="operator">/</span><span class="variable">s</span> <span class="operator">/</span> <span class="number">304</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span>  <span class="variable">per</span> <span class="variable">cpu</span><span class="operator">-</span><span class="variable">time</span><span class="operator">:</span> <span class="number">333152554</span><span class="operator">/</span><span class="variable">s</span> <span class="operator">/</span> <span class="number">317</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span></span><br><span class="line"><span class="variable">Average</span> <span class="variable">minor</span> <span class="variable">GC</span> <span class="variable">reclaim</span> <span class="variable">bytes</span> <span class="variable">ratio</span> <span class="number">0.52381</span> <span class="variable">over</span> <span class="number">685</span> <span class="variable">GC</span> <span class="variable">cycles</span></span><br><span class="line"><span class="variable">Average</span> <span class="variable">minor</span> <span class="variable">GC</span> <span class="variable">copied</span> <span class="variable">live</span> <span class="variable">bytes</span> <span class="variable">ratio</span> <span class="number">0.0512109</span> <span class="variable">over</span> <span class="number">685</span> <span class="variable">minor</span> <span class="variable">GCs</span></span><br><span class="line"><span class="variable">Cumulative</span> <span class="variable">bytes</span> <span class="variable">moved</span> <span class="number">1542000944</span></span><br><span class="line"><span class="variable">Cumulative</span> <span class="variable">objects</span> <span class="variable">moved</span> <span class="number">28393168</span></span><br><span class="line"><span class="variable">Peak</span> <span class="variable">regions</span> <span class="variable">allocated</span> <span class="number">376</span> <span class="punctuation">(</span><span class="number">94</span><span class="variable">MB</span><span class="punctuation">)</span> <span class="operator">/</span> <span class="number">2048</span> <span class="punctuation">(</span><span class="number">512</span><span class="variable">MB</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">time</span> <span class="variable">spent</span> <span class="variable">in</span> <span class="variable">GC</span><span class="operator">:</span> <span class="number">670.771</span><span class="variable">s</span></span><br><span class="line"><span class="built_in">Mean</span> <span class="variable">GC</span> <span class="variable">size</span> <span class="variable">throughput</span><span class="operator">:</span> <span class="number">159</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span> <span class="variable">per</span> <span class="variable">cpu</span><span class="operator">-</span><span class="variable">time</span><span class="operator">:</span> <span class="number">177</span><span class="variable">MB</span><span class="operator">/</span><span class="variable">s</span></span><br><span class="line"><span class="built_in">Mean</span> <span class="variable">GC</span> <span class="variable">object</span> <span class="variable">throughput</span><span class="operator">:</span> <span class="number">2.94152</span><span class="variable">e</span><span class="operator">+</span><span class="number">06</span> <span class="variable">objects</span><span class="operator">/</span><span class="variable">s</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">number</span> <span class="variable">of</span> <span class="variable">allocations</span> <span class="number">1974199562</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">bytes</span> <span class="variable">allocated</span> <span class="number">104</span><span class="variable">GB</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">bytes</span> <span class="variable">freed</span> <span class="number">104</span><span class="variable">GB</span></span><br><span class="line"><span class="variable">Free</span> <span class="variable">memory</span> <span class="number">10</span><span class="variable">MB</span></span><br><span class="line"><span class="variable">Free</span> <span class="variable">memory</span> <span class="variable">until</span> <span class="variable">GC</span> <span class="number">10</span><span class="variable">MB</span></span><br><span class="line"><span class="variable">Free</span> <span class="variable">memory</span> <span class="variable">until</span> <span class="variable">OOME</span> <span class="number">442</span><span class="variable">MB</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">memory</span> <span class="number">80</span><span class="variable">MB</span></span><br><span class="line"><span class="built_in">Max</span> <span class="variable">memory</span> <span class="number">512</span><span class="variable">MB</span></span><br><span class="line"><span class="variable">Zygote</span> <span class="variable">space</span> <span class="variable">size</span> <span class="number">2780</span><span class="variable">KB</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">mutator</span> <span class="variable">paused</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">544.563</span><span class="variable">ms</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">time</span> <span class="variable">waiting</span> <span class="variable">for</span> <span class="variable">GC</span> <span class="variable">to</span> <span class="variable">complete</span><span class="operator">:</span> <span class="number">117.494</span><span class="variable">ms</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">GC</span> <span class="variable">count</span><span class="operator">:</span> <span class="number">2880</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">GC</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">670.771</span><span class="variable">s</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">blocking</span> <span class="variable">GC</span> <span class="variable">count</span><span class="operator">:</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">blocking</span> <span class="variable">GC</span> <span class="variable">time</span><span class="operator">:</span> <span class="number">86.373</span><span class="variable">ms</span></span><br><span class="line"><span class="built_in">Histogram</span> <span class="variable">of</span> <span class="variable">GC</span> <span class="variable">count</span> <span class="variable">per</span> <span class="number">10000</span> <span class="variable">ms</span><span class="operator">:</span> <span class="number">0</span><span class="operator">:</span><span class="number">259879</span><span class="operator">,</span><span class="number">1</span><span class="operator">:</span><span class="number">2828</span><span class="operator">,</span><span class="number">2</span><span class="operator">:</span><span class="number">24</span><span class="operator">,</span><span class="number">3</span><span class="operator">:</span><span class="number">1</span></span><br><span class="line"><span class="built_in">Histogram</span> <span class="variable">of</span> <span class="variable">blocking</span> <span class="variable">GC</span> <span class="variable">count</span> <span class="variable">per</span> <span class="number">10000</span> <span class="variable">ms</span><span class="operator">:</span> <span class="number">0</span><span class="operator">:</span><span class="number">262731</span><span class="operator">,</span><span class="number">1</span><span class="operator">:</span><span class="number">1</span></span><br><span class="line"><span class="variable">Native</span> <span class="variable">bytes</span> <span class="variable">total</span><span class="operator">:</span> <span class="number">30599192</span> <span class="variable">registered</span><span class="operator">:</span> <span class="number">8947416</span></span><br><span class="line"><span class="built_in">Total</span> <span class="variable">native</span> <span class="variable">bytes</span> <span class="variable">at</span> <span class="variable">last</span> <span class="variable">GC</span><span class="operator">:</span> <span class="number">30344912</span></span><br></pre></td></tr></table></figure><h3 id="分析-GC-正确性问题的工具"><a href="#分析-GC-正确性问题的工具" class="headerlink" title="分析 GC 正确性问题的工具"></a>分析 GC 正确性问题的工具</h3><p>造成 ART 内部崩溃的原因多种多样。读取或写入对象字段时发生崩溃可能表明堆损坏。如果 GC 在运行时崩溃，也可能是由堆损坏造成的。造成堆损坏的最常见原因是应用代码不正确。好在有一些工具可用来调试与 GC 和堆相关的崩溃问题，这些工具包括上面指定的堆验证选项和 CheckJNI。</p><h4 id="CheckJNI"><a href="#CheckJNI" class="headerlink" title="CheckJNI"></a>CheckJNI</h4><p>CheckJNI 是一种添加 JNI 检查来验证应用行为的模式；出于性能方面的原因，默认情况下不启用此类检查。此类检查将捕获一些可能会导致堆损坏的错误，如使用无效/过时的局部和全局引用。如需启用 CheckJNI，请使用以下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="bash"> setprop dalvik.vm.checkjni <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>CheckJNI 的 forcecopy 模式对于检测超出数组区域末端的写入很有用。启用后，forcecopy 会促使数组访问 JNI 函数返回带有红色区域的副本。红色区域是返回的指针末端/始端的一个区域，该区域具有一个特殊值，该值在数组释放时得到验证。如果红色区域中的值与预期值不匹配，表明发生了缓冲区溢出或欠载。这会导致 CheckJNI 中止。如需启用 forcecopy 模式，请使用以下命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell </span>setprop dalvik.vm.<span class="keyword">jniopts </span>forcecopy</span><br></pre></td></tr></table></figure><p>举例来说，当写入超出从 <code>GetPrimitiveArrayCritical</code> 获取的数组的末端时，这就是 CheckJNI 应捕获的一个错误。此操作可能会损坏 Java 堆。如果写入发生在 CheckJNI 红色区域内，则在调用相应的 <code>ReleasePrimitiveArrayCritical</code> 时，CheckJNI 会捕获该问题。否则，写入会损坏 Java 堆中的某个随机对象，并且可能会导致将来发生 GC 崩溃。如果损坏的内存是引用字段，则 GC 可能会捕获错误并输出错误消息“Tried to mark <ptr> not contained by any spaces”。</p><p>当 GC 尝试标记一个对象但无法找到其空间时，就会发生此错误。此检查失败后，GC 会遍历根，并尝试查看无效的对象是否为根。结果共有两个选项：对象为根或非根。</p><h4 id="无效根示例"><a href="#无效根示例" class="headerlink" title="无效根示例"></a>无效根示例</h4><p>如果对象为无效根，则会输出一些有用的信息：<code>art E 5955 5955 art/runtime/gc/collector/mark_sweep.cc:383] Tried to mark 0x2 not contained by any spaces</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">art E  <span class="number">5955</span>  <span class="number">5955</span> art/runtime/gc/collector/mark_sweep.cc:<span class="number">384</span>] Attempting see if</span><br><span class="line">it&#x27;s a bad root</span><br><span class="line">art E  <span class="number">5955</span>  <span class="number">5955</span> art/runtime/gc/collector/mark_sweep.cc:485] Found invalid</span><br><span class="line">root: 0x2</span><br><span class="line">art E  <span class="number">5955</span>  <span class="number">5955</span> art/runtime/gc/collector/mark_sweep.cc:486]</span><br><span class="line">Type=RootJavaFrame thread_id=1 location=Visiting method &#x27;java.lang.Object</span><br><span class="line">com.google.gwt.corp.collections.JavaReadableJsArray.get(int)&#x27; at dex PC 0x<span class="number">0002</span></span><br><span class="line">(native PC 0xf<span class="number">1960</span>9d9) vreg=1</span><br></pre></td></tr></table></figure><p>在本示例中，<code>com.google.gwt.corp.collections.JavaReadableJsArray.get</code> 内的 <code>vreg=1</code> 应该包含一个堆引用，但却包含了一个地址为 <code>0x2</code> 的无效指针。这是一个无效根。如需调试此问题，请在 oat 文件上使用 <code>oatdump</code>，并查看具有无效根的方法。在本示例中，结果证明错误在于 x86 后端的编译器错误。修复该错误的变更列表如下：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLXJldmlldy5nb29nbGVzb3VyY2UuY29tLyMvYy8xMzM5MzIv">https://android-review.googlesource.com/#/c/133932/<i class="fa fa-external-link-alt"></i></span></p><h4 id="损坏的对象示例"><a href="#损坏的对象示例" class="headerlink" title="损坏的对象示例"></a>损坏的对象示例</h4><p>如果对象不是根，则输出类似于以下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">01</span>-<span class="number">15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">00</span>.<span class="number">196</span>  <span class="number">1217</span>  <span class="number">1238</span> E art     : Attempting see if it&#x27;s a bad root</span><br><span class="line"><span class="attribute">01</span>-<span class="number">15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">00</span>.<span class="number">196</span>  <span class="number">1217</span>  <span class="number">1238</span> F art     :</span><br><span class="line"><span class="attribute">art</span>/runtime/gc/collector/mark_sweep.cc:<span class="number">381</span>] Can&#x27;t mark invalid object</span><br></pre></td></tr></table></figure><p>如果堆损坏不是无效根，将很难调试。此错误消息表明堆中至少有一个对象指向无效对象。</p><h2 id="实现-ART-即时-JIT-编译器"><a href="#实现-ART-即时-JIT-编译器" class="headerlink" title="实现 ART 即时 (JIT) 编译器"></a>实现 ART 即时 (JIT) 编译器</h2><p>Android Runtime (ART) 包含一个具备代码分析功能的即时 (JIT) 编译器，该编译器可以在 Android 应用运行时持续提高其性能。JIT 编译器对 Android 运行组件当前的预先 (AOT) 编译器进行了补充，可以提升运行时性能，节省存储空间，加快应用和系统更新速度。相较于 AOT 编译器，JIT 编译器的优势也更为明显，因为在应用自动更新期间或在无线下载 (OTA) 更新期间重新编译应用时，它不会拖慢系统速度。</p><p>尽管 JIT 和 AOT 使用相同的编译器，它们所进行的一系列优化也较为相似，但它们生成的代码可能会有所不同。JIT 会利用运行时类型信息，可以更高效地进行内联，并可让堆栈替换 (OSR) 编译成为可能，而这一切都会使其生成的代码略有不同。</p><h3 id="JIT-架构"><a href="#JIT-架构" class="headerlink" title="JIT 架构"></a>JIT 架构</h3><p><img src="https://up-img.yonghong.tech/pic/2021/07/29-20-44-jit-arch-3Fcld1.png" alt="JIT 架构"></p><p><strong>图 1.</strong> JIT 架构。</p><h3 id="JIT-编译"><a href="#JIT-编译" class="headerlink" title="JIT 编译"></a>JIT 编译</h3><p>JIT 编译涉及以下活动：</p><p><img src="https://up-img.yonghong.tech/pic/2021/07/29-20-44-jit-profile-comp-RifrTY.png" alt="配置文件指导的编译"></p><p><strong>图 2.</strong> 配置文件引导的编译。</p><ol><li><p>用户运行应用，此举随后触发 ART 加载<code>.dex</code>文件。</p><ul><li>如果有 <code>.oat</code> 文件（即 <code>.dex</code> 文件的 AOT 二进制文件），ART 会直接使用该文件。虽然 <code>.oat</code> 文件会定期生成，但文件中不一定会包含经过编译的代码（即 AOT 二进制文件）。</li><li>如果 <code>.oat</code> 文件不含经过编译的代码，ART 会通过 JIT 和解释器执行 <code>.dex</code> 文件。</li></ul></li><li><p>针对任何未根据 <code>speed</code> 编译过滤器编译的应用启用 JIT（也就是说，要尽可能多地编译应用中的代码）。</p></li><li><p>将 JIT 配置文件数据转储到只有该应用可以访问的系统目录下的文件中。</p></li><li><p>AOT 编译 (<code>dex2oat</code>) 守护程序通过解析该文件来推进其编译。</p><p> <img src="https://up-img.yonghong.tech/pic/2021/07/29-20-44-jit-daemon-NoNjuF.png" alt="JIT 守护程序"><strong>图 3.</strong> JIT 守护程序活动。</p></li></ol><p>举例来说，Google Play 服务就是一种由其他应用使用的类似于共享库的服务。</p><h3 id="JIT-工作流程"><a href="#JIT-工作流程" class="headerlink" title="JIT 工作流程"></a>JIT 工作流程</h3><p><img src="https://source.android.com/devices/tech/dalvik/images/jit-workflow.png?hl=zh-cn" alt="JIT 架构"></p><p><strong>图 4.</strong> JIT 数据流。</p><ul><li><p>分析信息会存储在代码缓存中，并会在内存紧张时作为垃圾被回收。</p><ul><li>无法保证在应用处于后台运行状态时所捕获的快照能够包含完整的数据（即 JIT 编译的所有内容）。</li><li>该过程不会尝试确保记录所有内容（因为这会影响运行时性能）。</li></ul></li><li><p>方法可能有三种不同的状态：</p><ul><li><p>已经过解释（dex 代码）</p></li><li><p>已经过 JIT 编译</p></li><li><p>已经过 AOT 编译</p><p>如果同时存在 JIT 和 AOT 代码（例如，由于反复进行逆优化），经过 JIT 编译的代码将是首选代码。</p></li></ul></li><li><p>在不影响前台应用性能的情况下运行 JIT 所需的内存取决于相关应用。大型应用比小型应用需要更多内存。一般来说，大型应用所需的内存稳定维持在 4 MB 左右。</p></li></ul><h3 id="开启-JIT-日志记录"><a href="#开启-JIT-日志记录" class="headerlink" title="开启 JIT 日志记录"></a>开启 JIT 日志记录</h3><p>要开启 JIT 日志记录，请运行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb <span class="keyword">shell</span> <span class="keyword">stop</span></span><br><span class="line">adb <span class="keyword">shell</span> setprop dalvik.<span class="keyword">vm</span>.extra-opts -<span class="keyword">verbose</span>:jit</span><br><span class="line">adb <span class="keyword">shell</span> start</span><br></pre></td></tr></table></figure><h3 id="停用-JIT"><a href="#停用-JIT" class="headerlink" title="停用 JIT"></a>停用 JIT</h3><p>要停用 JIT，请运行以下命令：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb <span class="built_in">shell</span> <span class="built_in">stop</span></span><br><span class="line">adb <span class="built_in">shell</span> setprop dalvik.vm.usejit <span class="literal">false</span></span><br><span class="line">adb <span class="built_in">shell</span> <span class="built_in">start</span></span><br></pre></td></tr></table></figure><h3 id="强制编译"><a href="#强制编译" class="headerlink" title="强制编译"></a>强制编译</h3><p>要强制编译，请运行以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> <span class="title">compile</span></span><br></pre></td></tr></table></figure><p>强制编译特定软件包的常见用例：</p><ul><li><p>基于配置文件：</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> <span class="title">compile -m speed-profile -f my-<span class="keyword">package</span></span></span><br></pre></td></tr></table></figure></li><li><p>全面：</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> <span class="title">compile -m speed -f my-<span class="keyword">package</span></span></span><br></pre></td></tr></table></figure></li></ul><p>强制编译所有软件包的常见用例：</p><ul><li><p>基于配置文件：</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> <span class="title">compile -m speed-profile -f -a</span></span><br></pre></td></tr></table></figure></li><li><p>全面：</p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> <span class="title">compile -m speed -f -a</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="清除配置文件数据"><a href="#清除配置文件数据" class="headerlink" title="清除配置文件数据"></a>清除配置文件数据</h3><p>要清除配置文件数据并移除经过编译的代码，请运行以下命令：</p><ul><li><p>针对一个软件包：</p>  <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd <span class="keyword">package</span> compile --<span class="keyword">reset</span> <span class="keyword">my</span>-<span class="keyword">package</span></span><br></pre></td></tr></table></figure></li><li><p>针对所有软件包：</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">shell</span> cmd package compile <span class="comment">--reset -a</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android Runtime (ART) 是 Android 上的应用和部分系统服务使用的托管式运行时。ART 及其前身 Dalvik 最初是专为 Android 项目打造的。作为运行时的 ART 可执行 Dalvik 可执行文件并遵循 Dex 字节码规范。&lt;/p&gt;
&lt;p&gt;ART 和 Dalvik 是运行 Dex 字节码的兼容运行时，因此针对 Dalvik 开发的应用也能在 ART 环境中运作。不过，Dalvik 采用的一些技术并不适用于 ART。有关最重要问题的信息，请参阅&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS9wcmFjdGljZXMvdmVyaWZ5aW5nLWFwcHMtYXJ0Lmh0bWw/aGw9emgtY24=&quot;&gt;在 Android Runtime (ART) 上验证应用行为&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://yonghong.tech/categories/Android/"/>
    
    
    <category term="JVM" scheme="http://yonghong.tech/tags/JVM/"/>
    
    <category term="Android" scheme="http://yonghong.tech/tags/Android/"/>
    
    <category term="ART" scheme="http://yonghong.tech/tags/ART/"/>
    
    <category term="Dalvik" scheme="http://yonghong.tech/tags/Dalvik/"/>
    
    <category term="运行时" scheme="http://yonghong.tech/tags/%E8%BF%90%E8%A1%8C%E6%97%B6/"/>
    
    <category term="虚拟机" scheme="http://yonghong.tech/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>看看大厂是如何用云原生解决千万视频会议难题的</title>
    <link href="http://yonghong.tech/2021/07/cloud-native-for-videoconferencing/"/>
    <id>http://yonghong.tech/2021/07/cloud-native-for-videoconferencing/</id>
    <published>2021-07-09T14:24:00.000Z</published>
    <updated>2021-07-09T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践"><a href="#腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践" class="headerlink" title="腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践"></a>腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践</h2><p>文章链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTkyODMwNjAzMjcy">https://juejin.cn/post/6844904192830603272<i class="fa fa-external-link-alt"></i></span></p><p>本文总结了腾讯会议在TKE容器化部署时用到的平台相关特性，包括业务镜像自动分批灰度发布、ConfigMap分批灰度发布、Pod内A/B容器ms级切换发布、多集群发布管理、基于DynamicQuota的产品配额管理、探测节点和集群稳定性问题以提升自愈能力等。</p><h2 id="华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？"><a href="#华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？" class="headerlink" title="华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？"></a>华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？</h2><p>文章链接：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDYzODgxMzM=">https://zhuanlan.zhihu.com/p/106388133<i class="fa fa-external-link-alt"></i></span></p><p>业务快速增长带来的挑战聚焦在海量请求的冲击，从消息到语音模块、视频会议系统，华为云WeLink核心业务采用全容器化架构，结合华为云容器引擎单集群百万容器的超大规模支撑，可以迅速在新扩容的云服务器上启动业务，每秒最快可新增1000业务实例，大大降低了业务高峰时段的断线率、故障率和请求等待时长。更能通过瑶光的二次调度进行热点消除，保障计算资源压力的平均分布，助力业务平稳运行。</p><span id="more"></span><h2 id="字节：字节跳动容器化场景下的性能优化实践"><a href="#字节：字节跳动容器化场景下的性能优化实践" class="headerlink" title="字节：字节跳动容器化场景下的性能优化实践"></a>字节：字节跳动容器化场景下的性能优化实践</h2><p>文章链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS9tdS0xYkZITm1yZGQwa3liZ1BYeA==">https://www.infoq.cn/article/mu-1bFHNmrdd0kybgPXx<i class="fa fa-external-link-alt"></i></span></p><p>字节跳动资源调度团队负责私有云平台 TCE 的底层 Kubernetes 集群的开发和维护工作。TCE 托管了头条、抖音、字节国际化业务等内部上万个在线微服务。随着这些业务的快速发展，集群规模不断扩大，机器负载越来越高，运维难度和成本问题越发显著。原生 Kubernetes 作为控制面系统，并不能很好地解决这些问题。为了提升系统可见性，我们基于 eBPF 实现了系统监控，使内核能更好地理解微服务，极大地提升了问题诊断效率。为提升资源利用率，我们通过动态超售，实现了业务实例的高密度部署，并通过优化 Kubernetes 资源模型，有效保证了延时敏感服务的 QoS。</p><h2 id="微软：Advancing-Microsoft-Teams-on-Azure—operating-at-pandemic-scale"><a href="#微软：Advancing-Microsoft-Teams-on-Azure—operating-at-pandemic-scale" class="headerlink" title="微软：Advancing Microsoft Teams on Azure—operating at pandemic scale"></a>微软：Advancing Microsoft Teams on Azure—operating at pandemic scale</h2><p>文章链接：<span class="exturl" data-url="aHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL2VuLXVzL2Jsb2cvYWR2YW5jaW5nLW1pY3Jvc29mdC10ZWFtcy1vbi1henVyZS1vcGVyYXRpbmctYXQtcGFuZGVtaWMtc2NhbGUv">https://azure.microsoft.com/en-us/blog/advancing-microsoft-teams-on-azure-operating-at-pandemic-scale/<i class="fa fa-external-link-alt"></i></span></p><h2 id="Zoom：Zoom-deploys-its-core-videoconferencing-service-on-Oracle-Cloud"><a href="#Zoom：Zoom-deploys-its-core-videoconferencing-service-on-Oracle-Cloud" class="headerlink" title="Zoom：Zoom deploys its core videoconferencing service on Oracle Cloud"></a>Zoom：Zoom deploys its core videoconferencing service on Oracle Cloud</h2><p>文章链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvem9vbS1kZXBsb3lzLWl0cy1jb3JlLXZpZGVvY29uZmVyZW5jaW5nLXNlcnZpY2Utb24tb3JhY2xlLWNsb3VkLw==">https://www.zdnet.com/article/zoom-deploys-its-core-videoconferencing-service-on-oracle-cloud/<i class="fa fa-external-link-alt"></i></span></p><h2 id="声网：企业云原生创新与实践"><a href="#声网：企业云原生创新与实践" class="headerlink" title="声网：企业云原生创新与实践"></a>声网：企业云原生创新与实践</h2><p>视频链接：<span class="exturl" data-url="aHR0cHM6Ly95dW5xaS5hbGl5dW4uY29tLzIwMjAvc2Vzc2lvbjg4P2xpdmVJZD00NDE5MQ==">https://yunqi.aliyun.com/2020/session88?liveId=44191<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践&quot;&gt;&lt;a href=&quot;#腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践&quot; class=&quot;headerlink&quot; title=&quot;腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践&quot;&gt;&lt;/a&gt;腾讯：揭秘日活千万腾讯会议全量云原生化上TKE技术实践&lt;/h2&gt;&lt;p&gt;文章链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTkyODMwNjAzMjcy&quot;&gt;https://juejin.cn/post/6844904192830603272&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本文总结了腾讯会议在TKE容器化部署时用到的平台相关特性，包括业务镜像自动分批灰度发布、ConfigMap分批灰度发布、Pod内A/B容器ms级切换发布、多集群发布管理、基于DynamicQuota的产品配额管理、探测节点和集群稳定性问题以提升自愈能力等。&lt;/p&gt;
&lt;h2 id=&quot;华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？&quot;&gt;&lt;a href=&quot;#华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？&quot; class=&quot;headerlink&quot; title=&quot;华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？&quot;&gt;&lt;/a&gt;华为：远程办公利器华为云WeLink，如何练就硬核抗压能力？&lt;/h2&gt;&lt;p&gt;文章链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDYzODgxMzM=&quot;&gt;https://zhuanlan.zhihu.com/p/106388133&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;业务快速增长带来的挑战聚焦在海量请求的冲击，从消息到语音模块、视频会议系统，华为云WeLink核心业务采用全容器化架构，结合华为云容器引擎单集群百万容器的超大规模支撑，可以迅速在新扩容的云服务器上启动业务，每秒最快可新增1000业务实例，大大降低了业务高峰时段的断线率、故障率和请求等待时长。更能通过瑶光的二次调度进行热点消除，保障计算资源压力的平均分布，助力业务平稳运行。&lt;/p&gt;</summary>
    
    
    
    <category term="云原生" scheme="http://yonghong.tech/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="云原生" scheme="http://yonghong.tech/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java 进阶 08 —— JVM 垃圾回收器</title>
    <link href="http://yonghong.tech/java-advance/08-jvm-gc/"/>
    <id>http://yonghong.tech/java-advance/08-jvm-gc/</id>
    <published>2021-07-02T13:00:00.000Z</published>
    <updated>2021-07-02T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收器概述"><a href="#垃圾回收器概述" class="headerlink" title="垃圾回收器概述"></a>垃圾回收器概述</h2><p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商，不同版本的 JVM 来实现。</p><p>由于 JDK 的版本处于高速迭代过程中，因此 Java 发展至今已经衍生了众多的 GC 版本。</p><span id="more"></span><p>从不同角度分析垃圾收集器，可以将 GC 分为不同的类型。</p><p>Java 不同版本的新特性需要关注的点：</p><ul><li>语法层面，Lambda表达式，switch 表达式，自动装箱、拆箱，enum，&lt;&gt;，…</li><li>API 层面：Stream API，新的时间日期，Optional，String，集合框架</li><li>底层优化：JVM 的优化，元空间，静态域，字符串常量池，GC 的变化，多语言的支持</li></ul><h2 id="垃圾回收器的分类"><a href="#垃圾回收器的分类" class="headerlink" title="垃圾回收器的分类"></a>垃圾回收器的分类</h2><ul><li><p>按线程数分，可以分为串行垃圾回收器（Serial Collector）和并行垃圾回收器（Parallel Collector）。</p><ul><li><p>串行回收指的是在同一时间段内只允许有一个 CPU 用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p></li><li><p>在诸如单 CPU 处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以串行回收器默认被应用在客户端的 Client 模式下的 JVM 中。</p></li><li><p>在并发能力比较强的 CPU 上，并行回收器产生的停顿时间要短于串行回收器。</p></li></ul></li><li><p>和串行回收相反，并行收集可以运用多个 CPU 同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了 STW 机制。</p></li><li><p>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。</p><ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li><li>独占式垃圾回收器一旦运行，就停止应用程序中的所有用于线程，直到垃圾回收过程完全结束。</li></ul></li><li><p>按碎片处理方式分，可以分为压缩式垃圾回收器和非压缩式垃圾回收器。</p><ul><li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。（再分配对象空间使用指针碰撞）</li><li>非压缩式的垃圾回收器不进行这步操作。（再分配对象空间使用空闲列表）</li></ul></li><li><p>按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</p></li></ul><h2 id="评估-GC-的性能指标"><a href="#评估-GC-的性能指标" class="headerlink" title="评估 GC 的性能指标"></a>评估 GC 的性能指标</h2><ul><li><strong>吞吐量</strong>：运行用户代码的时间占总运行时间的比例<ul><li>总运行时间：程序的运行时间 + 内存回收的时间</li></ul></li><li>垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li><li><strong>暂停时间</strong>：<strong>执行垃圾收集时，程序的工作线程被暂停的时间</strong>。</li><li>收集频率：相对于应用程序的执行，收集操作发生的频率。</li><li><strong>内存占用</strong>：Java 堆区所占的内存大小。</li><li>快速：一个对象从诞生到被回收所经历的时间。</li></ul><p>吞吐量、暂停时间、内存占用，这三者共同构成一个不可能三角。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。</p><p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升有有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面的效果。</p><p>简单来说，主要抓住两点：<strong>吞吐量</strong>和<strong>暂停时间</strong>。</p><h3 id="吞吐量（throughput）"><a href="#吞吐量（throughput）" class="headerlink" title="吞吐量（throughput）"></a>吞吐量（throughput）</h3><p>吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 / （运行用户代码时间 + 垃圾收集时间）</p><ul><li>比如：虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%</li></ul><p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的。</p><p>吞吐量优先，意味着在单位时间内，STW 的时间最短：0.2 + 0.2 = 0.4</p><h3 id="暂停时间（pause-time）"><a href="#暂停时间（pause-time）" class="headerlink" title="暂停时间（pause time）"></a>暂停时间（pause time）</h3><p>暂停时间是指一个时间段内应用程序线程暂停，让 GC 线程执行的状态</p><ul><li>例如，GC 期间 100 毫秒的暂停时间意味着在这 100 毫秒期间内没有应用程序线程是活动的。</li></ul><p>暂停时间优先，意味着尽可能让单次 STW 的时间最短：0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5</p><h3 id="吞吐量-vs-暂停时间"><a href="#吞吐量-vs-暂停时间" class="headerlink" title="吞吐量 vs 暂停时间"></a>吞吐量 vs 暂停时间</h3><p>高吞吐量较好因为这会让应用程序的最终用户感觉到只有应用程序线程在做”生产性“工作。直觉上，吞吐量越高程序运行越快。</p><p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是 GC 还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的 200 毫秒暂停都可能打断终端用户体验。因此具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。</p><p>不幸的是 ”高吞吐量“ 和 ”低暂停时间“ 是一对相互竞争的目标（矛盾）。</p><ul><li>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致 GC 需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul><p>在设计（或使用）GC 算法时，我们必须确定我们的目标：一个 GC 算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折中。</p><p>现在标准：在最大吞吐量优先的情况下，降低停顿时间。 </p><h2 id="不同的垃圾回收器概述"><a href="#不同的垃圾回收器概述" class="headerlink" title="不同的垃圾回收器概述"></a>不同的垃圾回收器概述</h2><h3 id="垃圾收集器发展史"><a href="#垃圾收集器发展史" class="headerlink" title="垃圾收集器发展史"></a>垃圾收集器发展史</h3><p>有了虚拟机，就一定需要收集垃圾的机制，这就是 Grabage Collection，对应的产品我们称为 Garbage Collector。</p><ul><li>1993 年随 JDK 1.3.1 一起来的是串行方式的 Serial GC，它是第一款 GC。ParNew 垃圾收集器是 Serial 收集器的多线程版本。</li><li>2002 年 2 月 26 日，Parallel GC 和 Concurrent Mark Sweep GC 跟随 JDK 1.4.2 一起发布。</li><li>Parallel GC 在 JDK 6 之后成为 HotSpot 默认 GC。</li><li>2012 年，在 JDK 1.7u4 版本中，G1 可用。</li><li>2017 年，JDK 9 中 G1 变成默认的垃圾收集器，以替代 CMS。</li><li>2018 年 3 月，JDK 10 中 G1 垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li><li>2018 年 9 月，JDK 11 发布。引入 Epsilon 垃圾回收器，又被称为 ”No-Op“（无操作）</li><li>2019 年 3 月，JDK 12 发布。增强 G1，自动返回未用堆内存给操作系统。同时，引入 Shenandoah GC，是一个低停顿时间的 GC（Experimental）。</li><li>2019 年 9 月，JDK 13 发布。增强 ZGC，自动返回未用堆内存给操作系统。</li><li>2020 年 3 月，JDK 14 发布。删除 CMS 垃圾回收器。拓展 ZGC 在 macOS 和 Windows 上的应用。</li></ul><h3 id="7-款经典的垃圾回收器"><a href="#7-款经典的垃圾回收器" class="headerlink" title="7 款经典的垃圾回收器"></a>7 款经典的垃圾回收器</h3><p>串行回收器：Serial、Serial Old</p><p>并行回收器：ParNew、Parallel Scavenge、Parallel Old</p><p>并发回收器：CMS、G1</p><h3 id="7-款经典的垃圾回收器与垃圾分代之间的关系"><a href="#7-款经典的垃圾回收器与垃圾分代之间的关系" class="headerlink" title="7 款经典的垃圾回收器与垃圾分代之间的关系"></a>7 款经典的垃圾回收器与垃圾分代之间的关系</h3><p>新生代收集器：Serial、ParNew、Parallel Scavenge</p><p>老年代收集器：Serial Old、Parallel Old、CMS</p><p>整堆垃圾收集器：G1</p><h3 id="垃圾收集器的组合关系"><a href="#垃圾收集器的组合关系" class="headerlink" title="垃圾收集器的组合关系"></a>垃圾收集器的组合关系</h3><p><img src="https://up-img.yonghong.tech/pic/2021/05/12-20-45-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-BZidDy.png" alt="垃圾收集器的组合关系"></p><ul><li><p>两个收集器间有连线，表明它们可以搭配使用：</p><p>Serial / Serial Old 、Serial / CMS 、ParNew / Serial Old 、 ParNew / CMS 、Parallel Scavenge / Serial Old 、Parallel Scavenge / Parallel Old 、G1</p></li><li><p>其中 Serial Old 作为 CMS 出现 ”Concurrent Mode Failure“ 失败的后备预案。</p></li><li><p>（红色虚线）由于维护和兼容性测试的版本，在  JDK 8 时将 Serial + CMS、ParNew + Serial Old 这两个组合声明为废弃（JEP 173），并在 JDK 9 中完全取消了这些组合的支持（JEP 214），即，移除了这些组合。</p></li><li><p>（绿色虚线）JDK 14 中：弃用 Parallel Scavenge 和 Serial Old 组合（JEP 366）</p></li><li><p>（青色虚线）JDK 14中：删除 CMS 垃圾回收器（JEP 363）</p></li></ul><h3 id="如何查看默认的垃圾回收器"><a href="#如何查看默认的垃圾回收器" class="headerlink" title="如何查看默认的垃圾回收器"></a>如何查看默认的垃圾回收器</h3><p><code>-XX:+PrintCommandLineFlags</code> 查看命令行相关参数（包含使用的垃圾收集器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br></pre></td></tr></table></figure><p>使用命令行指令： jinfo -flag 相关垃圾回收器参数 进程 ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jinfo -flag UseParallelGC 58951</span></span><br><span class="line">-XX:-UseParallelGC</span><br><span class="line"><span class="meta">$</span><span class="bash"> jinfo -flag UseParallelOldGC 58951</span></span><br><span class="line">-XX:-UseParallelOldGC</span><br><span class="line"><span class="meta">$</span><span class="bash"> jinfo -flag UseG1GC 58951</span></span><br><span class="line">-XX:-UseG1GC</span><br><span class="line"><span class="meta">$</span><span class="bash"> jinfo -flag UseConcMarkSweepGC 58951</span></span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure><h2 id="垃圾回收器介绍"><a href="#垃圾回收器介绍" class="headerlink" title="垃圾回收器介绍"></a>垃圾回收器介绍</h2><h3 id="Serial-回收器：串行回收"><a href="#Serial-回收器：串行回收" class="headerlink" title="Serial 回收器：串行回收"></a>Serial 回收器：串行回收</h3><p>Serial 收集器是最基本、历史最悠久的垃圾收集器了。JDK 1.3 之前回收新生代唯一的选择。</p><p>Serial 收集器作为 HotSpot 中 Client 模式下的默认新生垃圾收集器。</p><p>Serial 收集器采用复制算法、串行回收和 STW 机制的方式执行内存回收。</p><p>除了年轻代之外，Serial 收集器还提供用于执行老年代垃圾收集的 Serial Old 收集器。Serial Old 收集器同样也采用了串行回收和 STW 机制，只不过内存回收算法使用的是标记-压缩算法。</p><ul><li>Serial Old 是运行在 Client 模式下默认的老年代的垃圾回收器。</li><li>Serial Old 在 Server 模式下主要有两个用途：①与新生代的 Parallel Scavenge 配合使用 ②作为老年代 CMS 收集器的后备垃圾收集方案。</li></ul><p>这个收集器是一个单线程的收集器，但它的 ”单线程“ 的意义并不仅仅说明它<strong>只会使用一个 CPU 或一条收集线程去完成垃圾收集工作</strong>，更重要的是在它进行垃圾收集时，<strong>必须暂停其他所有的工作线程</strong>，直到它收集结束。</p><p>优势：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p><ul><li>运行在 Client 模式下的虚拟机是个不错的选择。</li></ul><p>在用户的桌面应用场景中，可用内存一般不大（几十 MB 至一两百 MB），可以在较短时间内完成垃圾回收（几十 ms 至一百多 ms），只要不频繁发生，使用串行回收器是可以接受的。</p><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><p>在 HotSpot 虚拟机中，使用 <code>-XX:UseSerialGC</code> 参数可以指定年轻代和老年代都是用串行收集器。</p><ul><li>等价于新生代使用 Serial GC，且老年代使用 Serial Old GC。</li></ul><p>总结：这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核 CPU 才可以用。现在都不是单核的了。</p><p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在 Java Web 应用程序中是不会采用串行垃圾收集器的。</p><h3 id="ParNew-回收器：并行回收"><a href="#ParNew-回收器：并行回收" class="headerlink" title="ParNew 回收器：并行回收"></a>ParNew 回收器：并行回收</h3><p>如果说 Serial GC 是年轻代中的单线程垃圾收集器，那么 ParNew 收集器则是 Serial 收集器的多线程版本。</p><ul><li>Par 是 Parallel 的缩写，New：只能处理的是新生代</li></ul><p>ParNew 收集器除了采用<strong>并行回收</strong>的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew 收集器在年轻代中同样也是<strong>采用复制算法、STW 机制</strong>。</p><p>ParNew 是很多 JVM 运行在 Server 模式下新生代的默认垃圾收集器。</p><ul><li>对于新生代，回收次数频繁，使用并行方式高效。</li><li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li></ul><p>由于 ParNew 收集器是基于并行回收，那么是否可以断定 ParNew 收集器的回收效率在任何场景下都会比 Serial 收集器更高效？</p><ul><li>ParNew 收集器运行在多 CPU 环境下，由于可以充分利用多 CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</li><li>但是在单个 CPU 的环境下，ParNew 收集器不比 Serial 收集器更高效。虽然 Serial 收集器是基于串行回收，但是由于 CPU 不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。</li></ul><p>除 Serial 外，目前只有 ParNew GC 能与 CMS 收集器配合工作。</p><h4 id="参数配置-1"><a href="#参数配置-1" class="headerlink" title="参数配置"></a>参数配置</h4><p>在程序中，开发人员可以通过选项 <code>-XX:+UseParNewGC</code> 手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><p><code>-XX:ParallelGCThreads</code> 限制线程数量，默认开启和 CPU 数相同的线程数。</p><h3 id="Parallel-回收器：吞吐量优先"><a href="#Parallel-回收器：吞吐量优先" class="headerlink" title="Parallel 回收器：吞吐量优先"></a>Parallel 回收器：吞吐量优先</h3><p>HotSpot 的年轻代中除了拥有 ParNew 收集器是基于并行回收以外，Parallel Scavenge 收集器同样也采用了复制算法、并行回收和 STW 机制。</p><p>那么 Parallel 收集器的出现是否多此一举？</p><ul><li>和 ParNew 收集器不同，Parallel Scavenge 收集器的目标是达到一个<strong>可控的吞吐量</strong>（Throughput），它也被称为吞吐量优先的垃圾收集器。</li><li>自适应调节策略也是 Parallel Scavenge 与 ParNew 的一个重要区别。</li></ul><p>高吞吐量则可以高效地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p><p>Parallel 收集器在 JDK 1.6 时提供了用于执行老年代垃圾收集的 Parallel Old 收集器，用来代替老年代的 Serial Old 收集器。</p><p>Parallel Old 收集器采用了<strong>标记-压缩算法</strong>，但同样也是基于<strong>并行回收</strong>和 STW 机制。</p><p>在吞吐量优先的应用场景中，Parallel 收集器和 Parallel Old 收集器的组合，在 Server 模式下的内存回收性能很不错。</p><p>在 Java 8 中，默认也是此垃圾收集器。</p><h4 id="参数配置-2"><a href="#参数配置-2" class="headerlink" title="参数配置"></a>参数配置</h4><ul><li><code>-XX:+UserParallelGC</code> 手动指定年轻代使用 Parallel 并行收集器执行内存回收任务。</li><li><code>-XX:+UseParallelOld</code> 手动指定老年代都是使用并行回收收集器。<ul><li>上面两个参数，分别适用于新生代和老年代。默认 JDK 8 是开启的。</li><li>上面两个参数，默认开启一个，另一个也会被开启。（互相激活）</li></ul></li><li><code>-XX:ParallelGCTheads</code> 设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能。<ul><li>在默认情况下，当 CPU 数量小于 8 个，ParallelGCThreads 的值等于 CPU 数量。</li><li>当 CPU 数量大于 8 个，ParallelGCThreads 的值等于 <code>3 + ((5 * CPU_COUNT) / 8 )</code>。</li></ul></li><li><code>-XX:MaxGCPauseMillis</code> 设置垃圾收集器最大停顿时间（即 STW 的时间）。单位是毫秒。<ul><li>为了尽可能地把停顿时间控制在 MaxGCPauseMillis 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数。</li><li>对于用户来讲，停顿时间越短体验越好。但是在服务端，我们注重高并发，整体的吞吐量。所以服务器端适合 Parallel，进行控制</li><li><strong>该参数使用需要谨慎。</strong></li></ul></li><li><code>-XX:GCTimeRatio</code> 垃圾收集时间占总时间的比例（= 1 / (N + 1)）。用于衡量吞吐量的大小。<ul><li>取值范围（0, 100）。默认值 99，也就是垃圾回收时间不超过 1%。</li><li>与前一个 <code>-XX:MaxGCPauseMillis</code> 参数有一定的矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例。</li></ul></li><li><code>-XX:+UseAdaptiveSizePolicy</code> 设置 Parallel Scavenge 收集器具有自适应调节策略。<ul><li>在这种模式下，年轻代的大小，Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。</li><li>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让虚拟机自己完成调度工作。</li></ul></li></ul><h3 id="CMS-回收器：低延迟"><a href="#CMS-回收器：低延迟" class="headerlink" title="CMS  回收器：低延迟"></a>CMS  回收器：低延迟</h3><p>在 JDK 1.5 时期，HotSpot 推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是 HotSpot 虚拟中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p><p>CMS 收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p><ul><li>目前很大一部分的 Java 应用集中在互联网站或者 B/S 系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS 收集器就非常符合这类应用的需求。</li></ul><p>CMS 的垃圾收集算法采用 标记-清除 算法，并且也会 STW。</p><p>不幸的是，CMS 作为老年代的收集器，却无法与 JDK 1.4.0 中已经存在的新生代收集器 Parallel Scavenge 收集器配合工作，所以在 JDK 1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或者 Serial 收集器中的一个。</p><p>在 G1 出现之前，CMS 使用还是非常广泛的，一直到今天，任然有很多系统使用 CMS GC。</p><h4 id="CMS-工作原理"><a href="#CMS-工作原理" class="headerlink" title="CMS 工作原理"></a>CMS 工作原理</h4><p>CMS 整个过程比之前的收集器要复杂，整个过程分为 4 个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段、并发清除阶段。</p><ul><li>初始标记（Initial-Mark）阶段：在这个阶段中，程序用所有的工作线程都将会因为 STW 机制而出现短暂的暂停，这个阶段的主要任务<strong>仅仅是标记出 GC Roots 能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的<strong>速度非常快</strong>。</li><li>并发标记（Concurrent-Mark）阶段：<strong>从 GC Roots 的直接关联对象开始遍历整个对象图的过程</strong>，这个过程<strong>耗时较长</strong>但是<strong>不需要停顿用户线程</strong>，可以与垃圾收集线程一起并发运行。</li><li>重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或交叉运行，因此为了<strong>修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</strong>，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li><li>并发清除（Concurrent-Sweep）阶段：此阶段<strong>清理删除掉标记阶段的已经死亡的对象，释放内存空间</strong>。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>尽管 CMS 收集器采用的是并发回收（非独占式），但是在其<strong>初始化标记和再次标记这两个阶段中仍然需要执行 STW 机制暂停程序中的工作线程</strong>，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要 STW，只是尽可能的缩短暂停时间。</p><p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低延迟的。</p><p>另外，由于在垃圾收集阶段用户线程没有中断，所以在 CMS 回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了在进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在 CMS 工作过程中依然有足够的内存空间支持应用程序运行。要是 CMS 运行期间预留的内存无法满足程序需要，就会出现一次 ”Concurrent Mode Failure“ 失败，这时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p><p>CMS 收集器的垃圾收集算法采用的是 标记-清除 算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么 CMS 在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能选择空闲列表（Free List）执行内存分配。</p><p>有人会觉得既然 Mark Sweep 会造成内存碎片，那么为什么不把算法换成 Mark Compact 呢？</p><p>答案其实很简单，因为当并发清除的时候，用 Compact 整理内存的话，原来的用户线程使用的内存还怎么用？要保证用户线程能继续执行，前提得是它运行的资源不受影响。Mark Compact 更适合 STW 这种场景下使用。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>并发收集</li><li>低延迟</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发 Full GC。</li><li>对 CPU 资源非常敏感，在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li><li>无法处理浮动垃圾，可能会出现 ”Concurrent Mode Failure“ 失败而导致另一次 Full GC 的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS 将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行 GC 时释放这些之前未被回收的内存空间。</li></ul><h4 id="参数配置-3"><a href="#参数配置-3" class="headerlink" title="参数配置"></a>参数配置</h4><ul><li><code>-XX:+UseConcMarkSweepGC</code> 手动指定使用 CMS 收集器执行内存回收任务。<ul><li>开启该参数后会自动将 <code>-XX:+UseParNewGC</code> 打开。即：年轻代使用 ParNew 收集器 + 老年代使用 CMS 收集器 + 老年代的备用收集器 Serial Old 收集器</li></ul></li><li><code>-XX:CMSInitiatingOccupanyFraction</code> 设置堆内存使用率的阈值，一旦到达该阈值，便开始进行回收。<ul><li>JDK 5 及以前版本的默认值为 68，即当老年代的空间使用率达到 68% 时，会执行一次 CMS 回收。JDK 6 及以上的版本默认值为 92%。</li><li>如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低 CMS 的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低 Full GC 的执行次数。</li></ul></li><li><code>-XX:+UseCMSCompactAtFullCollection</code> 用于指定在执行完 Full GC 后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</li><li><code>-XX:CMSFullGCsBeforeCompaction</code> 设置在执行多少次 Full GC 后对内存空间进行压缩整理。</li><li><code>-XX:ParallelCMSThreads</code> 设置 CMS 的线程数量。<ul><li>CMS 默认启动的线程数是 （ParallelCMSThreads + 3） / 4</li><li>ParallelCMSThreads 是年轻代并行收集器（ParNew）的线程数。当 CPU 资源比较紧张时，受到 CMS 收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>HotSpot 有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、CMS GC 这三个 GC 有什么不同呢？</p><ul><li>如果你想要最小化地使用内存和并行开销，请选择 Serial GC</li><li>如果你想要最大化应用程序的吞吐量，请选择 Parallel GC</li><li>如果你想要最小化 GC 的中断或停顿时间，请选择 CMS GC</li></ul><p>JDK 9 新特性：CMS 被标记为 Deprecate 了（JEP291）</p><ul><li>如果对 JDK 9 及以上版本的 HotSpot 虚拟机使用参数 <code>-XX:+UseConcMarkSweepGC</code> 来开启 CMS 收集器的话，用户会收到一个警告信息，提示 CMS 为了将会被去除。</li></ul><p>JDK 14 新特性：去除 CMS 垃圾收集器（JEP363）</p><ul><li>移除了 CMS 垃圾收集器，如果在 JDK 14 中使用 <code>-XX:+UseConcMarkSweepGC</code> 的话，JVM 不会报错，只是给出警告，但是不会退出。JVM 会自动使用默认的 GC。</li></ul><h3 id="G1-回收器：区域化分代式"><a href="#G1-回收器：区域化分代式" class="headerlink" title="G1 回收器：区域化分代式"></a>G1 回收器：区域化分代式</h3><p><strong>1.既然我们已经有了前面几个强大的 GC，为什么还要发布 Garbage First（G1）GC？</strong></p><p>原因就在于对于应用程序所应用的<strong>业务越来越庞大、复杂，用户越来越多</strong>，没有 GC 就不能保证应用程序正常进行，而经常造成 STW 的 GC 又跟不上实际的需求，所以才会不断地尝试对 GC 进行优化。G1（Garbage First）垃圾回收器是在 Java 7 Update 4 之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p><p>与此同时，为了适应现在<strong>不断扩大的内存和不断增加的处理器数量</strong>，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p><p><strong>官方给 G1 设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起”全功能收集器“的重任与期望。</strong></p><p><strong>2.为什么名字叫做 Garbage First（G1）呢？</strong></p><p>因为 G1 是一个并行回收器，它把堆内存分割成很多不相关的区域（Region）（物理上不连续的）。使用不同的 Region 来表示 Eden、Survivor0、Survivor1、老年代等。</p><p>G1 GC 有计划地避免在整个 Java 堆中进行全区域的垃圾收集。G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，<strong>每次根据允许的收集时间，优先回收价值最大的 Region</strong>。</p><p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给 G1 一个名字：垃圾优先（Garbage First）。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>G1（Garbage First）是一款面向服务端应用的垃圾收集器，主要针对配备多核 CPU 及大容量内存的机器，以极高概率满足 GC 停顿时间的同时，还兼具高吞吐量的性能特征。</p><p>在 JDK 1.7 版本正式启用，移除了 Experimental 的标识，是 JDK 9 以后的默认垃圾回收器，取代了 CMS 回收器以及 Parallel + Parallel Old 组合。被 Oracle 官方称为 ”全功能的垃圾收集器“。</p><p>与此同时，CMS 已经在 JDK 9 中被标记为废弃（Deprecated）。在  JDK 8 中还不是默认的垃圾回收器，需要使用 <code>-XX:+UseG1GC</code> 来使用。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>与其他的 GC 收集相比，G1 使用了全新的<strong>分区算法</strong>，其特定如下所示：</p><ul><li><strong>并行与并发</strong><ul><li>并行性：G1 在回收期间，可以有多个 GC 线程同时工作，有效利用多核计算能力。此时用户线程 STW</li><li>并发性：G1 拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况。</li></ul></li><li><strong>分代收集</strong><ul><li>从分代上看，<strong>G1 依然属于分代型垃圾回收器</strong>，它会区分年轻代和老生代，年轻代依然有 Eden 区和 Survivor 区。但从堆的结构上看，它不要求整个 Eden 区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li><li>将<strong>堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代</strong>。</li><li>和之前的各类回收器不同，它同时<strong>兼顾年轻代和老年代</strong>。对比其他回收器，或者工作在年轻代，或者工作在老年代。</li></ul></li><li><strong>空间整合</strong><ul><li>CMS：”标记-清除“ 算法、内存碎片、若干次 GC 后进行一次碎片整理</li><li>G1 将内存划分成为一个个的 Region。内存的回收是以 Region 作为基本单位的。<strong>Region 之间是复制算法</strong>，但整体上实际可看做是<strong>标记-压缩（Mark-Compact）算法</strong>，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次 GC。尤其是当 Java 堆非常大的时候，G1 的优势更加明显。</li></ul></li><li><strong>可预测的停顿时间模型</strong>（即软实时 soft real-time）<ul><li>这是 G1 相对于 CMS 的另一大优势，G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。<ul><li>由于分区的原因，G1 可以只选择部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li><li>G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），后台维护一个优先列表，<strong>每次根据允许的收集时间，优先回收价值最大的 Region。</strong>保证了 G1 收集器在有限的时间内可以<strong>获取尽可能高的收集效率。</strong></li><li>相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延迟停顿，但是最差情况要好很多。</li></ul></li></ul></li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>相较于 CMS，G1 还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1 无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比 CMS 要高。</p><p>从经验上说，在小内存应用上 CMS 的表现大概率会优于 G1，而  G1 在大内存应用上则发挥其优势。平衡点在 6-8 GB 之间。</p><h4 id="参数配置-4"><a href="#参数配置-4" class="headerlink" title="参数配置"></a>参数配置</h4><ul><li><code>-XX:+UseG1GC</code> 手动指定使用 G1 收集器执行内存回收任务。JDK 9 及以后默认开启。</li><li><code>-XX:G1HeapRegionSize</code> 设置每个 Region 的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间，目标是根据最小的 Java 堆大小划分出约 2048 个区域。默认是堆内存的 1/2000。</li><li><code>-XX:MaxGCPauseMillis</code> 设置期望达到的最大 GC 停顿时间指标（JJVM 会尽力实现，但不保证达到）。默认值是 200 ms。</li><li><code>-XX:ParallelGCThread</code> 设置 STW 工作线程数的值。最多设置为 8。</li><li><code>-XX:ConcGCThreads</code>设置并发标记的线程数。将 n 设置为并行垃圾回收线程数（ParallelGCThreads）的 1/4 左右。</li><li><code>-XX:InitiatingHeapOccupanyPercent</code> 设置触发并发 GC 周期的 Java 堆占用率阈值。超过此值，就触发 GC。默认值是 45。</li></ul><h4 id="常见操作步骤"><a href="#常见操作步骤" class="headerlink" title="常见操作步骤"></a>常见操作步骤</h4><p>G1 的设计原则就是简化 JVM 性能调优，开发人员只需要简单的三步即可完成调优：</p><ul><li>第一步，开启 G1 垃圾收集器</li><li>第二步：设置堆的最大内存</li><li>第三步：设置最大的停顿时间</li></ul><p>G1 中提供了三种垃圾回收模式：Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</li><li>最主要的应用是需要低 GC 延迟，并具有大堆的应用程序提供解决方案</li><li>如：在堆大小约 6GB 或更大时，可预测的暂停时间可以低于 0.5 秒；G1 通过每次只清理一部分而不是全部的 Region 的增量式清理来保证每次 GC 停顿时间不会太长。</li><li>用来替换掉 CMS 收集器，在下面的情况时，使用 G1 可能比 CMS 好：<ul><li>超过 50% 的 Java 堆被活动数据占用</li><li>对象分配频率或年代提升频率变化很大</li><li>GC 停顿时间过长（长于 0.5 至 1 秒）</li></ul></li><li>HotSpot 垃圾收集器里，除了 G1 以外，其他的垃圾收集器使用内置的 JVM 线程执行 GC 的多线程操作，而 G1 GC 可以采用应用线程承担后台运行的 GC 工作，即当 JVM 的 GC 线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。（啥意思？）</li></ul><h4 id="分区-Region：化整为零"><a href="#分区-Region：化整为零" class="headerlink" title="分区 Region：化整为零"></a>分区 Region：化整为零</h4><p>使用 G1 收集器时，它将整个 Java 堆划分成约 2048 个大小相同的独立 Region 块，每个 Region 块大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32 MB 之间，且为 2 的 N 次幂，即 1 MB，2 MB，4 MB，8 MB，16 MB，32 MB。可以通过 <code>-XX:G1HeapRegionSize</code> 设定。所有的 Region 大小相同，且在 JVM 生命周期内不会被改变。</p><p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分 Region（不需要连续）的集合。通过 Region 的动态分配方式实现逻辑上的连续。</p><p>一个 Region 有可能属于 Eden、Survivor 或者 Old/Tenured 内存区域。但是一个 Region 只可能属于一个角色。图中的 E 表示该 Region 属于 Eden 内存区域，S 表示属于 Survivor 内存区域，O 表示属于 Old 内存区域。图中空白的表示未使用的内存空间。</p><p>G1 垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域，如图中的 H 块。主要用于存储大对象，如果超过一个 Region 的50%，就放到 H。（这里老师讲解有误，在《JVM G1源码分析和调优》书中写到：对于大对象分为两类，一类是大于HeapRegionSize的一半，但是小于HeapRegionSize，即一个完整的堆分区可以保存，则直接从空闲列表直接拿一个堆分区，或者分配一个新的堆分区。如果是连续对象，则需要多个堆分区，思路同上，但是处理的时候需要加锁。）</p><p>设置 H 的原因：</p><p>对于堆中的大对象，默认直接会分配到老年代，但是如果它是一个短期存在的大对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1 划分了一个 Humongous 区，它用来专门存放大对象。<strong>如果一个 H 区装不下一个大对象，那么 G1 会寻找连续的 H 区来存储。</strong>为了能找到连续的 H 区，有时候不得不启用 Full GC。G1 的大多数行为都把 H 区作为老年代的一部分来看待。</p><h4 id="垃圾回收过程"><a href="#垃圾回收过程" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h4><p>G1 GC 的垃圾回收过程主要包括如下三个环节：</p><ul><li>年轻代 GC（Young GC）</li><li>老年代并发标记过程（Concurrent Marking）</li><li>混合回收（Mixed GC）</li><li>（如果需要，单线程、独占式、高强度的 Full GC 还是继续存在的。它针对 GC 的评估失败提供了一种失败保护机制，即强力回收。）</li></ul><p>Young GC → Young GC + Concurrent Marking → Mixed GC → Full GC</p><p>应用程序分配内存，<strong>当年轻代的 Eden 区用尽时开始年轻代回收过程</strong>；G1 年轻代收集阶段是一个<strong>并行</strong>的<strong>独占式</strong>收集器。在年轻代回收期，G1 GC 暂停所有应用程序线程，启动所线程执行年轻代回收。然后<strong>从年轻代区间移动存活对象到 Survivor 区间或者老年代区间，也有可能是两个区间都会涉及</strong>。</p><p>当堆内存使用达到一定值（默认 45%）时，开始老年代并发标记过程。</p><p>标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC 从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的 G1 回收器和其他 GC 不同<strong>，G1 的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的 Region 就可以了</strong>。同时，这个老年代 Region 是和年轻代一起被回收的。</p><p>举个例子：一个 Web 服务器，Java 进程最大堆内存为 4 G，每分钟响应 1500 个请求，每 45 秒钟会新分配大约 2 G 内存。G1 会每 45 秒钟进行一次年轻代回收，每 31 个小时整个堆的使用率会达到 45 %，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p><h5 id="Remembered-Set"><a href="#Remembered-Set" class="headerlink" title="Remembered Set"></a>Remembered Set</h5><ul><li>一个对象被不同区域引用的问题</li><li>一个 Region 不可能是孤立的，一个 Region 中的对象可能被其他任意 Region 中的对象引用，判断对象存活时，是否需要扫描整个 Java 堆才能保证准确？</li><li>在其他的分代收集器，也存在这样的问题（而 G1 更突出）</li><li>回收新生代也不得不同时扫描老年代？</li><li>这样的话会降低 Minor GC 的效率</li></ul><p>解决方法：</p><ul><li>无论 G1 还是其他分代收集器，JVM 都是使用 Remembered Set 来避免全局扫描；</li><li>每个 Region 都有一个对应的 Remembered Set；</li><li>每次 Reference 类型数据写操作时，都会产生一个写屏障（Write Barrier）暂时中断操作；</li><li>然后检查将要写入的引用指向的对象是否和该 Reference 类型数据在不同的 Region（其他收集器：检查老年代对象是否引用了新生代对象）；</li><li>如果不同，通过 CardTable（Remembered Set 的实现） 把相关引用信息记录到引用指向对象所在 Region 对应的 Remembered Set 中；</li><li>当进行垃圾收集时，在 GC Roots 的枚举范围加入 Remembered Set，就可以保证不进行全局扫描，也不会有遗漏。</li></ul><h4 id="垃圾回收过程一：年轻代回收过程"><a href="#垃圾回收过程一：年轻代回收过程" class="headerlink" title="垃圾回收过程一：年轻代回收过程"></a>垃圾回收过程一：年轻代回收过程</h4><p>JVM 启动时，G1 先准备好 Eden 区，程序在运行过程中不断创建对象到 Eden 区，当 Eden 空间耗尽时，G1 会启动一次年轻代垃圾回收过程。</p><p>年轻代垃圾回收只会收集 Eden 区和 Survivor 区。</p><p>YGC 时，首先 G1 停止应用程序的执行（STW），G1 创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代 Eden 区和 Survivor 区所有的内存分段。</p><p>然后开始如下回收过程：</p><ul><li><p><strong>第一阶段，扫描根。</strong></p><p>根是指 static 变量指向的对象，正在执行的方法调用链上的局部变量等。根引用连同 RSet 记录的外部引用作为扫描存活对象的入口。</p></li><li><p><strong>第二阶段，更新 RSet。</strong></p><p>处理 Dirty Card Queue 中的 card，更新 RSet。此阶段完成后，<strong>RSet 可以准确的反映老年代对所在的内存分段中对象的引用。</strong></p></li><li><p><strong>第三阶段：处理 RSet。</strong></p><p>识别被老年代对象所指向的 Eden 中的对象，这些被指向的 Eden 中的对象被认为是存活的对象。</p></li><li><p><strong>第四阶段：复制对象。</strong></p><p>此阶段，对象树被遍历，Eden 区内存段中存活的对象会被复制到 Survivor 区中空的内存分段，Survivor 区内存段中存活的对象如果年龄未达到阈值，年龄会加 1，达到阈值会被复制到 Old 区中的内存分段，如果 Survivor 空间不够，Eden 空间的部分数据会直接晋升到老年代空间。</p></li><li><p><strong>第五阶段：处理引用。</strong></p><p>处理 Soft、Weak、Phantom、Final、JNI Weak 等引用（这里可能描述不准确）。最终 Eden 空间的数据为空，GC 停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p></li></ul><p>注：对于应用程序的引用赋值语句 object.fieled = object，JVM 会在之前和之后执行特殊的操作以在 Dirty Card Queue 中入队一个保存了对象引用信息的 card，在年轻代回收的时候，G1 会对 Dirty Card Queue 中所有的 card 进行处理，以更新 RSet，保证 RSet 实时准确的反映引用关系。</p><p>那为什么不在引用赋值语句处直接更新 RSet 呢？这是为了性能的需要，RSet 的处理需要线程同步，开销会很大，使用队列性能会好很多。</p><h4 id="垃圾回收过程二：老年代并发标记过程"><a href="#垃圾回收过程二：老年代并发标记过程" class="headerlink" title="垃圾回收过程二：老年代并发标记过程"></a>垃圾回收过程二：老年代并发标记过程</h4><ul><li><strong>1.初始标记过程（STW）</strong>：标记从根节点直接可达的对象。这个阶段是 STW 的，并且会触发一次年轻代 GC。</li><li><strong>2.根区域扫描（Root Region Scanning）</strong>：G1 GC 扫描 Survivor 区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在 Young GC 之前完成。</li><li><strong>3.并发标记（Concurrent Marking）</strong>：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被 Young GC 中断。在并发标记阶段，若发现区域对象中所有的对象都是垃圾，那这个区域会被立即回收（实时回收）。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li><li><strong>4.再次标记（Remark,STW）</strong>：由于应用程序持续进行，需要修正上一次的标记结果。是 STW 的。G1 中采用了比 CMS 更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li><li><strong>5.独占清理（cleanup,STW）</strong>:计算各个区域的存活对象和 GC 回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是 STW 的。</li><li><strong>6.并发清理阶段</strong>：识别并清理完全空闲的区域</li></ul><h4 id="垃圾回收过程三：混合回收过程"><a href="#垃圾回收过程三：混合回收过程" class="headerlink" title="垃圾回收过程三：混合回收过程"></a>垃圾回收过程三：混合回收过程</h4><p>当越来越多的对象晋升到老年代 Old Region 时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即 Mixed GC，该算法并不是一个 Old GC，除了回收整个 Young Region，还会回收一部分的 Old Region。这里需要注意：是一部分老年代，而不是全部老年代。可以选择哪些 Old Region 进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是 Mixed GC 并不是 Full GC。</p><ul><li>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过 <code>-XX:G1MixedGCCountTarget</code> 设置）被回收。</li><li>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden 区内存分段，Survivor 区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</li><li>由于老年代中的内存分段默认分8次回收，G1 会优先回收垃圾多的内存分段。<strong>垃圾占内存分段比例越高的，越会被先回收。</strong>并且有一个阈值会决定内存分段是否被回收。<code>-XX:G1MixedGCLiveThresholdPercent</code> ，默认为 65%，意思是垃圾占内存分段比例要达到 65% 才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</li><li>混合回收并不一定要进行 8 次。有一个阈值 <code>-XX:G1HeapWastePercent</code>，默认值为 10%，意思是允许整个堆内存中有 10% 的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于 10%，则不再进行混合回收。因为 GC 会花费很多的时间但是回收到的内存却很少。</li></ul><h4 id="垃圾回收可选过程四：Full-GC"><a href="#垃圾回收可选过程四：Full-GC" class="headerlink" title="垃圾回收可选过程四：Full GC"></a>垃圾回收可选过程四：Full GC</h4><p>G1的初衷就是要避免 Full GC 的出现。但是如果上述方式不能正常工作，G1 会停止应用程序的执行（Stop-The-World），使用<strong>单线程</strong>的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p><p>要避免 Full GC 的发生，一旦发生 Full GC，需要对JVM参数进行调整。什么时候会发生 Full GC 呢？比如堆内存太小，当 G1 在复制存活对象的时候没有空的内存分段可用，则会回退到 Full GC，这种情况可以通过增大内存解决。</p><p>导致 G1 Full GC 的原因可能有两个：</p><ul><li>Evacuation 的时候没有足够的 To Space 来存放晋升的对象；</li><li>并发处理过程完成之前空间耗尽。</li></ul><h4 id="G1-补充"><a href="#G1-补充" class="headerlink" title="G1 补充"></a>G1 补充</h4><p>从 Oracle 官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到 G1 只是回一部分 Region，停顿时间是用户可控制的，所以并不迫切去实现，<strong>而选择把这个特性放到了 G1 之后出现的低延迟垃圾收集器（即 ZGC）中。</strong>另外，还考虑到 G1 不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。 </p><h4 id="G1-回收器的优化建议"><a href="#G1-回收器的优化建议" class="headerlink" title="G1 回收器的优化建议"></a>G1 回收器的优化建议</h4><ol><li>年轻代大小<ul><li>避免使用 -Xmn 或 -XX:NewRatio 等相关选项显式设置年轻代大小，因为固定年轻代的大小会覆盖可预测的暂停时间目标。我们让 G1 自己去调整</li></ul></li><li>暂停时间目标不要太过严苛<ul><li>G1 GC 的吞吐量目标是 90% 的应用程序时间和 10% 的垃圾回收时间</li><li>评估 G1 GC 的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li></ul></li></ol><h2 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h2><p>截止 JDK 1.8，一共有 7 款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p><table><thead><tr><th>垃圾收集器</th><th>分类</th><th>作用位置</th><th>使用算法</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>Serial</td><td>串行运行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>适用于单 CPU 环境下的 Client 模式</td></tr><tr><td>ParNew</td><td>并行运行</td><td>新生代</td><td>复制算法</td><td>响应速度优先</td><td>多 CPU 环境 Server 模式下与 CMS 配合使用</td></tr><tr><td>Parallel</td><td>并行运行</td><td>新生代</td><td>复制算法</td><td>吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td>Serial Old</td><td>串行运行</td><td>老年代</td><td>标记-压缩算法</td><td>响应速度优先</td><td>适用于单 CPU 环境下的 Client 模式</td></tr><tr><td>Parallel Old</td><td>并行运行</td><td>老年代</td><td>标记-压缩算法</td><td>吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td>CMS</td><td>并发运行</td><td>老年代</td><td>标记-清除算法</td><td>响应速度优先</td><td>适用于互联网或 B/S 业务</td></tr><tr><td>G1</td><td>并发、并行运行</td><td>新生代、老年代</td><td>标记-压缩算法、复制算法</td><td>响应速度优先</td><td>面向服务端应用</td></tr></tbody></table><p>GC 发展阶段</p><p>Serial → Parallel → CMS → G1 → ZGC</p><h3 id="怎么选择垃圾回收器"><a href="#怎么选择垃圾回收器" class="headerlink" title="怎么选择垃圾回收器"></a>怎么选择垃圾回收器</h3><p>Java 垃圾收集器的配置对于 JVM 优化来说是一个很重要的选择，选择合适的垃圾收集器可以让 JVM 的性能有一个很大的提升。怎么选择垃圾收集器？</p><ol><li>优先调整堆的大小让 JVM 自适应完成。</li><li>如果内存小于 100M，使用串行收集器</li><li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li><li>如果是多 CPU、需要高吞吐量、允许停顿时间超过 1 秒，选择并行或者 JVM 自己选择</li><li>如果是多 CPU、追求低停顿时间，需快速响应（比如延迟不能超过 1 秒，如互联网应用），使用并发收集器</li><li>官方推荐 G1，性能高。现在互联网的项目，基本都是使用 G1。</li></ol><p>最后需要明确一个观点：</p><ol><li>没有最好的收集器，更没有万能的收集算法</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ol><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ol><li>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。这里较通用、基础性的部分如下：<ul><li>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</li><li>垃圾收集器工作的基本流程。</li></ul></li><li>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</li></ol><h2 id="GC-日志分析"><a href="#GC-日志分析" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h2><h3 id="GC-日志参数设置"><a href="#GC-日志参数设置" class="headerlink" title="GC 日志参数设置"></a>GC 日志参数设置</h3><p><strong>通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略。</strong></p><p>内存分配与垃圾回收的参数列表</p><ol><li>-XX:+PrintGC ：输出GC日志。类似：-verbose:gc</li><li>-XX:+PrintGCDetails ：输出GC的详细日志</li><li>-XX:+PrintGCTimestamps ：输出GC的时间戳（以基准时间的形式）</li><li>-XX:+PrintGCDatestamps ：输出GC的时间戳（以日期的形式，如2013-05-04T21: 53: 59.234 +0800）</li><li>-XX:+PrintHeapAtGC ：在进行GC的前后打印出堆的信息</li><li>-Xloggc:…/logs/gc.log ：日志文件的输出路径</li></ol><h3 id="GC-日志查看工具"><a href="#GC-日志查看工具" class="headerlink" title="GC 日志查看工具"></a>GC 日志查看工具</h3><p>GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat 等</p><h3 id="GC-日志补充说明"><a href="#GC-日志补充说明" class="headerlink" title="GC 日志补充说明"></a>GC 日志补充说明</h3><ol><li>“[GC” 和 “[Full GC” 说明了这次垃圾收集的停顿类型，如果有 Full 则说明 GC 发生了 “Stop The World”</li><li>使用 Serial 收集器在新生代的名字是 Default New Generation，因此显示的是 “[DefNew”</li><li>使用 ParNew 收集器在新生代的名字会变成 “ParNew”，意思是 “Parallel New Generation”</li><li>使用 Parallel scavenge 收集器在新生代的名字是 “PSYoungGen”</li><li>老年代的收集和新生代道理一样，名字也是收集器决定的</li><li>使用 G1 收集器的话，会显示为 “garbage-first heap”</li><li>Allocation Failure 表明本次引起 GC 的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</li><li>[PSYoungGen: 5986K-&gt;696K(8704K) ] 5986K-&gt;704K (9216K)<ul><li>中括号内：GC 回收前年轻代大小，回收后大小，（年轻代总大小）</li><li>括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</li></ul></li><li>user 代表用户态回收耗时，sys 内核态回收耗时，real 实际耗时。由于多核线程切换的原因，时间总和可能会超过 real 时间</li></ol><h2 id="垃圾回收器的新发展"><a href="#垃圾回收器的新发展" class="headerlink" title="垃圾回收器的新发展"></a>垃圾回收器的新发展</h2><h3 id="垃圾回收器的发展过程"><a href="#垃圾回收器的发展过程" class="headerlink" title="垃圾回收器的发展过程"></a>垃圾回收器的发展过程</h3><p>GC 仍然处于飞速发展之中，目前的默认选项 G1 GC 在不断的进行改进，很多我们原来认为的缺点，例如串行的 Full GC、Card Table 扫描的低效等，都已经被大幅改进，例如，JDK10 以后，Full GC 已经是并行运行，在很多场景下，其表现还略优于 Parallel GC 的并行 Full GC 实现。 </p><p>即使是 Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，<strong>在 Serverless 等新的应用场景下，Serial GC 找到了新的舞台。</strong></p><p>比较不幸的是 CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在 JDK 9 中已经被标记为废弃，并在 JDK 14 版本中移除。</p><p>现在 G1 回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK 11出现）和 Shenandoah（Open JDK 12），其特点：主打低停顿时间。</p><h3 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h3><p><strong>Open JDK12的Shenandoash GC：低停顿时间的GC（实验性）</strong></p><p>Shenandoah 无疑是众多 GC 中最孤独的一个。是第一款不由 Oracle 公司团队领导开发的 Hotspot 垃圾收集器。不可避免的受到官方的排挤。比如号称 openJDK 和 OracleJDK 没有区别的 Oracle 公司仍拒绝在 Oracle JDK12 中支持 Shenandoah。</p><p>Shenandoah 垃圾回收器最初由 RedHat 进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在针对 JVM 上的内存回收实现低停顿的需求。在 2014 年贡献给 OpenJDK。</p><p>Red Hat 研发 Shenandoah 团队对外宣称，Shenandoah 垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为 200MB 还是200GB，99.9% 的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p><p><img src="https://up-img.yonghong.tech/pic/2021/05/12-20-51-shenandoah-benchmark-XybNYb.png" alt="shenandoah-benchmark"></p><p>这是 RedHat 在 2016 年发表的论文数据，测试内容是使用 ES 对 200GB 的维基百科数据进行索引。从结果看：</p><ol><li>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。</li><li>而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</li></ol><p>总结</p><ol><li>Shenandoah GC 的弱项：高运行负担下的吞吐量下降。</li><li>Shenandoah GC 的强项：低延迟时间。</li></ol><p>相关解读：尚硅谷宋红康Java12&amp;13新特性教程(深入解读java12&amp;13)</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWpKNDExTTdrUQ==">https://www.bilibili.com/video/BV1jJ411M7kQ<i class="fa fa-external-link-alt"></i></span></p><h3 id="令人震惊、革命性的-ZGC"><a href="#令人震惊、革命性的-ZGC" class="headerlink" title="令人震惊、革命性的 ZGC"></a>令人震惊、革命性的 ZGC</h3><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTIvZ2N0dW5pbmcv">https://docs.oracle.com/en/java/javase/12/gctuning/<i class="fa fa-external-link-alt"></i></span></p><p>ZGC 与 Shenandoah 目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</p><p>《深入理解Java虚拟机》一书中这样定义 ZGC：ZGC 收集器是一款基于 Region 内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现<strong>可并发的标记-压缩算法</strong>的，以<strong>低延迟为首要目标</strong>的一款垃圾收集器。</p><p>ZGC 的工作过程可以分为 4 个阶段：<strong>并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射</strong> 等。</p><p>ZGC 几乎在所有地方并发执行的，除了<strong>初始标记的是 STW 的</strong>。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p><p>在 ZGC 的强项停顿时间测试上，它毫不留情的将 Parallel、G1 拉开了两个数量级的差距。无论平均停顿、95% 停顿、99.8% 停顿、99. 98% 停顿，还是最大停顿时间，ZGC 都能毫不费劲控制在 10 毫秒以内。</p><p>虽然 ZGC 还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</p><h3 id="面向大堆的-AliGC"><a href="#面向大堆的-AliGC" class="headerlink" title="面向大堆的 AliGC"></a>面向大堆的 AliGC</h3><p>AliGC 是阿里巴巴 JVM 团队基于 G1 算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：</p><p><img src="https://up-img.yonghong.tech/pic/2021/05/12-20-51-aligc_1-FPAp6p.png" alt="12-20-51-aligc_1-FPAp6p"></p><p><img src="https://up-img.yonghong.tech/pic/2021/05/12-20-51-aligc_2-CKMw3y.png" alt="12-20-51-aligc_2-CKMw3y"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;垃圾回收器概述&quot;&gt;&lt;a href=&quot;#垃圾回收器概述&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收器概述&quot;&gt;&lt;/a&gt;垃圾回收器概述&lt;/h2&gt;&lt;p&gt;垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商，不同版本的 JVM 来实现。&lt;/p&gt;
&lt;p&gt;由于 JDK 的版本处于高速迭代过程中，因此 Java 发展至今已经衍生了众多的 GC 版本。&lt;/p&gt;</summary>
    
    
    
    <category term="Java进阶" scheme="http://yonghong.tech/categories/Java%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java进阶" scheme="http://yonghong.tech/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
    <category term="JVM" scheme="http://yonghong.tech/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 进阶 07 —— JVM 垃圾回收相关概念</title>
    <link href="http://yonghong.tech/java-advance/07-jvm-gc/"/>
    <id>http://yonghong.tech/java-advance/07-jvm-gc/</id>
    <published>2021-06-25T13:00:00.000Z</published>
    <updated>2021-06-25T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="System-gc-的理解"><a href="#System-gc-的理解" class="headerlink" title="System.gc() 的理解"></a>System.gc() 的理解</h2><p>在默认情况下，通过 System.gc() 或者 Runtime.getRuntime().gc() 的调用，<strong>会显示触发 Full GC</strong>，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p><p>然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用。</p><span id="more"></span><p>JVM 实现者可以通过 System.gc() 调用来决定 JVM 的 GC 行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用 System.gc()。</p><p>例子1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemGCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SystemGCTest();</span><br><span class="line">        System.gc(); <span class="comment">// 提醒 JVM 的垃圾回收器执行 GC</span></span><br><span class="line"></span><br><span class="line">        System.runFinalization(); <span class="comment">// 强制调用未被使用对象的 finalize 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了重写的 finalize 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalVarGCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">// 10M</span></span><br><span class="line">        System.gc(); <span class="comment">// 不能回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">// 10M</span></span><br><span class="line">        buffer = <span class="keyword">null</span>;</span><br><span class="line">        System.gc(); <span class="comment">// 可以回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">// 10M</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.gc(); <span class="comment">// 不能回收，局部变量表中仍然有引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">// 10M</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">        System.gc(); <span class="comment">// 可以回收，局部变量表中 value 和 buffer 使用同一个 Slot</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fun1();</span><br><span class="line">        System.gc(); <span class="comment">// 可以回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalVarGCTest local = <span class="keyword">new</span> LocalVarGCTest();</span><br><span class="line">        local.fun5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>内存溢出相对于内存泄露来说，尽管更容易理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</p><p>由于 GC 一直在发展，所以一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现 OOM 的情况。</p><p>大多数情况下，GC 会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的 Full GC 操作，这时候会回收大量的内存，供应用程序继续使用。</p><p>Java Doc 中对 OutOfMemoryError 的解释是，<strong>没有空闲内存，并且垃圾收集器也无法提供更多内存。</strong></p><p>1.首先说没有空闲内存的情况：说明 Java 虚拟机的堆内存不够。原因有二：</p><ul><li><p>Java 虚拟机的堆内存设置不够</p><p>比如：可能存在内存泄露问题：也很有可能就是堆的大小不合理，比如我们要处理比较可观的数据量，但是没有显示指定 JVM 堆大小或者指定数值偏小。我们可以通过 -Xms、-Xmx 来调整。</p></li><li><p>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在引用）</p><p>对于老版本的 Oracle JDK，因为永久代的大小时有限的，并且 JVM 对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型的时候，永久代出现 OOM 也非常多见，尤其是在运行时存在大量动态类型生成的场合；类似 intern 字符串缓存占用太多空间，也会导致 OOM 问题。对应的异常信息，会标记出来和永久代相关：”java.lang.OutOfMemoryError: PermGen Space”</p><p>随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的 OOM 有所改观，出现 OOM 异常的信息则变成了 “java.lang.OutOfMemoryError: Metaspace”。直接内存不足，也会导致 OOM。</p></li></ul><p>2.垃圾收集器无法提供更多内存，这里面隐含着一层意思是，在抛出 OOM 之前，通常垃圾收集器会被触发，尽其所能去清理出空间。</p><ul><li>例如：在引用机制分析中，涉及到 JVM 会去尝试回收软引用指向的对象等。</li><li>在 java.nio.BITs.reserveMemory() 方法中，我们能清楚地看到，System.gc() 会被调用，以清理空间。</li></ul><p>当然，也不是在任何情况下垃圾收集器都会被触发的。</p><ul><li>比如，我们去分配一个超大对象。类似一个超大数组超过堆的最大值，JVM 可以判断出垃圾收集并不能解决这个问题，所以直接抛出 OOM。</li></ul><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>内存泄露也称作 存储渗漏。严格来说，<strong>只有对象不会再被程序用到了，但是 GC 又不能回收他们的情况，才叫内存泄露</strong>。</p><p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对对象的生命周期变得很长甚至导致 OOM，也可以叫做宽泛意义上的内存泄露。</p><p>尽管内存泄露并不会立刻引起程序崩溃，但是一旦发生内存泄露，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现 OOM 异常，导致程序崩溃。</p><p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小决定于磁盘交换区设定的大小。</p><p>举例：</p><p>1.单例模式</p><p>单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄露的产生。</p><p>2.一些提供 close 的资源未关闭导致内存泄露</p><p>数据库连接（dataSource.getConnection()），网络连接（socket）和 io 连接必须手动 close，否则是不能被回收的。</p><h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p>Stop The World，简称 STW，指的是 GC 事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为 STW。</p><ul><li>可达性分析算法中枚举根节点（GC Roots）会导致所有 Java 执行线程停顿。<ul><li>分析工作必须在一个能确保一致性的快照中进行</li><li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li><li>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证。=</li></ul></li></ul><p>被 STW 中断的应用程序线程会在完成 GC 之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以我们需要减少 STW 的发生。</p><p>STW 事件和采用哪款 GC 无关，所有的 GC 都有这个事件。</p><p>哪怕是 G1 也不能完全避免 STW 情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能得缩短了暂停时间。</p><p>STW 是 JVM 在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p><p>开发中不要用 System.gc()；会导致 STW 的发生。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopTheWorldTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WorkThread workThread = <span class="keyword">new</span> WorkThread();</span><br><span class="line">        PrintThread printThread = <span class="keyword">new</span> PrintThread();</span><br><span class="line">        workThread.start();</span><br><span class="line">        printThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">                    list.add(buffer);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (list.size() &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">                    list.clear();</span><br><span class="line">                    System.gc(); <span class="comment">// 触发 Full GC，引发 STW</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> t = System.currentTimeMillis() - startTime;</span><br><span class="line">                    System.out.println(t / <span class="number">1000</span> + <span class="string">&quot;.&quot;</span> + t % <span class="number">1000</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收的并行与并发"><a href="#垃圾回收的并行与并发" class="headerlink" title="垃圾回收的并行与并发"></a>垃圾回收的并行与并发</h2><h3 id="并发（Concurrent）"><a href="#并发（Concurrent）" class="headerlink" title="并发（Concurrent）"></a>并发（Concurrent）</h3><p>在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行。</p><p>并发不是真正意义上的“同时进行”，只是 CPU 把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于 CPU 处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。</p><h3 id="并行（Parallel）"><a href="#并行（Parallel）" class="headerlink" title="并行（Parallel）"></a>并行（Parallel）</h3><p>当系统有一个以上 CPU 时，当一个 CPU 执行一个进程时，另一个 CPU 可以执行另一个进程，两个进行互不抢占 CPU 资源，可以同时进行，我们称之为并行。</p><p>其实决定并行的因素不是 CPU 的数量，而是 CPU 的核心数量，比如一个 CPU 多个核也可以并行。</p><p>适合科学计算，后台处理等弱交互场景。</p><h3 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h3><p>并发，指的是多个事情，在同一时间段内同时发生了。</p><p>并行，指的是多个事情，在同一时间点上同时发生了。</p><p>并发的多个任务之间是互相抢占资源的，</p><p>并行的多个任务之间是不互相抢占资源的。</p><p>只有在多 CPU 或者一个 CPU 多核的情况中，才会发生并行。</p><p>否则，看似同时发生的事情，其实都是并发执行的，</p><h3 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h3><p>并发和并行，在谈论垃圾收集器的上下午语境中，它们可以解释如下：</p><ul><li>并行：只多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。<ul><li>如 ParNew、Parallel Scavenge、Parallel Old</li></ul></li><li>串行<ul><li>相较于并行的概念，单线程执行。</li><li>如果内存不够，则程序暂停，启动 JVM 垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</li></ul></li><li>并发：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。<ul><li>用户程序在继续运行，而垃圾收集程序线程运行于另一个 CPU 上。</li><li>如：CMS、G1</li></ul></li></ul><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点（Safe-Point）"><a href="#安全点（Safe-Point）" class="headerlink" title="安全点（Safe Point）"></a>安全点（Safe Point）</h3><p>程序执行时并非在所有的地方都可以停顿下来开始 GC，只有在特定位置才能停顿下来开始 GC，这些位置称为 安全点（Safe Point）。</p><p>Safe Point 的选择很重要，<strong>如果太少可能导致 GC 等待的时间太长，如果太频繁可能导致运行时的性能问题</strong>。大部分指令的执行时间都非常短暂，通常会根据 “是否具有让程序长时间执行的特性” 为标准。比如：选择一些执行时间较长的指令作为 Safe Point，如<strong>方法调用、循环跳转和异常跳转</strong>等。</p><p>如何在 GC 发生时，检查所有线程都跑到最近的安全点停顿下来呢？</p><ul><li><p>抢占式中断：（目前没有虚拟机采用了）</p><p>首先中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</p></li><li><p>主动式中断：</p><p>设置一个中断标志，各个线程运行到 Safe Point 的时候主动轮询到这个标志，如果中断标志为真，则将自己进行中断挂起。</p></li></ul><h3 id="安全区域（Safe-Region）"><a href="#安全区域（Safe-Region）" class="headerlink" title="安全区域（Safe Region）"></a>安全区域（Safe Region）</h3><p>Safe Point 机制保证了程序执行时，在不太长的时间内就会遇到可进入 GC 的 Safe Point。但是，程序 “不执行” 的时候呢？例如线程处于 Sleep 状态或 Blocked 状态，这个时候线程无法响应 JVM 的中断请求，“走” 到安全点去中断挂起，JVM 也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。</p><p><strong>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始 GC 都是安全的。</strong>我们也可以把 Safe Region 看做是拓展了的 Safe Point。</p><p>实际执行时：</p><ul><li>当线程运行到 Safe Region 的代码时，首先标识已经进入了 Safe Region，如果这段时间内发生 GC，JVM 会忽略标识为 Safe Region 状态的线程。</li><li>当线程离开 Safe Region 时，会检查 JVM 是否已经完成 GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开 Safe Region 的信号为止。</li></ul><hr><h2 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h2><p>我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象。</p><p>【既偏门又非常高频的面试题】强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？</p><p>在 JDK 1.2 版本后，Java 对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Preference）和虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱。</p><p>除强引用外，其他 3 种引用均可以在 java.lang.ref 包中找到它们的身影。如下图，显示了这 3 种引用类型对应的类，开发人员可以在应用程序中直接使用它们。</p><p>Reference 子类中只有终结器引用是包内可见的，其他 3 种类型均为 public，可以在应用程序中直接使用。</p><ul><li>强引用：最传统的引用的定义，是指在程序代码之中普遍存在的引用赋值，即类似 “Object obj = new Object()” 这种引用关系。<strong>无论任何情况下，只要强引用关系还在，垃圾收集器就永远不会回收掉被引用的对象。</strong></li><li>软引用：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</li><li>弱引用：被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。</li><li>虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。<strong>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</strong></li></ul><h2 id="再谈引用：强引用（不回收）"><a href="#再谈引用：强引用（不回收）" class="headerlink" title="再谈引用：强引用（不回收）"></a>再谈引用：强引用（不回收）</h2><p>在 Java 程序中，最常见的引用类型是强引用（普通对象99%以上都是强引用），也就是我们最常见的普通对象引用，也就是默认的引用类型。</p><p>当在 Java 语言中使用 new 操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p><p>强引用的对象是可触及的，垃圾回收器就永远不会回收掉被引用的对象。</p><p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。</p><p>相对的，软引用、弱引用和虚引用的对象是软可触及、弱可触及的，在一定条件下，都是可以被回收的。所以，强引用时造成 Java 内存泄露的主要原因之一。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;强引用&quot;</span>);</span><br></pre></td></tr></table></figure><p>强引用具备以下特点：</p><ul><li>强引用可以直接访问目标对象。</li><li>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向对象。</li><li>强引用可能导致内存泄露。</li></ul><h2 id="再谈引用：软引用（内存不足即回收）"><a href="#再谈引用：软引用（内存不足即回收）" class="headerlink" title="再谈引用：软引用（内存不足即回收）"></a>再谈引用：软引用（内存不足即回收）</h2><p>软引用是用来描述一些还有用，但是非必需的对象。只要被软引用关联着的对象，在系统将要发生内存溢出异常前会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><p>软引用通常用来实现内存敏感的缓存。比如：高速缓存（如，MyBatis 的缓存）就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就能保证了使用缓存的同时，不会耗尽内存。</p><p>垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）。</p><p>类似弱引用，只不过 Java 虚拟机会尽量让软引用的存活时间长一些，迫不得已才清理。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object(); <span class="comment">// 声明强引用</span></span><br><span class="line">SoftReference&lt;Object&gt; sr = <span class="keyword">new</span> SoftReference&lt;&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>; <span class="comment">// 销毁强引用</span></span><br></pre></td></tr></table></figure><h2 id="再谈引用：弱引用（发现即回收）"><a href="#再谈引用：弱引用（发现即回收）" class="headerlink" title="再谈引用：弱引用（发现即回收）"></a>再谈引用：弱引用（发现即回收）</h2><p>弱引用也是用来描述那些非必需对象，<strong>只</strong>被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。在系统 GC 时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。</p><p>但是，由于垃圾回收器的线程通常优先级低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。</p><p>弱引用和软引用一样，在构造弱引用同时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p><p><strong>软引用、弱引用都非常适合来保存那些可有可无的缓存数据。</strong>如果这么做，当系统内存不足时，这些缓存数据就会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object(); <span class="comment">// 声明强引用</span></span><br><span class="line">WeakReference&lt;Object&gt; wr = <span class="keyword">new</span> WeakReference&lt;&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>; <span class="comment">// 销毁强引用</span></span><br></pre></td></tr></table></figure><p>弱引用对象与软引用对象最大的不同就在于，当 GC 在进行回收时，需要通过算法检查是够回收软引用对象，而对于弱引用，GC 总是进行回收。弱引用对象更容易、更快被 GC 回收。</p><p>面试题：开发中使用过 WeakHashMap 吗？</p><p>图片缓存等。</p><h2 id="再谈引用：虚引用（对象回收跟踪）"><a href="#再谈引用：虚引用（对象回收跟踪）" class="headerlink" title="再谈引用：虚引用（对象回收跟踪）"></a>再谈引用：虚引用（对象回收跟踪）</h2><p>也称为 “幽灵引用” 或者 “幻影引用”，是所有引用类型中最弱的一个。</p><p>一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。</p><p>它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的 get() 方法取得对象时，总是 null。</p><p>为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。</p><p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会回收对象后，将这个虚引用加入引用队列，以通知应用程序对象回收情况。</p><p>由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object(); <span class="comment">// 声明强引用</span></span><br><span class="line">ReferenceQueue phantomQueue = <span class="keyword">new</span> ReferenceQueue();</span><br><span class="line">PhantomReference&lt;Object&gt; pr = <span class="keyword">new</span> PhantomReference&lt;&gt;(obj, phantomQueue);</span><br><span class="line">obj = <span class="keyword">null</span>; <span class="comment">// 销毁强引用</span></span><br></pre></td></tr></table></figure><h2 id="再谈引用：终结器引用"><a href="#再谈引用：终结器引用" class="headerlink" title="再谈引用：终结器引用"></a>再谈引用：终结器引用</h2><p>它用于实现对象的 finalize 方法，也可以称为终结器引用。</p><p>无需手动编码，其内部配合引用队列使用。</p><p>在 GC 时，终结器引用入队。由 Finalizer 线程通过终结器引用找到被引用对象并调用它的 finalize 方法，第二次 GC 时才能回收被引用对象。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;System-gc-的理解&quot;&gt;&lt;a href=&quot;#System-gc-的理解&quot; class=&quot;headerlink&quot; title=&quot;System.gc() 的理解&quot;&gt;&lt;/a&gt;System.gc() 的理解&lt;/h2&gt;&lt;p&gt;在默认情况下，通过 System.gc() 或者 Runtime.getRuntime().gc() 的调用，&lt;strong&gt;会显示触发 Full GC&lt;/strong&gt;，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。&lt;/p&gt;
&lt;p&gt;然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用。&lt;/p&gt;</summary>
    
    
    
    <category term="Java进阶" scheme="http://yonghong.tech/categories/Java%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java进阶" scheme="http://yonghong.tech/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
    <category term="JVM" scheme="http://yonghong.tech/tags/JVM/"/>
    
  </entry>
  
</feed>
